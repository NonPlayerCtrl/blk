//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Class:       fbPC1                                                         //
// Description:                                                               //
// Vessel ON/OFF pressure control loop with output valve selection.           //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.1 David Paspa      07-Nov-2018 NA        Simplified by removing valve    //
//                                            selection option performed by   //
//                                            EMC1.                           //
// 2.0 David Paspa      30-Jan-2018 NA        Reboot for S7-1500.             //
// 0.6 Gerald Kontriner 09-Oct-2009 CC-09/016 MON_MISMATCH Logic.             //
// 0.5 Khairul Basar    16-Sep-2009 CC-09/016 Duplicate Input Parameters      //
//                                            deleted auto/manual both now    //
//                                            using same parameters,Interface //
//                                            FC used for Bumpless changeover,//
//                                            IL close valves.                //
// 0.4 Khairul Basar    15-Sep-2009 CC-09/016 Ref3.                           //
// 0.3 Khairul Basar    09-Sep-2009 CC-09/016 Ref2.                           //
// 0.2 Khairul Basar    01-Sep-2009 CC-09/016 Ref1.                           //
// 0.1 Khairul Basar    03-Aug-2009           Initial design.                 //
// Ref3:                                                                      //
// 1.If OPEN=3 state is selected, then selected valve should open until       //
// commanded to close.                                                        //
// 2. When CLOSE=1 state is selected, then all the valves must be closed.     //
// 3.When P_CTRL=2 state is selected, then Selected valve should open or close//
// based on FS Requirement F1, F2 & F3.                                       //
//                                                                            //
// In DB1 these above 3-states are added, P_CTRL data type changed from Bool  //
// to Int.                                                                    //
// (Note: This PC1 is controlled by EMC1, which says PC1 to operate in all    //
// these 3-states, whereas previously there was only two states defined       //
// ENABLED & DISABLED)                                                        //
//                                                                            //
// Ref2:                                                                      //
// Manual and Auto mode is programed.Manual & auto separate Setpoint, Gas     //
// select, & P_CTRL variable created and programmed accordingly.              //
//                                                                            //
// Ref1:                                                                      //
// Nw5-:db_low= SETPOINT-DEADBAND_L (not _H, corrected).                      //
// Nw6: Comparator changed from less_than_or_Equal to Less- than.  Now Valve  //
// will open when value Measured is less than db_low. (P_CTRL mode)           //
// Nw4-:db_high= SETPOINT+DEADBAND_H.                                         //
// Nw6: Comparator changed from greater_than_or_Equal to Greater-than. Now    //
// Valve will close when value Measured greater than db_high.(P_CTRL mode)    //
// Output command OUT_Qx is BOOL is changed to CMD_Qx of type INT which is the//
// normal requirement to which the PC1 is giving command. Ref. Nw8-11.        //
// PC1 correct device state PC1_DEV_STATE assigned where corrected value of   //
// ENABLED=1, DISABLED=2.                                                     //
// Initial Value of MEASURE is changed to 1.0                                 //
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "fbPC1"
TITLE = PC1 : Vessel ON/OFF pressure control
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : REO
NAME : fbPC1
VERSION : 2.1

//----------------------------------------------------------------------------//
// Declare interface and variables:                                           //
//----------------------------------------------------------------------------//
VAR
    p : "udtPC1";            // Block data interface
END_VAR

VAR_TEMP
    cmdDISABLE : Bool;
    cmdENABLE : Bool;
    selectHPCA : Bool;
    selectLPCA : Bool;
    dbHigh : Real;           // Deadband pressure high
    dbLow : Real;            // Deadband pressure low
    tDO : Bool;
    tDO_VENT : Bool;
END_VAR

BEGIN
NETWORK
TITLE = Safe Command on restart
    //------------------------------------------------------------------------//
    // Set the safe command if restarting the PLC:                            //
    //------------------------------------------------------------------------//
    A "flagFirstScanRestart";
    JCN _noRestart;
    L "dbCONST".BLK.PC1.SAFE.CMD;
    T #p.write.mc.CMD;
    T #p.read.mc.CMD_SAFE;
_noRestart:   NOP 0;

NETWORK
TITLE = Check any link device is not in AUTO
    //------------------------------------------------------------------------//
    // INTERLOCK   INTERLOCK   INTERLOCK   INTERLOCK   INTERLOCK   INTERLOCK  //
    // INTERLOCK   INTERLOCK   INTERLOCK   INTERLOCK   INTERLOCK   INTERLOCK  //
    //                                                                        //
    // Check if any link cannot be controlled if not in AUTO:                 //
    //------------------------------------------------------------------------//
    O "idbPI1".f[#p.link.PRESSURE].p.read.mc.INTERLOCK;
    O(;
    A #selectHPCA;
    A "idbPOS2".f[#p.link.HPCA].p.read.mc.INTERLOCK;
    );
    O(;
    A #selectLPCA;
    A "idbPOS2".f[#p.link.LPCA].p.read.mc.INTERLOCK;
    );
    O "idbPOS2".f[#p.link.VENT].p.read.mc.INTERLOCK;
    O(;
    A #selectHPCA;
    AN "idbPOS2".f[#p.link.HPCA].p.read.mc.modeAUTO;
    );
    O(;
    A #selectLPCA;
    AN "idbPOS2".f[#p.link.LPCA].p.read.mc.modeAUTO;
    );
    ON "idbPOS2".f[#p.link.VENT].p.read.mc.modeAUTO;
    = #p.read.mc.INTIL;

NETWORK
TITLE = Call Mode and Command handling block
    //------------------------------------------------------------------------//
    // COMMAND PROCESSOR   COMMAND PROCESSOR   COMMAND PROCESSOR   COMMAND    //
    //                                                                        //
    // Process the standard block functions for command, mode, interlock and  //
    // state:                                                                 //
    //------------------------------------------------------------------------//
    CALL "fcModeCmd"
    (   mcRead               := #p.read.mc ,
        mcWrite              := #p.write.mc
    );

NETWORK
TITLE = Command is DISABLE
    //------------------------------------------------------------------------//
    // COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND    //
    // COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND    //
    //                                                                        //
    // CMD is DISABLE:                                                        //
    //------------------------------------------------------------------------//
    O #p.read.mc.modeOOS;
    O #p.read.mc.INTERLOCK;
    O(;
    L #p.write.mc.CMD;
    L "dbCONST".BLK.PC1.CMD.DISABLE;
    ==I;
    );
    = #cmdDISABLE;
    = #p.read.cmdDisable;

NETWORK
TITLE = DISABLE event if just commanded
    //------------------------------------------------------------------------//
    // Check if the command has just been changed to Disabled:                //
    //------------------------------------------------------------------------//
    A #p.read.cmdDisable;
    FP #p.read.edgeCmdDisable;
    = #p.read.eventCmdDisable;

NETWORK
TITLE = Command is ENABLE
    //------------------------------------------------------------------------//
    // CMD is ENABLE control and no fault condition:                          //
    //------------------------------------------------------------------------//
    AN #p.read.mc.modeOOS;
    AN #p.read.mc.INTERLOCK;
    AN "idbPI1".f[#p.link.PRESSURE].p.read.mc.INTERLOCK;
    A(;
    L #p.write.mc.CMD;
    L "dbCONST".BLK.PC1.CMD.ENABLE;
    ==I;
    );
    = #cmdENABLE;

NETWORK
TITLE = Calculate high pressure valve close limit in PRESSURE
    //------------------------------------------------------------------------//
    // INPUTS   INPUTS   INPUTS   INPUTS   INPUTS   INPUTS   INPUTS   INPUTS  //
    // INPUTS   INPUTS   INPUTS   INPUTS   INPUTS   INPUTS   INPUTS   INPUTS  //
    //                                                                        //
    // Add deadband high to setpoint to calculate the value when the selected //
    // valve should close in PRESSURE control:                                //
    //------------------------------------------------------------------------//
    A #cmdENABLE;
    JCN _a;
    L #p.write.SETPOINT;
    L #p.write.DB_H;
    +R;
    T #dbHigh;
_a:   NOP 0;

NETWORK
TITLE = Calculate low pressure valve open limit in PRESSURE
    //------------------------------------------------------------------------//
    // Subtract deadband low from setpoint to calculate the value when the    //
    // selected valve should open in PRESSURE control:                        //
    //------------------------------------------------------------------------//
    A #cmdENABLE;
    JCN _b;
    L #p.write.SETPOINT;
    L #p.write.DB_L;
    -R;
    T #dbLow;
_b:   NOP 0;

NETWORK
TITLE = Selected valve is HPCA
    //------------------------------------------------------------------------//
    // Selected GAS valve is HPCA:                                            //
    //------------------------------------------------------------------------//
    A(;
    L #p.write.MEDIUM_GAS;
    L "dbCONST".SEL.GAS.HPCA;
    ==I;
    );
    = #selectHPCA;

NETWORK
TITLE = Selected valve is LPCA
    //------------------------------------------------------------------------//
    // Selected GAS valve is LPCA:                                            //
    //------------------------------------------------------------------------//
    A(;
    L #p.write.MEDIUM_GAS;
    L "dbCONST".SEL.GAS.LPCA;
    ==I;
    );
    = #selectLPCA;

NETWORK
TITLE = Check if selected valve should be OPENED
    //------------------------------------------------------------------------//
    // OUTPUTS   OUTPUTS   OUTPUTS   OUTPUTS   OUTPUTS   OUTPUTS   OUTPUTS    //
    // OUTPUTS   OUTPUTS   OUTPUTS   OUTPUTS   OUTPUTS   OUTPUTS   OUTPUTS    //
    //                                                                        //
    // Check if selected valve should be OPENED if PRESSURE control and       //
    // pressure measured process PV is less than the setpoint minus the       //
    // low deadband or if VALVE open command:                                 //
    //------------------------------------------------------------------------//
    A #cmdENABLE;
    A(;
    L "idbPI1".f[#p.link.PRESSURE].p.read.ai.PV;
    L #dbLow;
    <R;
    );
    JCN _c;
    S #tDO;
_c:   NOP 0;

NETWORK
TITLE = Check if selected valve should be CLOSED
    //------------------------------------------------------------------------//
    // Check if selected valve should be CLOSED if PRESSURE control and       //
    // pressure measured process PV is greater than the setpoint:             //
    //------------------------------------------------------------------------//
    A #cmdENABLE;
    A(;
    L "idbPI1".f[#p.link.PRESSURE].p.read.ai.PV;
    L #p.write.SETPOINT;
    >R;
    );
    JCN _d;
    R #tDO;
_d:   NOP 0;

NETWORK
TITLE = Check if VENT valve should be OPENED
    //------------------------------------------------------------------------//
    // Check if vent valve should be OPENED if the pressure PV is greater     //
    // than the setpoint plus the high deadband:                              //
    //------------------------------------------------------------------------//
    A #cmdENABLE;
    AN #tDO;
    A(;
    L "idbPI1".f[#p.link.PRESSURE].p.read.ai.PV;
    L #dbHigh;
    >R;
    );
    JCN _e;
    S #tDO_VENT;
_e:   NOP 0;

NETWORK
TITLE = Check if VENT valve should be CLOSED
    //------------------------------------------------------------------------//
    // Check if vent valve should be CLOSED if the pressure PV is less than   //
    // the setpoint:                                                          //
    //------------------------------------------------------------------------//
    A #cmdENABLE;
    AN #tDO;
    A(;
    L "idbPI1".f[#p.link.PRESSURE].p.read.ai.PV;
    L #p.write.SETPOINT;
    <R;
    );
    JCN _f;
    R #tDO_VENT;
_f:   NOP 0;

NETWORK
TITLE = Check if all valves should be CLOSED
    //------------------------------------------------------------------------//
    // Check if vent valve should be OPENED if PRESSURE control and pressure  //
    // measured process PV is greater than the setpoint plus the high         //
    // deadband:                                                              //
    //------------------------------------------------------------------------//
    A #cmdDISABLE;
    JCN _g;
    R #tDO;
    R #tDO_VENT;
_g:   NOP 0;

NETWORK
TITLE = Open HPCA valve if required
    //------------------------------------------------------------------------//
    // If enabled and HPCA selected then OPEN it:                             //
    //------------------------------------------------------------------------//
    AN #p.read.mc.INTERLOCK;
    A #tDO;
    A #selectHPCA;
    AN "idbPOS2".f[#p.link.HPCA].p.read.mc.INTERLOCK;
    A "idbPOS2".f[#p.link.HPCA].p.read.mc.modeAUTO;
    JCN _i;
    L "dbCONST".BLK.POSx.CMD.OPEN;
    T "idbPOS2".f[#p.link.HPCA].p.write.mc.CMD;
_i:   NOP 0;

NETWORK
TITLE = Open LPCA valve if required
    //------------------------------------------------------------------------//
    // If enabled and LPCA selected then OPEN it:                             //
    //------------------------------------------------------------------------//
    AN #p.read.mc.INTERLOCK;
    A #tDO;
    A #selectLPCA;
    AN "idbPOS2".f[#p.link.LPCA].p.read.mc.INTERLOCK;
    A "idbPOS2".f[#p.link.LPCA].p.read.mc.modeAUTO;
    JCN _j;
    L "dbCONST".BLK.POSx.CMD.OPEN;
    T "idbPOS2".f[#p.link.LPCA].p.write.mc.CMD;
_j:   NOP 0;

NETWORK
TITLE = Open VENT valve if required
    //------------------------------------------------------------------------//
    // If enabled and VENT required then OPEN it:                             //
    //------------------------------------------------------------------------//
    AN "idbPOS2".f[#p.link.VENT].p.read.mc.INTERLOCK;
    A "idbPOS2".f[#p.link.VENT].p.read.mc.modeAUTO;
    A(;
    O #p.read.eventCmdDisable;
    O(;
    A #cmdENABLE;
    A #tDO_VENT;
    );
    );
    JCN _l;
    L "dbCONST".BLK.POSx.CMD.OPEN;
    T "idbPOS2".f[#p.link.VENT].p.write.mc.CMD;
_l:   NOP 0;

NETWORK
TITLE = Close HPCA valve if required
    //------------------------------------------------------------------------//
    // If HPCA valve to be closed then CLOSE it:                              //
    //------------------------------------------------------------------------//
    A "idbPOS2".f[#p.link.HPCA].p.read.mc.modeAUTO;
    A(;
    O(;
    A #cmdENABLE;
    A #selectHPCA;
    AN #tDO;
    );
    O(;
    A #cmdENABLE;
    AN #selectHPCA;
    );
    O #p.read.eventCmdDisable;
    );
    JCN _n;
    L "dbCONST".BLK.POSx.CMD.CLOSE;
    T "idbPOS2".f[#p.link.HPCA].p.write.mc.CMD;
_n:   NOP 0;

NETWORK
TITLE = Close LPCA valve if required
    //------------------------------------------------------------------------//
    // If LPCA valve to be closed then CLOSE it:                              //
    //------------------------------------------------------------------------//
    A "idbPOS2".f[#p.link.LPCA].p.read.mc.modeAUTO;
    A(;
    O(;
    A #cmdENABLE;
    A #selectLPCA;
    AN #tDO;
    );
    O(;
    A #cmdENABLE;
    AN #selectLPCA;
    );
    O #p.read.eventCmdDisable;
    );
    JCN _o;
    L "dbCONST".BLK.POSx.CMD.CLOSE;
    T "idbPOS2".f[#p.link.LPCA].p.write.mc.CMD;
_o:   NOP 0;

NETWORK
TITLE = Close VENT valve if required
    //------------------------------------------------------------------------//
    // If VENT valve to be closed then CLOSE it:                              //
    //------------------------------------------------------------------------//
    A #cmdENABLE;
    A "idbPOS2".f[#p.link.VENT].p.read.mc.modeAUTO;
    AN #tDO_VENT;
    JCN _q;
    L "dbCONST".BLK.POSx.CMD.CLOSE;
    T "idbPOS2".f[#p.link.VENT].p.write.mc.CMD;
_q:   NOP 0;

NETWORK
TITLE = Set Device State to Disabled if commanded
    //------------------------------------------------------------------------//
    // STATE   STATE   STATE   STATE   STATE   STATE   STATE   STATE   STATE  //
    // STATE   STATE   STATE   STATE   STATE   STATE   STATE   STATE   STATE  //
    //                                                                        //
    // State is DISABLED if commanded to DISABLE:                             //
    //------------------------------------------------------------------------//
    A #cmdDISABLE;
    JCN _r;
    L "dbCONST".BLK.PC1.STATE.DISABLED;
    T #p.read.mc.STATE;
_r:   NOP 0;

NETWORK
TITLE = Set Device State to Enabled if commanded
    //------------------------------------------------------------------------//
    // State is ENABLED if commanded to ENABLE:                               //
    //------------------------------------------------------------------------//
    A #cmdENABLE;
    JCN _s;
    L "dbCONST".BLK.PC1.STATE.ENABLED;
    T #p.read.mc.STATE;
_s:   NOP 0;

END_FUNCTION_BLOCK
