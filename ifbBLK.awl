//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//                Automatically Generated File - Do Not Edit                  //
//----------------------------------------------------------------------------//
// Class:       ifb@@CLASS@@                                                  //
// Description: Instances of Equipment Module @@CLASS@@                       //
//                                                                            //
// @@CLASSDESCRIPTION@@.                                                      //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      05-Jan-2018 NA        Reboot for S7-1500.             //
// 0.5 Khairul Basar    12-Oct-2009 CC-09/023 Toggle Mode coded.              //
// 0.4 Khairul Basar    30-Sep-2009 CC-09/023 EM Mode var changed to IN_OUT.  //
// 0.3 Khairul Basar    17-Sep-2009 CC-09/016 Duplicate Auto/man parameters   //
//                                            deleted auto/manual,Instaed     //
//                                            single command,Setpoint is used //
//                                            for both mode.                  //
// 0.2 Khairul Basar    28-Aug-2009 CC-09/023 Phases are updated.             //
// 0.1 Khairul Basar    14-Aug-2009 CC-09/023 Initial design.                 //
//----------------------------------------------------------------------------//
// Index   Instance    Description                                            //
@@TEMPLATE_BEGIN|createInstancesGlobal@@
// @@IDX@@       @@INSTANCE@@      @@DESCRIPTION@@
@@TEMPLATE_END@@
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "ifb@@CLASS@@"
TITLE = @@CLASS@@ : @@CLASSDESCRIPTION@@
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : REO
NAME : ifb@@CLASS@@
VERSION : 2.0

//----------------------------------------------------------------------------//
// Declare the instance objects of the class:                                 //
//----------------------------------------------------------------------------//
VAR
@@TEMPLATE_BEGIN|createClassNone@@
@@ATTR_BEGIN|numInstances@@
    f : Array[0..@@MAXITEM@@] of "fb@@CLASS@@";
@@ATTR_END|numInstances@@
@@TEMPLATE_END@@
END_VAR

VAR_TEMP
@@TEMPLATE_BEGIN|createClassNone@@
@@ATTR_BEGIN|pBLOCK_RECIPE@@
    t@@BLOCKPARAMETER@@ : @@PARAMETERDATATYPE@@;     // @@PARAMETERDESCRIPTION@@ //
@@ATTR_END|pBLOCK_RECIPE@@
@@TEMPLATE_END@@
END_VAR

BEGIN
@@TEMPLATE_BEGIN|createInstances@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@DESCRIPTION@@
    //------------------------------------------------------------------------//
    // INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INST //
    // INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INST //
    //                                                                        //
    // Get the critical interlock if there is one. If not set alwaysLow:      //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|CRIL_EXISTS@@
@@ATTR_DEFAULT_BEGIN@@
    A "alwaysLow";
@@ATTR_DEFAULT_END@@
@@ATTR_BEGIN|CRIL_TARGET@@
    A "idbCRIL".p[@@IDXIL@@].INTERLOCK;
@@ATTR_END|CRIL_TARGET@@
@@ATTR_END|CRIL_EXISTS@@
    = #f[@@IDX@@].p.read.mc.CRIL;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@DESCRIPTION@@
    //------------------------------------------------------------------------//
    // Get the non-critical interlock if there is one. If not set alwaysLow:  //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|NCRIL_EXISTS@@
@@ATTR_DEFAULT_BEGIN@@
    A "alwaysLow";
@@ATTR_DEFAULT_END@@
@@ATTR_BEGIN|NCRIL_TARGET@@
    A "idbNCRIL".p[@@IDXIL@@].INTERLOCK;
@@ATTR_END|NCRIL_TARGET@@
@@ATTR_END|NCRIL_EXISTS@@
    = #f[@@IDX@@].p.read.mc.NCRIL;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Unique ID
    //------------------------------------------------------------------------//
    // Set the instance unique ID:                                            //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.ID.@@INSTANCE@@;
    T #f[@@IDX@@].p.read.mc.ME;

@@ATTR_BEGIN|ISOWNED@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Owner ID
    //------------------------------------------------------------------------//
    // Set the instance Owner ID:                                             //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.ID.@@PARENT@@;
    T #f[@@IDX@@].p.write.mc.OWNER;
@@ATTR_END|ISOWNED@@

@@ATTR_BEGIN|SELVALUEMYSELF@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Instance selection of myself
    //------------------------------------------------------------------------//
    // Set the instance selection value to itself:                            //
    //------------------------------------------------------------------------//
    L "dbCONST".SEL.@@SELECTION@@.@@INSTANCE@@;
    T #f[@@IDX@@].p.write.@@PARAMETER@@_@@SELECTION@@;
@@ATTR_END|SELVALUEMYSELF@@

@@ATTR_BEGIN|FLOWPATH@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@CLASS@@ is a Flowpath device
    //------------------------------------------------------------------------//
    // This class of device is a FLOWPATH device where the state must equal   //
    // the command once set by the parent:                                    //
    //------------------------------------------------------------------------//
    A "alwaysHigh";
    = #f[@@IDX@@].p.read.mc.FLOWPATH;
@@ATTR_END|FLOWPATH@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Block Read
    //------------------------------------------------------------------------//
    // This block can only reside within this CPU:                            //
    //------------------------------------------------------------------------//
    A "alwaysHigh";
    = #f[@@IDX@@].p.read.mc.isMaster;

@@ATTR_BEGIN|ISOWNED@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Block Write
    //------------------------------------------------------------------------//
    // This block can only be owned by a parent block in this CPU:            //
    //------------------------------------------------------------------------//
    A "alwaysHigh";
    = #f[@@IDX@@].p.write.mc.isMaster;
@@ATTR_END|ISOWNED@@

@@ATTR_BEGIN|SFCFlag@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Flag if SFCs are used in this block
    //------------------------------------------------------------------------//
    // Flag whether this block has any SFC at all:                            //
    //------------------------------------------------------------------------//
    A @@EXISTSSFC@@;
    = #f[@@IDX@@].p.read.bmc.hasSFC;
@@ATTR_END|SFCFlag@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Safe Command on startup
    //------------------------------------------------------------------------//
    // Set the safe command if restarting the PLC:                            //
    //------------------------------------------------------------------------//
    A "flagFirstScanRestart";
    JCN _notRestart_@@COUNTERTEMPLATE|1@@;
    L "dbCONST".BLK.@@CLASS@@.SAFE.CMD;
    T #f[@@IDX@@].p.read.mc.CMD_SAFE;
_notRestart_@@COUNTERTEMPLATE@@:   NOP 0;

@@ATTR_BEGIN|pBLOCK_RECIPE_EXISTS@@
@@ATTR_BEGIN|RECIPE_CLASS@@
NETWORK
TITLE = Item @@IDX@@ Recipe parameters if owned by @@RECIPENAME@@
    //------------------------------------------------------------------------//
    // Get the recipe parameters:                                             //
    //------------------------------------------------------------------------//
    A(;
    L "dbCONST".BLK.ID.@@RECIPENAME@@;
    L #f[@@IDX@@].p.write.mc.RECIPE;
    ==I;
    );
    JCN _notRecipe_@@INSTANCE@@_@@RECIPENAME@@;
@@ATTR_BEGIN|pBLOCK_RECIPE@@
    L "dbRECIPE".recipeList.@@RECIPENAME@@.@@BLOCKPARAMETER@@;
    T #t@@BLOCKPARAMETER@@;
@@ATTR_END|pBLOCK_RECIPE@@
_notRecipe_@@INSTANCE@@_@@RECIPENAME@@:   NOP 0;

@@ATTR_END|RECIPE_CLASS@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Set recipe parameters
    //------------------------------------------------------------------------//
    // Set the recipe parameter values:                                       //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|pBLOCK_RECIPE@@
    L #t@@BLOCKPARAMETER@@;
    T #f[@@IDX@@].p.write.@@BLOCKPARAMETER@@;
@@ATTR_END|pBLOCK_RECIPE@@
@@ATTR_END|pBLOCK_RECIPE_EXISTS@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Set child index numbers
    //------------------------------------------------------------------------//
    // Set the child block index values:                                      //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|CHILD_INSTANCE@@
    L @@CHILDIDX@@;          // @@CHILDCLASS@@
    T #f[@@IDX@@].p.child.@@CHILDPARAMETERALIAS@@;
@@ATTR_END|CHILD_INSTANCE@@

@@ATTR_BEGIN|LINK_BLK@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Linked block parameters
    //------------------------------------------------------------------------//
    // Set the linked block child index:                                      //
    //------------------------------------------------------------------------//
    L @@LINKIDX@@;           // @@LINKCLASS@@
    T #f[@@IDX@@].p.link.@@LINKALIAS@@;

@@ATTR_END|LINK_BLK@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@DESCRIPTION@@
    //------------------------------------------------------------------------//
    // Call the class function to process each instance:                      //
    //------------------------------------------------------------------------//
    CALL #f[@@IDX@@];

@@ATTR_BEGIN|pEventLogMsgExists@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Transfer class event log message bits to global DB
    //------------------------------------------------------------------------//
    // Transfer the class event log message bits to the global DB:            //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|pEventLogMsgWordClass@@
    L #f[@@IDX@@].p.read.eventLogMsg_@@CWORD@@;
    T "dbEVENT".eventLogMsg.event_@@INSTANCE@@_@@CWORD@@;
@@ATTR_END|pEventLogMsgWordClass@@
@@ATTR_END|pEventLogMsgExists@@

@@ATTR_BEGIN|pEventLogRealExists@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Transfer class event log real data bits to global DB
    //------------------------------------------------------------------------//
    // Transfer the class event log message bits to the global DB:            //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|pEventLogRealWordClass@@
    L #f[@@IDX@@].p.read.eventLogReal_@@CWORD@@;
    T "dbEVENT".eventLogReal.event_@@INSTANCE@@_@@CWORD@@;
@@ATTR_END|pEventLogRealWordClass@@
@@ATTR_END|pEventLogRealExists@@

@@ATTR_BEGIN|pEventLogTimeExists@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Transfer class event log time data bits to global DB
    //------------------------------------------------------------------------//
    // Transfer the class event log message bits to the global DB:            //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|pEventLogTimeWordClass@@
    L #f[@@IDX@@].p.read.eventLogTime_@@CWORD@@;
    T "dbEVENT".eventLogTime.event_@@INSTANCE@@_@@CWORD@@;
@@ATTR_END|pEventLogTimeWordClass@@
@@ATTR_END|pEventLogTimeExists@@

@@ATTR_BEGIN|pEventConfirmNoExists@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Transfer class prompt event confirm No message bits to global DB
    //------------------------------------------------------------------------//
    // Transfer the class event confirm No message bits to the global DB:    //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|pEventConfirmNoWordClass@@
    L #f[@@IDX@@].p.read.eventConfirmNo_@@CWORD@@;
    T "dbEVENT".eventConfirmNo.event_@@INSTANCE@@_@@CWORD@@;
@@ATTR_END|pEventConfirmNoWordClass@@
@@ATTR_END|pEventConfirmNoExists@@

@@ATTR_BEGIN|pEventConfirmYesExists@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Transfer class prompt event confirm Yes message bits to global DB
    //------------------------------------------------------------------------//
    // Transfer the class event confirm Yes message bits to the global DB:    //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|pEventConfirmYesWordClass@@
    L #f[@@IDX@@].p.read.eventConfirmYes_@@CWORD@@;
    T "dbEVENT".eventConfirmYes.event_@@INSTANCE@@_@@CWORD@@;
@@ATTR_END|pEventConfirmYesWordClass@@
@@ATTR_END|pEventConfirmYesExists@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Send the general block alarm bits to the global DB
    //------------------------------------------------------------------------//
    // Transfer the block arlam bits to the global DB:                        //
    //------------------------------------------------------------------------//
    L #f[@@IDX@@].p.read.mc.ALARM;
    T "dbEVENT".alarmBlock.alarm_@@INSTANCE@@;

@@TEMPLATE_END@@

@@TEMPLATE_BEGIN|createInstancesForeign@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Block Read
    //------------------------------------------------------------------------//
    // This block can only reside in another CPU:                             //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #f[@@IDX@@].p.read.mc.isMaster;

@@ATTR_BEGIN|ISOWNED@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Block Write
    //------------------------------------------------------------------------//
    // This block can only be owned by a parent block in another CPU:         //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #f[@@IDX@@].p.write.mc.isMaster;
@@ATTR_END|ISOWNED@@

@@TEMPLATE_END@@

END_FUNCTION_BLOCK
