//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//                Automatically Generated File - Do Not Edit                  //
//----------------------------------------------------------------------------//
// Class:       ifb@@CLASS@@                                                  //
// Description: Instances of Equipment Module @@CLASS@@                       //
//                                                                            //
// @@CLASSDESCRIPTION@@.                                                      //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      05-Jan-2018 NA        Reboot for S7-1500.             //
// 0.5 Khairul Basar    12-Oct-2009 CC-09/023 Toggle Mode coded.              //
// 0.4 Khairul Basar    30-Sep-2009 CC-09/023 EM Mode var changed to IN_OUT.  //
// 0.3 Khairul Basar    17-Sep-2009 CC-09/016 Duplicate Auto/man parameters   //
//                                            deleted auto/manual,Instaed     //
//                                            single command,Setpoint is used //
//                                            for both mode.                  //
// 0.2 Khairul Basar    28-Aug-2009 CC-09/023 Phases are updated.             //
// 0.1 Khairul Basar    14-Aug-2009 CC-09/023 Initial design.                 //
//----------------------------------------------------------------------------//
// Index   Instance    Description                                            //
@@TEMPLATE_BEGIN|createInstancesGlobal@@
// @@IDX@@       @@INSTANCE@@      @@DESCRIPTION@@
@@TEMPLATE_END@@
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "ifb@@CLASS@@"
TITLE = @@CLASS@@ : @@CLASSDESCRIPTION@@
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : REO
NAME : ifb@@CLASS@@
VERSION : 2.0

//----------------------------------------------------------------------------//
// Declare the instance objects of the class:                                 //
//----------------------------------------------------------------------------//
VAR
@@TEMPLATE_BEGIN|createClassNone@@
@@ATTR_BEGIN|numInstances@@
    p : Array[0..@@MAXITEM@@] of "udt@@CLASS@@";
    c : Array[0..@@MAXITEM@@] of "udt@@CLASS@@children";
@@ATTR_END|numInstances@@
    s : "fb@@CLASS@@";
@@TEMPLATE_END@@
END_VAR

VAR_TEMP
@@TEMPLATE_BEGIN|createClassNone@@
@@ATTR_BEGIN|pBLOCK_RECIPE@@
    t@@BLOCKPARAMETER@@ : @@PARAMETERDATATYPE@@;     // @@PARAMETERDESCRIPTION@@ //
@@ATTR_END|pBLOCK_RECIPE@@
@@TEMPLATE_END@@
END_VAR

BEGIN
@@TEMPLATE_BEGIN|createInstances@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@DESCRIPTION@@
    //------------------------------------------------------------------------//
    // INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INST //
    // INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INST //
    //                                                                        //
    // Get the critical interlock if there is one. If not set alwaysLow:      //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|CRIL_EXISTS@@
@@ATTR_DEFAULT_BEGIN@@
    A "alwaysLow";
@@ATTR_DEFAULT_END@@
@@ATTR_BEGIN|CRIL_TARGET@@
    A "idbCRIL".p[@@IDXIL@@].INTERLOCK;
@@ATTR_END|CRIL_TARGET@@
@@ATTR_END|CRIL_EXISTS@@
    = #p[@@IDX@@].origin.mc.CRIL;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@DESCRIPTION@@
    //------------------------------------------------------------------------//
    // Get the non-critical interlock if there is one. If not set alwaysLow:  //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|NCRIL_EXISTS@@
@@ATTR_DEFAULT_BEGIN@@
    A "alwaysLow";
@@ATTR_DEFAULT_END@@
@@ATTR_BEGIN|NCRIL_TARGET@@
    A "idbNCRIL".p[@@IDXIL@@].INTERLOCK;
@@ATTR_END|NCRIL_TARGET@@
@@ATTR_END|NCRIL_EXISTS@@
    = #p[@@IDX@@].origin.mc.NCRIL;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Unique ID
    //------------------------------------------------------------------------//
    // Set the instance unique ID:                                            //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.ID.@@INSTANCE@@;
    T #p[@@IDX@@].origin.mc.ME;

@@ATTR_BEGIN|ISOWNED@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Owner
    //------------------------------------------------------------------------//
    // Set the instance owner:                                                //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.ID.@@PARENT@@;
    T #p[@@IDX@@].owner.mc.OWNER;
@@ATTR_END|ISOWNED@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Block Origin
    //------------------------------------------------------------------------//
    // This block can only reside within this CPU:                            //
    //------------------------------------------------------------------------//
    A "alwaysHigh";
    = #p[@@IDX@@].origin.mc.isOriginBlock;

@@ATTR_BEGIN|ISOWNED@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Owner Origin
    //------------------------------------------------------------------------//
    // This block can only be owned by a parent block in this CPU:            //
    //------------------------------------------------------------------------//
    A "alwaysHigh";
    = #p[@@IDX@@].owner.mc.isOriginOwner;
@@ATTR_END|ISOWNED@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Safe Command on startup
    //------------------------------------------------------------------------//
    // Set the safe command if restarting the PLC:                            //
    //------------------------------------------------------------------------//
    A "flagFirstScanRestart";
    JCN _notRestart_@@COUNTERTEMPLATE|1@@;
    L "dbCONST".BLK.@@CLASS@@.SAFE.CMD;
    T #p[@@IDX@@].origin.mc.CMD_SAFE;
_notRestart_@@COUNTERTEMPLATE@@:   NOP 0;

@@ATTR_BEGIN|pBLOCK_RECIPE_EXISTS@@
@@ATTR_BEGIN|RECIPE_CLASS@@
NETWORK
TITLE = Item @@IDX@@ Recipe parameters if owned by @@RECIPENAME@@
    //------------------------------------------------------------------------//
    // Get the recipe parameters:                                             //
    //------------------------------------------------------------------------//
    A(;
    L "dbCONST".BLK.ID.@@RECIPENAME@@;
    L #p[@@IDX@@].owner.mc.RECIPE;
    ==I;
    );
    JCN _notRecipe_@@INSTANCE@@_@@RECIPENAME@@;
@@ATTR_BEGIN|pBLOCK_RECIPE@@
    L "dbRECIPE".@@RECIPENAME@@.@@BLOCKPARAMETER@@;
    T #t@@BLOCKPARAMETER@@;
@@ATTR_END|pBLOCK_RECIPE@@
_notRecipe_@@INSTANCE@@_@@RECIPENAME@@:   NOP 0;

@@ATTR_END|RECIPE_CLASS@@
@@ATTR_END|pBLOCK_RECIPE_EXISTS@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Recipe parameters
    //------------------------------------------------------------------------//
    // Set the recipe parameter values:                                       //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|pBLOCK_RECIPE@@
    L #t@@BLOCKPARAMETER@@;
    T #p[@@IDX@@].owner.@@BLOCKPARAMETER@@;
@@ATTR_END|pBLOCK_RECIPE@@

@@ATTR_BEGIN|LINK_BLK@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Linked block parameters
    //------------------------------------------------------------------------//
    // Set the linked block parameter values:                                 //
    //------------------------------------------------------------------------//
    L "idb@@LINKCLASS@@".p[@@LINKIDX@@].origin.@@ACTUALATTRIBUTE@@;
    T #p[@@IDX@@].origin.@@BLOCKPARAMETER@@;

@@ATTR_END|LINK_BLK@@

@@ATTR_BEGIN|CHILD_INSTANCE@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Child instance @@CHILDDESCRIPTION@@
    //------------------------------------------------------------------------//
    // Set the child instance mode and command structures:                    //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := "idb@@CHILDCLASS@@".p[@@CHILDIDX@@] ,
        OUT                  := #c[@@IDX@@].@@CHILDPARAMETERALIAS@@
    );

@@ATTR_END|CHILD_INSTANCE@@

@@ATTR_BEGIN|pEventPromptExists@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : SFC events for operator prompts
    //------------------------------------------------------------------------//
    // Copy the SFC operator prompt event structure:                          //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'udtEventPrompt'}
    (   IN                   := "dbEVENTPrompt".eventPrompt ,
        OUT                  := #p[@@IDX@@].origin.eventPrompt
    );

@@ATTR_END|pEventPromptExists@@

@@ATTR_BEGIN|pEventLogMsgExists@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : SFC events for logging messages
    //------------------------------------------------------------------------//
    // Copy the SFC message log event structure:                              //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'udtEventLogMsg'}
    (   IN                   := "dbEVENTLogMsg".eventLogMsg ,
        OUT                  := #p[@@IDX@@].origin.eventLogMsg
    );

@@ATTR_END|pEventLogMsgExists@@

@@ATTR_BEGIN|pEventLogRealExists@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : SFC events for logging real data
    //------------------------------------------------------------------------//
    // Copy the SFC real data log event structure:                            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'udtEventLogReal'}
    (   IN                   := "dbEVENTLogReal".eventLogReal ,
        OUT                  := #p[@@IDX@@].origin.eventLogReal
    );

@@ATTR_END|pEventLogRealExists@@

@@ATTR_BEGIN|pEventLogTimeExists@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : SFC events for logging time data
    //------------------------------------------------------------------------//
    // Copy the SFC time data log event structure:                            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'udtEventLogTime'}
    (   IN                   := "dbEVENTLogTime".eventLogTime ,
        OUT                  := #p[@@IDX@@].origin.eventLogTime
    );

@@ATTR_END|pEventLogTimeExists@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@DESCRIPTION@@
    //------------------------------------------------------------------------//
    // Call the class function to process each instance:                      //
    //------------------------------------------------------------------------//
    CALL #s
    (   p                    := #p[@@IDX@@] ,
        c                    := #c[@@IDX@@]
    );

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Ouput pump start/stop commands
    //------------------------------------------------------------------------//
    // Set the instance output commands for the vacuume pumps to the field:   //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|CHILD_INSTANCE@@
    L #c[@@IDX@@].@@CHILDPARAMETERALIAS@@.owner.mc.CMD;
    T "idb@@CHILDCLASS@@".p[@@CHILDIDX@@].owner.mc.CMD;
@@ATTR_END|CHILD_INSTANCE@@

@@TEMPLATE_END@@
END_FUNCTION_BLOCK
