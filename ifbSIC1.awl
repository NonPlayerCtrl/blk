//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//                Automatically Generated File - Do Not Edit                  //
//----------------------------------------------------------------------------//
// Class:       ifbDI1                                                        //
// Description: Instances of DI1                                              //
//                                                                            //
// Agitator speed control.                                                    //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      05-Jan-2018 NA        Reboot for S7-1500.             //
// 0.8 Khairul Basar    12-Oct-2009 CC-09/016 IN_REQ_MODE is assigned to      //
//                                            Toggle.                         //
// 0.7 Gus Abdallah     01-Oct-2009 CC-09/016 Interlocks are CM processed.    //
// 0.6 Khairul Basar    18-Sep-2009 CC-09/016 ifcSIC1 is created & interfaced.//
// 0.5 Khairul Basar    16-Sep-2009 CC-09/016 Duplicate Auto/man parameters   //
//                                            deleted auto/manual both now    //
//                                            using same parameters.          //
// 0.4 Khairul Basar    14-Sep-2009 CC-09/016 O/P var DataQuality added.      //
// 0.3 Khairul Basar    11-Sep-2009 CC-09/016 Ref2.                           //
// 0.2 Khairul Basar    03-Sep-2009 CC-09/016 Ref1.                           //
// 0.1 Khairul Basar    03-Aug-2009           Initial design.                 //
//                                                                            //
// Ref2:                                                                      //
// TAH,THR & FLT are changed from NO to NC contact in the instance logic.     //
// SIC1 changed: Now Setpoint is moved to PID as per selected mode.           //
// TAH,THR & FLT will result device state 'FAULT=5'.                          //
// In DB1, Device state changed to 3=Stop, 4=Running instead of 4=stop,       //
// 3=Running.                                                                 //
//                                                                            //
// Ref1:                                                                      //
// MI1 Measure value assigned to MASS_MI1 parameter, The only DI ES_1000      //
// Emergency switch is connected to CRIL, whereas others MOT_OL, MOT_OH &    //
// INVF is connected to corresponding input parameters, these are removed     //
// from AND logic from CRIL. MV_RPM analog value range is hardcoded, but     //
// Speed set point range not hard coded, it will be done in HMI.              //
// Now the Minimum mass condition is always overridden in manual mode         //
// Now Device states are configured for ENABLED, when enabled two sub state   //
// STOPPED & RUNNING and DISABLED                                             //
// Now Parameters MEASURE_RPM for agitator RPM , MASS_MI1 is for mass of the  //
// vessel(this parameter is not in the FS), parameter for set point of manual //
// is SETPOINT_MAN, & in auto is SETPOINT_AUTO configured.                    //
// Set point SETPOINT_MAN and SETPOINT_AUTO initialized to 0.0 and GAIN to 1.0//
// Emergency stop signal added to CRIL.                                      //
// Now logic state for Interlock is corrected, see 2.                         //
// ALARM_HH, ALARM_H, ALARM_L, ALARM_LL are added in SIC1 and programmed.     //
//----------------------------------------------------------------------------//
// Index   Instance    Description                                            //
@@TEMPLATE_BEGIN|createInstancesGlobal@@
// @@IDX@@       @@INSTANCE@@      @@DESCRIPTION@@
@@TEMPLATE_END@@
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "ifbSIC1"
TITLE = Instances of agitator speed control
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : REO
NAME : ifbSIC1
VERSION : 2.0

//----------------------------------------------------------------------------//
// Declare the instance objects of the class:                                 //
//----------------------------------------------------------------------------//
VAR
@@TEMPLATE_BEGIN|createClassNone@@
@@ATTR_BEGIN|numInstances@@
    f : Array[0..@@MAXITEM@@] of "fb@@CLASS@@";
    EmergencyStop : Bool;
@@ATTR_END|numInstances@@
@@TEMPLATE_END@@
END_VAR

BEGIN
@@TEMPLATE_BEGIN|createInstances@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@DESCRIPTION@@ Critical Interlocks
    //------------------------------------------------------------------------//
    // INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INST //
    // INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INST //
    //                                                                        //
    // Get the critical interlock if there is one. If not set alwaysLow:      //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|CRIL_EXISTS@@
@@ATTR_DEFAULT_BEGIN@@
    A "alwaysLow";
@@ATTR_DEFAULT_END@@
@@ATTR_BEGIN|CRIL_TARGET@@
    A "idbCRIL".p[@@IDXIL@@].INTERLOCK;
@@ATTR_END|CRIL_TARGET@@
@@ATTR_END|CRIL_EXISTS@@
    = #f[@@IDX@@].p.read.mc.CRIL;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@DESCRIPTION@@ Non-Critical Interlocks
    //------------------------------------------------------------------------//
    // Get the non-critical interlock if there is one. If not set alwaysLow:  //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|NCRIL_EXISTS@@
@@ATTR_DEFAULT_BEGIN@@
    A "alwaysLow";
@@ATTR_DEFAULT_END@@
@@ATTR_BEGIN|NCRIL_TARGET@@
    A "idbNCRIL".p[@@IDXIL@@].INTERLOCK;
@@ATTR_END|NCRIL_TARGET@@
@@ATTR_END|NCRIL_EXISTS@@
    = #f[@@IDX@@].p.read.mc.NCRIL;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Unique ID
    //------------------------------------------------------------------------//
    // Set the instance unique ID:                                            //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.ID.@@INSTANCE@@;
    T #f[@@IDX@@].p.read.mc.ME;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Owner ID
    //------------------------------------------------------------------------//
    // Set the instance Owner ID:                                             //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.ID.@@PARENT@@;
    T #f[@@IDX@@].p.write.mc.OWNER;

@@ATTR_BEGIN|FLOWPATH@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@CLASS@@ is a Flowpath device
    //------------------------------------------------------------------------//
    // This class of device is a not a FLOWPATH device where the state must   //
    // equal the command once set by the parent:                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #f[@@IDX@@].p.read.mc.FLOWPATH;
@@ATTR_END|FLOWPATH@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Block Read
    //------------------------------------------------------------------------//
    // This block can only reside within this CPU:                            //
    //------------------------------------------------------------------------//
    A "alwaysHigh";
    = #f[@@IDX@@].p.read.mc.isMaster;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Block Write
    //------------------------------------------------------------------------//
    // This block can only be owned by a parent block in this CPU:            //
    //------------------------------------------------------------------------//
    A "alwaysHigh";
    = #f[@@IDX@@].p.write.mc.isMaster;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Safe Command on restart
    //------------------------------------------------------------------------//
    // Set the safe command if restarting the PLC:                            //
    //------------------------------------------------------------------------//
    A "flagFirstScanRestart";
    JCN _notRestart_@@COUNTERTEMPLATE|1@@;
    L "dbCONST".BLK.SIC1.SAFE.CMD;
    T #f[@@IDX@@].p.read.mc.CMD_SAFE;
_notRestart_@@COUNTERTEMPLATE@@:   NOP 0;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Speed measured value
    //------------------------------------------------------------------------//
    // Set the instance speed measured value from the field:                  //
    //------------------------------------------------------------------------//
    L "@@INSTANCE@@-RAW";
    T #f[@@IDX@@].p.read.RAW_INPUT;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Field Fault Inputs
    //------------------------------------------------------------------------//
    // Set the instance fault input values from the field:                    //
    //------------------------------------------------------------------------//
    A "@@INSTANCE@@-BRK";
    = #f[@@IDX@@].p.read.BRK;
    A "@@INSTANCE@@-FLP";
    = #f[@@IDX@@].p.read.FLP;
    A "@@INSTANCE@@-FLT";
    = #f[@@IDX@@].p.read.FLT;
    A "@@INSTANCE@@-THM";
    = #f[@@IDX@@].p.read.THM;
@@ATTR_BEGIN|LINK@@
    A "@@PHRLINKINSTANCE@@-DI";
    = #f[@@IDX@@].p.read.PHR;
@@ATTR_END|LINK@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Mass measured value
    //------------------------------------------------------------------------//
    // Set the instance mass measured value and data quality from the field:  //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|LINK@@
    L "idb@@MASSLINKCLASS@@".f[@@MASSLINKIDX@@].p.read.ai.PV;
    T #f[@@IDX@@].p.read.MI1_MASS;
    A "idb@@MASSLINKCLASS@@".f[@@MASSLINKIDX@@].p.read.ai.DQ;
    = #f[@@IDX@@].p.read.MI1_DQ;
@@ATTR_END|LINK@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Mass values to run and stop agitator
    //------------------------------------------------------------------------//
    // Set the instance mass measured value and data quality from the field:  //
    //------------------------------------------------------------------------//
    L @@MXMASSAGITRUN@@;
    T #f[@@IDX@@].p.read.MASS_RUN;
    L @@MXMASSAGITSTOP@@;
    T #f[@@IDX@@].p.read.MASS_STOP;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Speed measurement attributes
    //------------------------------------------------------------------------//
    // Set the speed measurement attribute values:                            //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|ANALOG_EMBED@@
    L @@RANGEHIGH@@;
    T #f[@@IDX@@].p.read.RANGE_UPPER;
    L @@RANGELOW@@;
    T #f[@@IDX@@].p.read.RANGE_LOWER;
    A "alwaysLow";
    = #f[@@IDX@@].p.read.POLARITY;
    L @@LIMITHH@@;
    T #f[@@IDX@@].p.read.LIMIT_HH;
    L @@LIMITH@@;
    T #f[@@IDX@@].p.read.LIMIT_H;
@@ATTR_END|ANALOG_EMBED@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@DESCRIPTION@@
    //------------------------------------------------------------------------//
    // Call the class function to process each instance:                      //
    //------------------------------------------------------------------------//
    CALL #f[@@IDX@@];

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Output Speed Setpoint
    //------------------------------------------------------------------------//
    // Set the instance output speed setpoint to the field:                   //
    //------------------------------------------------------------------------//
    L #f[@@IDX@@].p.read.MV_OUTPUT;
    T "@@INSTANCE@@-OUT";

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Output Command
    //------------------------------------------------------------------------//
    // Set the instance output command to the field:                          //
    //------------------------------------------------------------------------//
    A #f[@@IDX@@].p.read.OUT_CMD;
    = "@@INSTANCE@@-CMD";

NETWORK
TITLE = Emergency stop active
    //------------------------------------------------------------------------//
    // Check if any emergency stop is actiev:                                 //
    //------------------------------------------------------------------------//
    A "ES1100-DI";
    A "ES1101-DI";
    = #EmergencyStop;

NETWORK
TITLE = Drive interface
    //------------------------------------------------------------------------//
    // Call the Siemens VFD drive interface module:                           //
    //------------------------------------------------------------------------//
    CALL "PZD_G120_Tel_352", "PZD_G120_Tel_352_DB_@@MXVFDNAME@@"
      (  address                     := @@MXVFDADDRESS@@ ,
         ON_OFF1                     := "@@INSTANCE@@-CMD" ,
         enable_operation            := #EmergencyStop ,
         acknowledge                 := #f[@@IDX@@].p.read.ERROR_RESET ,
         CTW_bit_08                  := 1 ,
         CTW_bit_09                  := 1 ,
         CTW_bit_12                  := 1 ,
         CTW_bit_15                  := 1 ,
         speed_setpoint              := "@@INSTANCE@@-OUT" ,
         reference_speed_P2000       := 1500.0 ,
         reference_current_P2002     := 0.0 ,
         reference_torque_P2003      := 0.0 ,
         ready_for_switching_on      := #f[@@IDX@@].p.read.RDY_TO_ON ,
         ready_for_operation         := #f[@@IDX@@].p.read.RDY_TO_RUN ,
         operation_enabled           := #f[@@IDX@@].p.read.RUNNING
      );

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Send the alarm bits to the global DB
    //------------------------------------------------------------------------//
    // Transfer the class event log message bits to the global DB:            //
    //------------------------------------------------------------------------//
    L #f[@@IDX@@].p.read.mc.ALARM;
    T "dbEVENT".alarmBlock.alarm_@@INSTANCE@@;

@@TEMPLATE_END@@

@@TEMPLATE_BEGIN|createInstancesForeign@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Block Read
    //------------------------------------------------------------------------//
    // This block can only reside in another CPU:                             //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #f[@@IDX@@].p.read.mc.isMaster;

@@ATTR_BEGIN|ISOWNED@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Block Write
    //------------------------------------------------------------------------//
    // This block can only be owned by a parent block in another CPU:         //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #f[@@IDX@@].p.write.mc.isMaster;
@@ATTR_END|ISOWNED@@

@@TEMPLATE_END@@

END_FUNCTION_BLOCK
