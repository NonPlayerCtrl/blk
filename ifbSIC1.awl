//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//                Automatically Generated File - Do Not Edit                  //
//----------------------------------------------------------------------------//
// Class:       ifbDI1                                                        //
// Description: Instances of DI1                                              //
//                                                                            //
// Agitator speed control.                                                    //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      05-Jan-2018 NA        Reboot for S7-1500.             //
// 0.8 Khairul Basar    12-Oct-2009 CC-09/016 IN_REQ_MODE is assigned to      //
//                                            Toggle.                         //
// 0.7 Gus Abdallah     01-Oct-2009 CC-09/016 Interlocks are CM processed.    //
// 0.6 Khairul Basar    18-Sep-2009 CC-09/016 ifcSIC1 is created & interfaced.//
// 0.5 Khairul Basar    16-Sep-2009 CC-09/016 Duplicate Auto/man parameters   //
//                                            deleted auto/manual both now    //
//                                            using same parameters.          //
// 0.4 Khairul Basar    14-Sep-2009 CC-09/016 O/P var DataQuality added.      //
// 0.3 Khairul Basar    11-Sep-2009 CC-09/016 Ref2.                           //
// 0.2 Khairul Basar    03-Sep-2009 CC-09/016 Ref1.                           //
// 0.1 Khairul Basar    03-Aug-2009           Initial design.                 //
//                                                                            //
// Ref2:                                                                      //
// TAH,THR & FLT are changed from NO to NC contact in the instance logic.     //
// SIC1 changed: Now Setpoint is moved to PID as per selected mode.           //
// TAH,THR & FLT will result device state 'FAULT=5'.                          //
// In DB1, Device state changed to 3=Stop, 4=Running instead of 4=stop,       //
// 3=Running.                                                                 //
//                                                                            //
// Ref1:                                                                      //
// MI1 Measure value assigned to MASS_MI1 parameter, The only DI ES_1000      //
// Emergency switch is connected to CRIL, whereas others MOT_OL, MOT_OH &    //
// INVF is connected to corresponding input parameters, these are removed     //
// from AND logic from CRIL. MV_RPM analog value range is hardcoded, but     //
// Speed set point range not hard coded, it will be done in HMI.              //
// Now the Minimum mass condition is always overridden in manual mode         //
// Now Device states are configured for ENABLED, when enabled two sub state   //
// STOPPED & RUNNING and DISABLED                                             //
// Now Parameters MEASURE_RPM for agitator RPM , MASS_MI1 is for mass of the  //
// vessel(this parameter is not in the FS), parameter for set point of manual //
// is SETPOINT_MAN, & in auto is SETPOINT_AUTO configured.                    //
// Set point SETPOINT_MAN and SETPOINT_AUTO initialized to 0.0 and GAIN to 1.0//
// Emergency stop signal added to CRIL.                                      //
// Now logic state for Interlock is corrected, see 2.                         //
// ALARM_HH, ALARM_H, ALARM_L, ALARM_LL are added in SIC1 and programmed.     //
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "ifbSIC1"
TITLE = Instances of agitator speed control
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : REO
NAME : ifbSIC1
VERSION : 2.0

//----------------------------------------------------------------------------//
// Declare the instance objects of the class:                                 //
//----------------------------------------------------------------------------//
VAR
@@TEMPLATE_BEGIN@@
    @@INSTANCE@@ : "fbSIC1";   // @@DESCRIPTION@@
@@TEMPLATE_END@@
END_VAR

BEGIN
@@TEMPLATE_BEGIN@@
NETWORK
TITLE = @@INSTANCE@@ : @@DESCRIPTION@@
    //------------------------------------------------------------------------//
    // Get the critical interlock if there is one. If not set alwaysLow:      //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|CRIL_EXISTS@@
@@ATTR_DEFAULT_BEGIN@@
    A "alwaysLow";
@@ATTR_DEFAULT_END@@
    A "idbCRIL".@@INSTANCE@@cril.INTERLOCK;
@@ATTR_END|CRIL_EXISTS@@
    = #@@INSTANCE@@.mc.CRIL;

NETWORK
TITLE = @@INSTANCE@@ : @@DESCRIPTION@@
    //------------------------------------------------------------------------//
    // Get the non-critical interlock if there is one. If not set alwaysLow:  //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|NCRIL_EXISTS@@
@@ATTR_DEFAULT_BEGIN@@
    A "alwaysLow";
@@ATTR_DEFAULT_END@@
    A "idbNCRIL".@@INSTANCE@@ncril.INTERLOCK;
@@ATTR_END|NCRIL_EXISTS@@
    = #@@INSTANCE@@.mc.NCRIL;

NETWORK
TITLE = @@INSTANCE@@ : Owner
    //------------------------------------------------------------------------//
    // Set the instance owner:                                                //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.OWNER.@@PARENT@@;
    T #@@INSTANCE@@.mc.OWNER;

NETWORK
TITLE = @@INSTANCE@@ : Safe Command
    //------------------------------------------------------------------------//
    // Set the safe command:                                                  //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.SIC1.SAFE.CMD;
    T #@@INSTANCE@@.mc.CMD_SAFE;

NETWORK
TITLE = @@INSTANCE@@ : Signal polarity
    //------------------------------------------------------------------------//
    // Input signal is BIPOLAR (1) or UNIPOLAR (0). Assume 0:                 //
    //------------------------------------------------------------------------//
    R #@@INSTANCE@@.ai.POLARITY;

NETWORK
TITLE = @@INSTANCE@@ : @@DESCRIPTION@@
    //------------------------------------------------------------------------//
    // Call the class function to process each instance:                      //
    //------------------------------------------------------------------------//
    CALL #@@INSTANCE@@
    (   _SETPOINT            := #@@INSTANCE@@._SETPOINT ,
        RAW_INPUT            := "@@INSTANCE@@-RAW" ,
        BRK                  := "@@INSTANCE@@-BRK" ,
@@ATTR_BEGIN|LINK@@
        PHR                  := "@@PHRLINKINSTANCE@@-DI" ,
@@ATTR_END|LINK@@
        FLP                  := "@@INSTANCE@@-FLP" ,
        FLT                  := "@@INSTANCE@@-FLT" ,
        THM                  := "@@INSTANCE@@-THM" ,
        MASS_RUN             := @@MXMASSAGITRUN@@ ,
        MASS_STOP            := @@MXMASSAGITSTOP@@ ,
@@ATTR_BEGIN|LINK@@
        MI1_MASS             := "idb@@MASSLINKCLASS@@".@@MASSLINKINSTANCE@@.ai.PV ,
        MI1_DQ               := "idb@@MASSLINKCLASS@@".@@MASSLINKINSTANCE@@.ai.DQ ,
@@ATTR_END|LINK@@
@@ATTR_BEGIN|ANALOG_EMBED@@
        RANGE_UPPER          := @@RANGELOW@@ ,
        RANGE_LOWER          := @@RANGEHIGH@@ ,
        POLARITY             := #@@INSTANCE@@.POLARITY ,
        LIMIT_HH             := @@LIMITHH@@ ,
        LIMIT_H              := @@LIMITH@@ ,
@@ATTR_END|ANALOG_EMBED@@
        FB_TDELAY            := #@@INSTANCE@@.FB_TDELAY ,
        P_SEL                := #@@INSTANCE@@.P_SEL ,
        I_SEL                := #@@INSTANCE@@.I_SEL ,
        D_SEL                := #@@INSTANCE@@.D_SEL ,
        GAIN                 := #@@INSTANCE@@.GAIN ,
        TI                   := #@@INSTANCE@@.TI ,
        TD                   := #@@INSTANCE@@.TD ,
        CYCLE                := #@@INSTANCE@@.CYCLE ,
        OUT_Q                := "@@INSTANCE@@-CMD" ,
        OUT_Q_F              := "@@INSTANCE@@-OUT_F" ,
        OUT_Q_R              := "@@INSTANCE@@-OUT_R" ,
        LMN                  := "@@INSTANCE@@-OUT" ,
      );
      NOP 0;

@@TEMPLATE_END@@
END_FUNCTION_BLOCK
