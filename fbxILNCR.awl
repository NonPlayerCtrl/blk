//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//                Automatically Generated File - Do Not Edit                  //
//----------------------------------------------------------------------------//
// Class:       fbxILNCR                                                      //
// Description: Instances of Non-Critical Interlock Communications            //
//                                                                            //
// Transfer of instance DB data between multiple CPUs.                        //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 1.0 David Paspa      29-Jun-2018 NA        Reboot for S7-1500.             //
//----------------------------------------------------------------------------//
// Index  Target    Class  Description                                        //
@@TEMPLATE_BEGIN|createClassNone@@
@@ATTR_BEGIN|NCRIL@@
// @@IDX@@      @@INSTANCE@@    @@CLASS@@  @@DESCRIPTION@@
@@ATTR_END|NCRIL@@
@@TEMPLATE_END@@
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "fbxNCRIL"
TITLE = Transfer idb data for instances of Non-Critical Interlocks
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : REO
NAME : fbxNCRIL
VERSION : 1.0

//----------------------------------------------------------------------------//
// Declare the instance objects of the class:                                 //
//----------------------------------------------------------------------------//
VAR
@@TEMPLATE_BEGIN|NCRIL@@
    BSENDOrigin_@@IDX@@ {OriginalPartName := 'BSEND_SFB_PART'; LibVersion := '1.2'} : BSEND;
    BRCVOrigin_@@IDX@@ {OriginalPartName := 'BRCV_SFB_PART'; LibVersion := '1.2'} : BRCV;
    SendErrorOrigin_@@IDX@@ : Word;
    RcvErrorOrigin_@@IDX@@ : Word;
@@TEMPLATE_END@@
    CTR { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Counter
END_VAR

VAR_TEMP
    xIDReceive : CONN_R_ID;
    xIDSend : CONN_R_ID;
END_VAR

BEGIN
NETWORK
TITLE = COMMS Counter
    //------------------------------------------------------------------------//
    // COMMS   COMMS   COMMS   COMMS   COMMS   COMMS   COMMS   COMMS   COMMS  //
    // COMMS   COMMS   COMMS   COMMS   COMMS   COMMS   COMMS   COMMS   COMMS  //
    //                                                                        //
    // Increment the counter if pulse timer is high:                          //
    //------------------------------------------------------------------------//
    A "commsPulse";
    JCN _commsTimerNotExpired;
    L #CTR;
    INC 1;
    T #CTR;
_commsTimerNotExpired:   NOP 0;

@@TEMPLATE_BEGIN|NCRIL@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ if send Origin to partner CPU
    //------------------------------------------------------------------------//
    // If this is the Block origin then set the transaction send and receive  //
    // IDs and transfer the calculated parameters:                            //
    //------------------------------------------------------------------------//
    A "idbNCRIL".f[@@IDX@@].p.isOrigin;
    A(;
    L #CTR;
    L @@COUNTERTEMPLATE|1@@;
    ==I;
    );
    JCN _notOriginBlock@@INSTANCE@@;
    S #BSENDOrigin_@@IDX@@.REQ;
    L 701@@IDX@@1;
    T #xIDReceive;
    L 701@@IDX@@2;
    T #xIDSend;
_notOriginBlock@@INSTANCE@@:   NOP 0;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ if receive Origin from partner CPU
    //------------------------------------------------------------------------//
    // If this is not the Block origin then set the transaction send and      //
    // receive  IDs to receive the calculated parameters:                     //
    //------------------------------------------------------------------------//
    AN "idbNCRIL".f[@@IDX@@].p.isOrigin;
    O(;
    L #CTR;
    L @@COUNTERTEMPLATE@@;
    <>I;
    );
    JCN _originBlock@@INSTANCE@@;
    R #BSENDOrigin_@@IDX@@.REQ;
    L 701@@IDX@@2;
    T #xIDReceive;
    L 701@@IDX@@1;
    T #xIDSend;
_originBlock@@INSTANCE@@:   NOP 0;

NETWORK
TITLE = Transfer item @@IDX@@ @@INSTANCE@@ Origin Block data to partner CPU
    //------------------------------------------------------------------------//
    // If this is the Block origin then transfer the calculated parameters:   //
    //------------------------------------------------------------------------//
    CALL #BSENDOrigin_@@IDX@@
    {ptr_type := 'Variant', id_type := 'CONN_PRG', r_id_type := 'CONN_R_ID'}
    (   REQ                  := #BSENDOrigin_@@IDX@@.REQ ,
        R                    := #BSENDOrigin_@@IDX@@.R ,
        ID                   := @@S7CONNECTION@@ ,
        R_ID                 := #xIDSend ,
        DONE                 := #BSENDOrigin_@@IDX@@.DONE ,
        ERROR                := #BSENDOrigin_@@IDX@@.ERROR ,
        STATUS               := #BSENDOrigin_@@IDX@@.STATUS ,
        SD_1                 := "idbNCRIL".f[@@IDX@@].p ,
        LEN                  := #BSENDOrigin_@@IDX@@.LEN
    );

    //------------------------------------------------------------------------//
    // Store previous error status:                                           //
    //------------------------------------------------------------------------//
    A #BSENDOrigin_@@IDX@@.ERROR;
    AN #BSENDOrigin_@@IDX@@.DONE;
    JCN _errorSendOrigin_@@IDX@@;
    L #BSENDOrigin_@@IDX@@.STATUS;
    T #SendErrorOrigin_@@IDX@@;
_errorSendOrigin_@@IDX@@:   NOP 0;

NETWORK
TITLE = Check item @@IDX@@ @@INSTANCE@@ if receive Origin from partner CPU
    //------------------------------------------------------------------------//
    // If not origin then receive the calculated parameters:                  //
    //------------------------------------------------------------------------//
    AN "idbNCRIL".f[@@IDX@@].p.isOrigin;
    = #BRCVOrigin_@@IDX@@.EN_R;

NETWORK
TITLE = Receive item @@IDX@@ @@INSTANCE@@ Origin Block data from partner CPU
    //------------------------------------------------------------------------//
    // If not origin then receive the calculated parameters:                  //
    //------------------------------------------------------------------------//
    CALL #BRCVOrigin_@@IDX@@
    {ptr_type := 'Variant', id_type := 'CONN_PRG', r_id_type := 'CONN_R_ID'}
    (   EN_R                 := #BRCVOrigin_@@IDX@@.EN_R ,
        ID                   := @@S7CONNECTION@@ ,
        R_ID                 := #xIDReceive ,
        NDR                  := #BRCVOrigin_@@IDX@@.NDR ,
        ERROR                := #BRCVOrigin_@@IDX@@.ERROR ,
        STATUS               := #BRCVOrigin_@@IDX@@.STATUS ,
        RD_1                 := "idbNCRIL".f[@@IDX@@].p ,
        LEN                  := #BRCVOrigin_@@IDX@@.LEN
    );

    //------------------------------------------------------------------------//
    // Store previous error status:                                           //
    //------------------------------------------------------------------------//
    A #BRCVOrigin_@@IDX@@.ERROR;
    JCN _errorReceiveOrigin_@@IDX@@;
    L #BRCVOrigin_@@IDX@@.STATUS;
    T #RcvErrorOrigin_@@IDX@@;
_errorReceiveOrigin_@@IDX@@:   NOP 0;

@@TEMPLATE_END@@

NETWORK
TITLE = Reset COMMS counter
    //------------------------------------------------------------------------//
    // Store previous error status:                                           //
    //------------------------------------------------------------------------//
    A(;
    L #CTR;
    L @@COUNTERTEMPLATEMAX@@;
    >I;
    );
    JCN _commsCountComplete;
    L 1;
    T #CTR;
_commsCountComplete:   NOP 0;

END_FUNCTION_BLOCK
