//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Class:       ifb@@CLASS@@                                                  //
// Description: Interface function for Equipment Module @@CLASS@@.            //
//                                                                            //
// @@CLASSDESCRIPTION@@.                                                      //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      24-Jan-2018 NA        Reboot for S7-1500.             //
//----------------------------------------------------------------------------//
FUNCTION "ifc@@CLASS@@" : Void
TITLE = ifc@@CLASS@@ : Interface
{ S7_Optimized_Access := 'FALSE' }
NAME : ifc@@CLASS@@
AUTHOR : Rieckermann Engineering Operations
VERSION : 2.0

//----------------------------------------------------------------------------//
// Declare the interface input and output parameters:                         //
//----------------------------------------------------------------------------//
@@TEMPLATE_BEGIN@@
   VAR_INPUT
      IN_REQ_MODE : Bool;
      INTERLOCK : Bool;
      IN_MODE : Int;
      IN_CMND : Int;
      IN_SUB : Int;
@@ATTR_BEGIN|PARAMETER_VAR_INPUT@@
      IN_@@PARAMETER@@ : @@PARAMETERTYPE@@;
@@ATTR_END|PARAMETER_VAR_INPUT@@
@@ATTR_BEGIN|TIMER@@
      IN_TIME_H : Int;
      IN_TIME_M : Int;
      IN_TIME_S : Int;
@@ATTR_END|TIMER@@
   END_VAR

   VAR_OUTPUT
      OUT_MODE : Int;
@@ATTR_BEGIN|PARAMETER_VAR_OUTPUT@@
      IN_@@PARAMETER@@ : @@PARAMETERTYPE@@;
@@ATTR_END|PARAMETER_VAR_OUTPUT@@
   END_VAR

   VAR_IN_OUT
      IO_MODE : Int;
      IO_CMND : Int;
      IO_SUB : Int;
      IO_TOGGLEMODE : Bool;
      POS_EDGE1 : Bool;
      POS_EDGE2 : Bool;
@@ATTR_BEGIN|PARAMETER_VAR_IN_OUT@@
      IO_@@PARAMETER@@ : @@PARAMETERTYPE@@;
@@ATTR_END|PARAMETER_VAR_IN_OUT@@
@@ATTR_BEGIN|TIMER@@
      IO_TIME_H : Int;
      IO_TIME_M : Int;
      IO_TIME_S : Int;
@@ATTR_END|TIMER@@
   END_VAR

   VAR_TEMP
      RetVal : Bool;
@@ATTR_BEGIN|TIMER@@
      CVRS5time : DInt;
      CVRS5timeS : DInt;
      CVRS5timeM : DInt;
      CVRS5timeH : DInt;
@@ATTR_END|TIMER@@
   END_VAR

BEGIN
NETWORK
TITLE = Mode change to AUTO
      CALL "EM MODE REQ"
      (  IN_REQ_MODE                 := #IN_REQ_MODE ,
         IN_MODE                     := #IN_MODE ,
         MODULE                      := 'E' ,
         Ret_Val                     := #RetVal ,
         OUT_MODE                    := #OUT_MODE ,
         IO_MODE                     := #IO_MODE ,
         POS_EDGE1                   := #POS_EDGE1 ,
         POS_EDGE2                   := #POS_EDGE2
      );
      NOP 0;
NETWORK
TITLE = Assign Input Parameters to Output
     L     #IO_MODE
     L     "dbCONST_VAL".CM.MODE.AUTO
     ==I
     =     L      1.0
     A     L      1.0
     JNB   _1
     L     #IN_CMND
     T     #IO_CMND
_1: NOP   0
     A     L      1.0
     JNB   _2
     L     #IN_SUB
     T     #IO_SUB
@@ATTR_BEGIN|PARAMETER_VAR_INPUT@@
_@@COUNTER|2@@: NOP   0
     A     L      1.0
     JNB   _@@COUNTERNEXT@@
     L     #IN_@@PARAMETER@@
     T     #IO_@@PARAMETER@@
@@ATTR_END|PARAMETER_VAR_INPUT@@
_@@COUNTERMAX@@:      NOP 0;

//----------------------------------------------------------------------------//
// Optional TIMER functionality:                                              //
//----------------------------------------------------------------------------//
@@ATTR_BEGIN|TIMER@@
NETWORK
TITLE = Assign Input Parameters to Output
      A(;
      A(;
      L #IN_TIMEOUT;
      T #CVRS5time;
      SET;
      SAVE;
      CLR;
      A BR;
      );
      JNB _100;
      L #CVRS5time;
      L 1000;
      /D;
      T #CVRS5time;
      AN OV;
      SAVE;
      CLR;
_100:      A BR;
      );
      JNB _101;
      L #CVRS5time;
      L 60;
      /D;
      T #CVRS5timeH;
_101:      NOP 0;
NETWORK
TITLE = Assign Input Parameters to Output
      A(;
      A(;
      L #CVRS5time;
      L 60;
      MOD;
      T #CVRS5timeS;
      AN OV;
      SAVE;
      CLR;
      A BR;
      );
      JNB _102;
      L #CVRS5timeH;
      L 60;
      MOD;
      T #CVRS5timeM;
      AN OV;
      SAVE;
      CLR;
_102:      A BR;
      );
      JNB _103;
      L #CVRS5timeH;
      L 60;
      /D;
      T #CVRS5timeH;
_103:      NOP 0;
NETWORK
TITLE = Assign Input Parameters to Output
      L #IO_MODE;
      L "dbCONST_VAL".CM.MODE.AUTO;
      ==I;
      = %L1.0;
      A %L1.0;
      JNB _104;
      L #CVRS5timeS;
      T #IO_TIME_S;
_104:      NOP 0;
      A %L1.0;
      JNB _105;
      L #CVRS5timeM;
      T #IO_TIME_M;
_105:      NOP 0;
      A %L1.0;
      JNB _106;
      L #CVRS5timeH;
      T #IO_TIME_H;
_106:      NOP 0;
@@ATTR_END|TIMER@@

NETWORK
TITLE = Toggle
      A #IN_REQ_MODE;
      = #IO_TOGGLEMODE;

//----------------------------------------------------------------------------//
// Interlock must stop the module:                                            //
//----------------------------------------------------------------------------//
NETWORK
TITLE = An Interlock will stop the Module itself
      A(;
      A #INTERLOCK;
      A(;
      L #IO_MODE;
      L "dbCONST_VAL".CM.MODE.MANUAL;
      ==I;
      );
      JNB _107;
      L "dbCONST_VAL".EM.CMD.STOP;
      T #IO_CMND;
      SET;
      SAVE;
      CLR;
_107:      A BR;
      );
      JNB _108;
      L "dbCONST_VAL".EM.SUBSTATE.ZERO;
      T #IO_SUB;
_108:      NOP 0;
@@TEMPLATE_END@@
END_FUNCTION
