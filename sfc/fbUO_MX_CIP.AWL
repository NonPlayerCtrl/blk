//****************************************************************************************************
// Code generated by SFC Generator V1.13 on 02/04/18 16:19:43 by  MAC_IZZ from File D:\Rieckermann\old\Visio SFC\Snippet_Code\SEQ_HDR.txt
//****************************************************************************************************
//****************************************************************************************************

//================================ SEQ HEADER ================================//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Title: Manufacturing Vessel Mx CIP                                                       //
//                                                                            //
// Description:                                                               //
// Sequence for Clean In Place CIP operation                                                        //
//                                                                            //
// // SFC Revision History:
// Rev By               Date        CC         Note
// 0.2 David Paspa      26-Oct-2009            Added synch flags
// 0.1 Gerald Kontriner 07-Sep-2009            SFC structural design                                                       //
//----------------------------------------------------------------------------//
// Sequencer Revision History:                                                //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      05-Jan-2018 NA        Reboot for S7-1500.             //
// 1.6 Khairul Basar    19-Nov-2009 NA        Reset #sqSequencer.STEP.Active  //
//                                            when STEP Finished.             //
// 1.5 Khairul Basar    15-Oct-2009 NA        Placeholder inserted:           //
//                                            "udtSQ_UO";          //
// 1.4 Khairul Basar    06-Oct-2009 NA        R #PAUSE;                       //
// 1.3 Khairul Basar    30-Sep-2009 NA        SEQ_HDR change STEP-0 code      //
//                                            deleted.                        //
// 1.2 Khairul Basar    26-Sep-2009 NA        Refer R4.                       //
// 1.1 Khairul Basar    23-Sep-2009 NA        Refer R3.                       //
// 1.0 Khairul Basar    20-Sep-2009 NA        STEP.Finished flag reset by     //
//                                            JUMP_MAN.                       //
// 0.9 Khairul Basar    11-Sep-2009 NA        SQ_TIMER added as VAR, declared //
//                                            in SEQ_FTR.                     //
// 0.8 Khairul Basar    09-Sep-2009 NA        SqSequencer.Err_Fault is reset  //
//                                            on Stop cmd, Step-0 dead code   //
//                                            deleted from ACT & Verify.      //
//                                            STP_FTR Step_withErr flag       //
//                                            STEP_NUM place holder           //
//                                            configured.                     //
// 0.7 Khairul Basar    28-Aug-2009 NA        SQ_FINISHED OUT added again.    //
//                                            Deleted during major mod R3.    //
// 0.6 Khairul Basar    23-Aug-2009 NA        Refer R2.                       //
// 0.5 Khairul Basar    23-Aug-2009 NA        Refer R1.                       //
// 0.4 Khairul Basar    18-Aug-2009 NA        Reset Step done with/out error  //
//                                            bits using FC:RSET.             //
// 0.3 David Paspa      16-Aug-2009 NA        Added placeholders for header   //
//                                            name and version and revision   //
//                                            history.                        //
// 0.2 Khairul Basar    11-Aug-2009 NA        Retired external udt file for   //
//                                            Static type parameters. All     //
//                                            parameters now IN, OUT or       //
//                                            IN_OUT.                         //
// 0.1 Khairul Basar    12-Jun-2009 NA        Initial design.                 //
//----------------------------------------------------------------------------//
// R4:                                                                        //
// 1.If SQ not finished Resume command will start Step timer, and redo the    //
// last action, verify the feedback.                                          //
// 2."STEP.finished" flag is ANDed with "TRN_AND_JUMP" in the snippet file    //
// TRN_HDR.This is to avoid checking of transition logic if STEP is not       //
// finished yet.                                                              //
// 3.MDCH, Load & transfer typo corrected.                                    //
//                                                                            //
// R3:                                                                        //
// 1.SqStepTimer.IN is reset in STEP_FTR instead of resetting it in TRN_HDR.  //
// This is because TRN_HDTR is not included in the Last step and StepTimer    //
// must reset in the last step.                                               //
// 2.Reset all the timers when SQ stops.Reset done in SEQ_HDR.                //
// Also STEP-finished flag reset when SQ is OFF to                            //
// scan last step.                                                            //
//                                                                            //
// R2:                                                                        //
// 1.Any step error will send the Sequencer into Pause state.Code added in    //
// SEQ_HDR.Snippet Place holder for Bool-array 24 is   //
// deleted.                                                                   //
//                                                                            //
// R1:                                                                        //
// 1.sqStepTimer:All Verification Code must satisfy the condition finish step //
// action within STEP_DELAY time(40s).If step actions not finished within the //
// time period the error flag will raise High signal.Else timer will reset.   //
// 2.sqRunTimer Added therefore can be used as retentive & non retentive.     //
// 3.sqSequencer: This is re-structured UDT which is redefined the symbol     //
// names as well as it gives more clearity.                                   //
// 4.fcMODE and fcCMD functions are added to handle the mode & command        //
// independently regardless of other logic.Two separate UDT udtMODE & udt     //
// CMD assigned to Mode & command function respectively.                      //
// 5.MAN_JUMP programed for manual mode jump operation with or without        //
// Transition code satisfied.TRN_AND_JUMP & NO_VERIFC are the parameters      //
// which will define whether verification code & transition code need to be   //
// checked to perform jump operation.                                         //
// 6.Auto to Manual switchover will be bumpless & will not affect step        //
// operation.Manual to auto switchover can be used to resume Step action at   //
// defined.                                                                   //
// Step number entered in STEPNO_JUMP.                                        //
//                                                                            //
// Parameters:                                                                //
// INPUTS                                                                     //
// ======                                                                     //
// SQ_CMD          Sequence command input inherited from object block         //
//                 0: off/idle                                                //
//                 1: start/initiate                                          //
//                 2: pause                                                   //
//                 3: resume                                                  //
//                 4: reserved (not programmed)                               //
//                 5: reserved (not programmed)                               //
//                 6: abort/go to last step                                   //
//                 7: acknowledge error/fault                                 //
// SQ_MODE         Sequencer Auto/Manual input inherited from object block    //
//                 1: manual                                                  //
//                 2: auto                                                    //
//                                                                            //
// INPUT/OUTPUTS                                                              //
// =============                                                              //
// SQ_JUMP_MAN     Allows manual jumping from one step to the next step. The  //
//                 manual jump flag is ORed with the transition process       //
//                 condition and so can be used to bypass the condition if the//
//                 sequence will not progress.                                //
//                 This input can also be used to jump to any step even       //
//                 when no transition -> step linkage exists. This is only    //
//                 possible when the SQ_MODE is in manual and SQ is in the    //
//                 idle step. The step to jump to is specified in             //
//                 SQ_man_jump_to_step (not accesseble by this FB in/out      //
//                 interface but a separate DB memory location).              //
//                                                                            //
// OUTPUTS                                                                    //
// =======                                                                    //
// SQ_STATE        The calculated state of the sequence                       //
//                 0: off/idle                                                //
//                 1: start/initiated                                         //
//                 2: paused                                                  //
//                 3: resumed                                                 //
//                 4: reserved (wrong Mode)                                   //
//                 5: reserved (Wrong commad)                                 //
//                 6: aborted/go to last step                                 //
//                 7: acknowledged error/fault                                //
// CURSTEP         Current step being proccessed.                             //
// S_ACTIVE        If current step is active                                  //
// NXT_STEP        Next step to jump to if transition condition is true       //
// ERR_FAULT       True if any error/ or fault present                        //
// PAUSED          True if step is paused                                     //
// OFF_IDLE        Sequence is not running but ready for next SQ (in step=0)  //
//----------------------------------------------------------------------------//
// Define variables:                                                          //
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "fbUO_MX_CIP"
TITLE = UO : MX_CIP
NAME : MUCIP
AUTHOR : REO
VERSION : 0.2

VAR_INPUT
  MODE : INT :=2;
  SQ_CMD : INT :=0;
    _TIME_WFI_RINSE_Mx :TIME ;	//Time to rinse tank outlet drain line with WFI
    _TIME_PW_WASH_MMFLx :TIME ;	//Time to wash with PW
    _DEV_STATE_EXn014 :INT ;	//Device State of EXn014 (EMX1)
    _MASS_PW_PV :REAL ;	//Actual PW Mass Value
    _SPD_FLOOD :REAL ;	//Speed Setpoint Agitator
    _DEV_STATE_EXn007 :INT ;	//Device State of EXn007
    _DEV_STATE_EVn004 :INT ;	//Device State of EVn004
    _DEV_STATE_ECn002 :INT ;	//Device State of ECn002
    _DEV_STATE_ECn001 :INT ;	//Device State of ECn001
    _DEV_STATE_EAn010 :INT ;	//Device State of EAn010
    _TIME_WFI_RINSE_MMFLx :TIME ;	//Time to rinse filtration line with WFI
    _TIME_WFI_EMPTY :TIME ;	//Time to empty the vessel after WFI rinse
    _TIME_CS_STEAM :TIME ;	//Time to steam PW line
    _TIME_PW_WASH_Mx :TIME ;	//Time to wash with PW
    _TIME_PW_EMPTY2 :TIME ;	//Time to empty the vessel after washing
    _TIME_PW_EMPTY1 :TIME ;	//Time to empty the vessel after flooding
    _TIME_PW_AGIT :TIME ;	//Mixing time for flooded agitator
    _TIME_PW_FLOOD :TIME ;	//Timeout for PW Flood Stage
    _TIME_PW_PRE :TIME ;	//Flushing time for PW pre-stage
    _MASS_PW_FLOOD :REAL ;	//PW Mass Value Limit

END_VAR
VAR_OUTPUT
  SQ_STATE : INT ;
  CURSTEP : INT ;
  NXT_STEP : INT ;
  S_ACTIVE : BOOL ;
  ERR_FAULT : BOOL ;
  PAUSED : BOOL ;
  OFF_IDLE : BOOL ;
  SQ_FINISHED : BOOL ;
    _SUB_EXn014 :INT ;	//Substate selection to EXn014 (EMX1)
    _CMD_EXn014 :INT ;	//Command to EXn014 (EMX1)
    _RunTimeECn001 :TIME ;	//EM Runtime
    _AUXVENT_ECn001 :BOOL ;	//Description
    _TIME_RUN_S_EAn010 :INT ;	//Agitator run time Seconds for EAn010
    _TIME_RUN_M_EAn010 :INT ;	//Agitator run time Minutes for EAn010
    _TIME_RUN_H_EAn010 :INT ;	//Agitator run time Hours for EAn010
    _SETPOINT_EAn010 :REAL ;	//Speed Setpoint Parameter Agitator EAn010
    _AUXDRAIN_ECn001 :BOOL ;	//AUXDRAIN selection in ECn001
    _RUNtoTIME_ECn001 :BOOL ;	//Run to Time selection for ECn001
    _VALVE_ECn001 :INT ;	//Valve Selection ECn001
    _MEDIUM_ECn002 :INT ;	//Medium selection for ECn002
    _RUNtoTIME_ECn002 :BOOL ;	//Run to Time selection for ECn002
    _CMD_EXn007 :INT ;	//Command to EXn007
    _SUB_EXn007 :INT ;	//Substate selection to EXn007
    _SUB_EVn004 :INT ;	//Substate selection to EVn004
    _CMD_EVn004 :INT ;	//Command to EVn004
    _SUB_ECn002 :INT ;	//Substate selection to ECn002
    _CMD_ECn002 :INT ;	//Command to ECn002
    _SUB_ECn001 :INT ;	//Substate selection to ECn001
    _CMD_ECn001 :INT ;	//Command to ECn001
    _SUB_EAn010 :INT ;	//Substate selection to EAn010
    _CMD_EAn010 :INT ;	//Command to EAn010

END_VAR
VAR_IN_OUT
  STEPNO_JUMP : INT ;
  MAN_JUMP : BOOL ;
  NO_VERIFIC : BOOL ;
  TRN_AND_JUMP : BOOL ;

END_VAR
VAR
  sqStepTimer : "TON";
  sqRunTimer : "fbRunTimer";
  sqSequencer : "udtSQ_UO";
  SQ_TIMER: "TON";
    _log_PWFlushTime :TIME ;	//Logging PW FlushTime.
    _log_Fil_WFIRinseTime :TIME ;	//Logging filtration line WFI Rinse Time.
    _Report_Evnt_010 :BOOL ;	//WFI Rinse End for batch report
    _Report_Evnt_009 :BOOL ;	//WFI Rinse Start for batch report
    _Report_Evnt_008 :BOOL ;	//PW Wash End for batch report
    _Report_Evnt_007 :BOOL ;	//PW Wash Start for batch report
    _Report_Evnt_006 :BOOL ;	//PW Flood End for batch Report
    _Report_Evnt_005 :BOOL ;	//PW Flood Start for batch Report
    _Report_Evnt_004 :BOOL ;	//PW Flush End for batch Report
    _Report_Evnt_003 :BOOL ;	//PW Flush Start for Batch Report
    _SQ_TIMER :TON ;	//Standard Sequence Timer
    _log_WFIRinseTime :TIME ;	//Logging WFI Rinse Time.
    _log_PWEmptyTime :TIME ;	//Logging PW Empty Time.
    _log_PWSteamTime :TIME ;	//Logging PW Steam Time.
    _log_PWWashTime :TIME ;	//Logging PW Wash Time.
    _log_PWFloodMixTime :TIME ;	//Logging PW Flood Mix Time.
    _log_PWFloodMass :REAL ;	//Logging PW Flood Mass.
    _log_PWFloodTime :TIME ;	//Logging PW Flood Timeout
    _confirm_no_try :BOOL ;	//Operator selects choice of not trying PW flood again.
    _confirm_try_again :BOOL ;	//Operator confirms to try PW flood again.
    _prompt_no_PW :BOOL ;	//Prompt operator that PW not available and ask if want to try again.
    _log_MxCIPEnd :TOD ;	//Logging Mx CIP Operation End Time
    _log_MxCIPBegin :TOD ;	//Logging Mx CIP Operation Begin Time

END_VAR
BEGIN
NETWORK
TITLE =Call Mode checking function

      L     #MODE;
      T     #sqSequencer.MODE.current;
      CALL "fcSFCMode" (
           Mode                     := #sqSequencer.MODE);

NETWORK
TITLE =Call Command checking function

      L     #SQ_CMD;
      T     #sqSequencer.CMD.New;

      CALL "fcSFCCommand" (
           Comand                   := #sqSequencer.CMD);

NETWORK
TITLE =Sequencer Mode function

      A     #sqSequencer.MODE.changed;
      JC    MDCH; // if Mode changed,jump to mode change function
      A     #sqSequencer.MODE.manual;
      JC    MANU;
      A     #sqSequencer.MODE.auto;
      JC    AUTO;
      A     #sqSequencer.MODE.oos;
      JC    OOS;
      A     #sqSequencer.MODE.wrong;
      JC    WRMD;
      JU    EMOD;

NETWORK
//----------------------------------------------------------------------------//
// On positive edge of mode change , this will execute once, only one cycle   //
// before going to execute the selected mode function below:                  //
//----------------------------------------------------------------------------//
TITLE =Mode change function
MDCH: NOP   0;
      SET   ;
      R     #sqStepTimer.IN;
      L     #sqSequencer.STEP.NumberCurrent;
      T     #STEPNO_JUMP;
      JU    EMOD;

NETWORK
//----------------------------------------------------------------------------//
// #TRN_AND_JUMP=can set/reset                                                //
// #sqSequencer.STEP.JumpCtrl=Can set/reset by #MAN_JUMP                      //
// #NO_VERIFIC=Can set/ Reset                                                 //
//----------------------------------------------------------------------------//
TITLE =Manual Mode function
MANU: NOP   0; //Manual mode selected



      A     #MAN_JUMP;
      =     #sqSequencer.STEP.JumpCtrl;
      A     #MAN_JUMP;
      JCN   EMOD;

      L     #STEPNO_JUMP;
      T     #sqSequencer.STEP.NumberNext;
      T     #sqSequencer.STEP.NumberCurrent;
      R     #MAN_JUMP; //Reset MAN_JUMP after loading user destination Step number
      R     #sqSequencer.STEP.Finished; //Reset finish flag, to execute next step action
      JU    EMOD;

NETWORK
//----------------------------------------------------------------------------//
// #TRN_AND_JUMP=always set                                                   //
// #sqSequencer.STEP.JumpCtrl=Always set                                      //
// #NO_VERIFIC=Alwasy Reset                                                   //
//----------------------------------------------------------------------------//
TITLE =Auto Mode function
AUTO: NOP   0; //Auto mode selected



      R     #MAN_JUMP;
      S     #TRN_AND_JUMP;
      R     #NO_VERIFIC;
      S     #sqSequencer.STEP.JumpCtrl; //Always Set in auto mode

      L     #sqSequencer.STEP.NumberCurrent;
      T     #STEPNO_JUMP;
      JU    EMOD;
NETWORK
TITLE =OOS mode function

OOS:  NOP   0; // Out of service
      JU    EMOD;
WRMD: NOP   0; //Wrong mode selected
      S     #sqSequencer.Error_Fault;
      L     "dbCONST_VAL".SQ_STATE.WRMODE;
      T     #SQ_STATE;

      JU    EMOD;

NETWORK
TITLE =Mode not changedd

      NOP   0;

NETWORK
TITLE =End Mode function

EMOD: NOP   0;

NETWORK
TITLE =An error will Pause the Sequencer,Operator must Resume SQ to run

      A     #sqSequencer.Error_Fault;
      AN    #sqSequencer.CMD.Changed;
      JC    PAUS;

NETWORK
TITLE =Command Action function

      A     #sqSequencer.CMD.Changed;
      JCN   CNCH; // if Command not changed,jump to end function
      R     #sqStepTimer.IN;


      A     #sqSequencer.CMD.Start;
      JC    STRT;

      A     #sqSequencer.CMD.Stop;
      JC    STOP;


      A     #sqSequencer.CMD.Pause;
      JC    PAUS;

      A     #sqSequencer.CMD.Resume;
      JC    RESM;

      A     #sqSequencer.CMD.Abort;
      JC    ABRT;

      A     #sqSequencer.CMD.Ack;
      JC    ACKN;

      A     #sqSequencer.CMD.wrong;
      JC    WCMD;

      JU    ECMD; //Wrong command/not specified command
//End Comand function

NETWORK
TITLE =Comand -Start/Initiate action function

STRT: NOP   0;
      R     #OFF_IDLE;
      R     #PAUSED;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;
      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.TimerExpired;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqStepTimer.IN;

      S     #sqRunTimer.RESET;

//----------------------------------------------------------------------------//
// Load Initial step Number:                                                  //
//----------------------------------------------------------------------------//
      L     1;
      T     #sqSequencer.STEP.Initial;
      L     #sqSequencer.STEP.Initial;
      T     #sqSequencer.STEP.NumberCurrent;
      T     #sqSequencer.STEP.NumberNext;




      L     "dbCONST_VAL".SQ_STATE.STARTED;
      T     #SQ_STATE;

//----------------------------------------------------------------------------//
// Reset Step done without error bits:                                        //
//----------------------------------------------------------------------------//
      CALL "RSET" (
           S_BIT                    := #sqSequencer.STEP.Done[1],
           N                        := 23);//Upto final step


//----------------------------------------------------------------------------//
// Reset Step done with error bits:                                           //
//----------------------------------------------------------------------------//
      CALL "RSET" (
           S_BIT                    := #sqSequencer.STEP.WithError[1],
           N                        := 23);//Upto final step

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Stop action function

STOP: NOP   0;
      S     #OFF_IDLE;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;
      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.TimerExpired;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.Error_Fault;
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqRunTimer.ENABLE;
      R     #sqStepTimer.IN;
      R     #SQ_TIMER.IN;
      R     #PAUSED;


//Go to last step
      L     23;
      T     #sqSequencer.FinalStep;
      L     #sqSequencer.FinalStep;
      T     #sqSequencer.STEP.NumberNext;
      L     "dbCONST_VAL".SQ_STATE.OFF_IDLE;
      T     #SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Pause action function

PAUS: NOP   0;
      S     #PAUSED;
      R     #S_ACTIVE;
      S     #sqRunTimer.PAUSE;
      L     #sqSequencer.STEP.NumberCurrent;
      T     #STEPNO_JUMP;
      L     "dbCONST_VAL".SQ_STATE.PAUSED;
      T     #SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Resume action function

RESM: NOP   0;
      R     #PAUSED;
      R     #sqRunTimer.PAUSE;
      R     #sqStepTimer.IN; //Reset Step timer
      L     "dbCONST_VAL".SQ_STATE.RESUMED;
      T     #SQ_STATE;

      A     #SQ_FINISHED;
      JC    ECMD;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Abort action function

ABRT: NOP   0;
      L     "dbCONST_VAL".SQ_STATE.ABORTED;
      T     #SQ_STATE;

      JC    STOP; //Stop & Abort same
      JU    ECMD;

NETWORK
TITLE =Comand -Acknowledge action function

ACKN: NOP   0;
      R     #ERR_FAULT;
      R     #sqSequencer.Error_Fault;
      L     "dbCONST_VAL".SQ_STATE.ACKNOWLEDGED;
      T     #SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -wrong/unavailable

WCMD: NOP   0;

      S     #sqSequencer.Error_Fault;
      L     "dbCONST_VAL".SQ_STATE.WRCMD;
      T     #SQ_STATE;

      JU    ECMD;
NETWORK
TITLE =Comand -not changedd

CNCH: NOP   0; // Command not changed

NETWORK
TITLE =End command Function

ECMD: NOP   0;

NETWORK
//----------------------------------------------------------------------------//
// Sequencer step jump list. Load the step number to execute the step:        //
//----------------------------------------------------------------------------//
TITLE =Sequencer Step Jump distrubution list
      L     #sqSequencer.STEP.NumberCurrent;
      JL    SQER; // If Sequencer Step number invalid or greater than available number of step
      JU    S000; // Exceptional Error Handling
      JU    S001; // STEP-001:
JU    S002; // STEP-002:
JU    S003; // STEP-003:
JU    S004; // STEP-004:
JU    S005; // STEP-005:
JU    S006; // STEP-006:
JU    S007; // STEP-007:
JU    S008; // STEP-008:
JU    S009; // STEP-009:
JU    S010; // STEP-010:
JU    S011; // STEP-011:
JU    S012; // STEP-012:
JU    S013; // STEP-013:
JU    S014; // STEP-014:
JU    S015; // STEP-015:
JU    S016; // STEP-016:
JU    S017; // STEP-017:
JU    S018; // STEP-018:
JU    S019; // STEP-019:
JU    S020; // STEP-020:
JU    S021; // STEP-021:
JU    S022; // STEP-022:
JU    S023; // STEP-023:


//----------------------------------------------------------------------------//
// If Step number is Invalid or Out of Range:                                 //
//----------------------------------------------------------------------------//
SQER: NOP   0;
      S     #sqSequencer.Error_Fault;
      JU    COMM; // Jump to Common Sequencer code handling function

NETWORK
//----------------------------------------------------------------------------//
// STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 ST //
// STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 ST //
// STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 ST //
//----------------------------------------------------------------------------//
TITLE =STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP

NETWORK
TITLE =S000: STEP0::If Paused exit

S000: NOP   0;

      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP001 STEP001 STEP001 STEP001 ST //
// STEP001 STEP001 STEP001 STEP001 ST //
// STEP001 STEP001 STEP001 STEP001 ST //
//----------------------------------------------------------------------------//
// Log Mx CIP operation begin time.

Set EVx004 to substate DISCHARGE to open tank path to wash drain.
//----------------------------------------------------------------------------//
TITLE =S001: STEP-01::UO_MX_CIP : Unit Operation Commenced

S001: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S001:STEP-01:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A001; // Exit Action code, Jump to A001 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L001; // Action number loaded, Jump to L001--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L001: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r001; //Wrong Action number
      JU    _001; //Action error handling
       JU    aa01; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r001: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k001; //Exit
_001: NOP   0; // Action error handling
      JU    k001; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log Mx CIP operation begin time.
//Set EVn004 to substate DISCHARGE.
TITLE =S001:: STEP-001:: : ACTION CODE
aa01: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log starting time.
L "dbCONST_VAL".CPU_TIME;
T #_log_MxCIPBegin;

//Start EVn004 to substate DISCHARGE and start it.
L 	"dbCONST_VAL".EM.EMV1.SUBS.DISCHARGE;
T 	#_SUB_EVn004;
L 	"dbCONST_VAL".EM.CMD.START;
T 	#_CMD_EVn004;

//Reset Batch Report Event
SET;
R #_Report_Evnt_003;
R #_Report_Evnt_004;
R #_Report_Evnt_005;
R #_Report_Evnt_006;
R #_Report_Evnt_007;
R #_Report_Evnt_008;
R #_Report_Evnt_009;
R #_Report_Evnt_010;


//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify EVn004 changed to substate DISCHARGE.
A(;
L 	#_DEV_STATE_EVn004;
L 	"dbCONST_VAL".EM.EMV1.SUBS.DISCHARGE;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k001;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[01];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k001;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k001: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[01]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S001:STEP-001::Begin Transition

A001: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S001::STEP-001:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP002 STEP002 STEP002 STEP002 ST //
// STEP002 STEP002 STEP002 STEP002 ST //
// STEP002 STEP002 STEP002 STEP002 ST //
//----------------------------------------------------------------------------//
// Open HPCA supply valve ECn001 and
Open PW supply to preflush vessel ECn002 .
//----------------------------------------------------------------------------//
TITLE =S002: STEP-02::UO_MX_CIP : Commence PW Preflush of vessel

S002: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S002:STEP-02:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A002; // Exit Action code, Jump to A002 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L002; // Action number loaded, Jump to L002--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L002: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r002; //Wrong Action number
      JU    _002; //Action error handling
       JU    aa02; //ACTION-01
JU    ab02; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r002: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k002; //Exit
_002: NOP   0; // Action error handling
      JU    k002; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open CA supply valve. Stop ECn002 and set the substate to safe state.
TITLE =S002:: STEP-002:: : ACTION CODE
aa02: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Open CA supply valve
L "dbCONST_VAL".EM.EMC1.VALVE.CA; 
T #_VALVE_ECn001;
SET;
R #_AUXDRAIN_ECn001;
R #_AUXVENT_ECn001;

L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED; 
T #_SUB_ECn001;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECn001;

//Set substate to safe state and stop ECn002.
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECn002;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECn002;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if CA valve opened and  ECn002 stopped.
A(;
L 	#_DEV_STATE_ECn001;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED;
==I;
);
A(;
L 	#_DEV_STATE_ECn002;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);

      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k002;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Preflush vessel.
//Set Medium to PW  and load flushing time for PW pre-stage.
//Set ECn002 to substate FLUSH and open PW supply valve.
//
TITLE =S002:: STEP-002:: : ACTION CODE
ab02: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Set Medium to PW  and load flushing time for PW pre-stage.
L "dbCONST_VAL".EM.EMC2.MEDIUM.PW; 
T #_MEDIUM_ECn002;
SET;
R #_RUNtoTIME_ECn002;
L #_TIME_PW_PRE;
T #_RunTimeECn001;

//Set ECn002 to substate FLUSH and open PW supply valve.
L "dbCONST_VAL".EM.EMC2.SUBS.FLUSH;
T #_SUB_ECn002;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECn002;

//Report Event Set
SET;
S #_Report_Evnt_003;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if current state changed to FLUSH.
A(;
L 	#_DEV_STATE_ECn002;
L "dbCONST_VAL".EM.EMC2.SUBS.FLUSH;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k002;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[02];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k002;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k002: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[02]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S002:STEP-002::Begin Transition

A002: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Tank flushed for TIME_PW_PRE seconds EXPIRED.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S002::STEP 002:TRAN 002: Pre-flush time expired.
A(;
L 	#_DEV_STATE_ECn002;
L 	"dbCONST_VAL".EM.DEV_STATE.COMPLETE;
==I;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S002:t002::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x002;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     03; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step03.

      JU    COMM; // Transition satisfied, Exit, go to next step
x002: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S002::STEP-002:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP003 STEP003 STEP003 STEP003 ST //
// STEP003 STEP003 STEP003 STEP003 ST //
// STEP003 STEP003 STEP003 STEP003 ST //
//----------------------------------------------------------------------------//
// Log actual PW flush time.
Close Mx outlet valve,EVn004 .
Close HPCA supply valve.
//----------------------------------------------------------------------------//
TITLE =S003: STEP-03::UO_MX_CIP : Close MX outlet to flood vessel.

S003: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S003:STEP-03:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A003; // Exit Action code, Jump to A003 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L003; // Action number loaded, Jump to L003--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L003: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r003; //Wrong Action number
      JU    _003; //Action error handling
       JU    aa03; //ACTION-01
JU    ab03; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r003: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k003; //Exit
_003: NOP   0; // Action error handling
      JU    k003; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual PW flush time.
//Close Mx outlet valve,EVn004.
//Close HPCA supply valve, ECn001 (STATE=Vent)
//
TITLE =S003:: STEP-003:: : ACTION CODE
aa03: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log actual PW flush time.
L #SQ_TIMER.PT;
L #_log_PWFlushTime;

// Close Mx outlet valve.
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_EVn004;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_EVn004;

//Set substate to safe state and stop ECn001.
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECn001;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECn001;

//Report Event Set
SET;
S #_Report_Evnt_004;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if EVn004 & ECn001 stopped.
A(;
L #_DEV_STATE_EVn004;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
A(;
L #_DEV_STATE_ECn001;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k003;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Initialize timer.
TITLE =S003:: STEP-003:: : ACTION CODE
ab03: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L T#10S;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k003;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[03];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k003;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k003: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[03]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S003:STEP-003::Begin Transition

A003: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// TBD on delay timer
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S003::STEP 003:TRAN 003: Timer
A #SQ_TIMER.Q;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S003:t003::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x003;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     04; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step04.

      JU    COMM; // Transition satisfied, Exit, go to next step
x003: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S003::STEP-003:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP004 STEP004 STEP004 STEP004 ST //
// STEP004 STEP004 STEP004 STEP004 ST //
// STEP004 STEP004 STEP004 STEP004 ST //
//----------------------------------------------------------------------------//
// Open VENT valve.
Enable Mx Agitator EAn010.
//----------------------------------------------------------------------------//
TITLE =S004: STEP-04::UO_MX_CIP : Open Vent valve

S004: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S004:STEP-04:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A004; // Exit Action code, Jump to A004 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L004; // Action number loaded, Jump to L004--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L004: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r004; //Wrong Action number
      JU    _004; //Action error handling
       JU    aa04; //ACTION-01
JU    ab04; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r004: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k004; //Exit
_004: NOP   0; // Action error handling
      JU    k004; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open VENT valve, ECn001.
//Enable Mx Agitator EAn010 (STATE=MIX, SETPOINT=120.0, TIME_RUN_H=1)
TITLE =S004:: STEP-004:: : ACTION CODE
aa04: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Open VENT valve .
L "dbCONST_VAL".EM.EMC1.VALVE.VENT;
T #_VALVE_ECn001;
SET;
R #_RUNtoTIME_ECn001;
R #_AUXDRAIN_ECn001;
R #_AUXVENT_ECn001;

L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED; 
T #_SUB_ECn001;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECn001;


// Load setpoint and enable Mx Agitator.
L 120.0;
T #_SETPOINT_EAn010;
L 1;
T #_TIME_RUN_H_EAn010;
L 0;
T #_TIME_RUN_M_EAn010;
L 0;
T #_TIME_RUN_S_EAn010;
L "dbCONST_VAL".EM.EMA1.SUBS.MIX;
T #_SUB_EAn010;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_EAn010;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_ECn001;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED;
==I;
);
A(;
L  #_DEV_STATE_EAn010;
L "dbCONST_VAL".EM.EMA1.SUBS.MIX; 
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k004;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Re-initilialize timer.
TITLE =S004:: STEP-004:: : ACTION CODE
ab04: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L T#10S;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k004;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[04];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k004;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k004: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[04]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S004:STEP-004::Begin Transition

A004: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Timer 10s
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S0::STEP 0:TRAN 004: Timer
A #SQ_TIMER.Q;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S0:t004::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x004;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     ; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step.

      JU    COMM; // Transition satisfied, Exit, go to next step
x004: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S004::STEP-004:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP005 STEP005 STEP005 STEP005 ST //
// STEP005 STEP005 STEP005 STEP005 ST //
// STEP005 STEP005 STEP005 STEP005 ST //
//----------------------------------------------------------------------------//
// Start FLUSH and PW Flood Timeout Timer .
//----------------------------------------------------------------------------//
TITLE =S005: STEP-05::MX_UO_CIP : Wait to reach vessel flood mass

S005: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S005:STEP-05:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A005; // Exit Action code, Jump to A005 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L005; // Action number loaded, Jump to L005--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L005: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r005; //Wrong Action number
      JU    _005; //Action error handling
       JU    aa05; //ACTION-01
JU    ab05; //ACTION-02
JU    ac05; //ACTION-03


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r005: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k005; //Exit
_005: NOP   0; // Action error handling
      JU    k005; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Close PW supply valve.
TITLE =S005:: STEP-005:: : ACTION CODE
aa05: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Set substate to safe state and stop ECn002.
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECn002;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECn002;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if ECn002.
A(;
L 	#_DEV_STATE_ECn002;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k005;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Set medium to PW and start FLUSH.
TITLE =S005:: STEP-005:: : ACTION CODE
ab05: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Set medium to PW and reset RunToTIme for ECn002. 
L "dbCONST_VAL".EM.EMC2.MEDIUM.PW; 
T #_MEDIUM_ECn002;
SET;
R #_RUNtoTIME_ECn002;

//Set ECn002 to substate FLUSH and start it.
L "dbCONST_VAL".EM.EMC2.SUBS.FLUSH;
T #_SUB_ECn002;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECn002;


//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if ECn002 changed to substate FLUSH.
A(;
L 	#_DEV_STATE_ECn002;
L "dbCONST_VAL".EM.EMC2.SUBS.FLUSH;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k005;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     03; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Start PW Flood Timeout Timer.
TITLE =S005:: STEP-005:: : ACTION CODE
ac05: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Start Timeout Timer for PW Flood
A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L #_TIME_PW_FLOOD;
T #SQ_TIMER.PT;

// Reset flags
SET;
R #_prompt_no_PW;
R #_confirm_try_again;

//Report Event Set
SET;
S #_Report_Evnt_005;

//Report Event Reset
SET;
R #_Report_Evnt_006;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k005;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[05];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k005;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k005: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[05]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S005:STEP-005::Begin Transition

A005: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Tank PW mass has reached MASS_PW_FLOOD limit.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S005::STEP 005:TRAN 005: PW mass limit reached.
A(;
L #_MASS_PW_PV;
L #_MASS_PW_FLOOD;
>=R;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S005:t005::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x005;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     07; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step07.

      JU    COMM; // Transition satisfied, Exit, go to next step
x005: NOP   0;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// TIME_PW_FLOOD expired.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S005::STEP 005:TRAN 006: PW Flood Timeout.
A #SQ_TIMER.Q;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S005:t006::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x006;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     06; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step06.

      JU    COMM; // Transition satisfied, Exit, go to next step
x006: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S005::STEP-005:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP006 STEP006 STEP006 STEP006 ST //
// STEP006 STEP006 STEP006 STEP006 ST //
// STEP006 STEP006 STEP006 STEP006 ST //
//----------------------------------------------------------------------------//
// Log PW Flood Timeout and close PW supply valve.
Prompt operator PW not available and ask to try again.
//----------------------------------------------------------------------------//
TITLE =S006: STEP-06::UO_MX_CIP : PW Flood Timeout. Wait for OPER resume

S006: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S006:STEP-06:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A006; // Exit Action code, Jump to A006 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L006; // Action number loaded, Jump to L006--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L006: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r006; //Wrong Action number
      JU    _006; //Action error handling
       JU    aa06; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r006: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k006; //Exit
_006: NOP   0; // Action error handling
      JU    k006; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Close PW supply valve. Log PW Flood Timeout and prompt operator.
TITLE =S006:: STEP-006:: : ACTION CODE
aa06: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Close PW supply valve
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECn002;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECn002;

L #SQ_TIMER.PT;
T #_log_PWFloodTime;

SET;
S #_prompt_no_PW;

//Report Event Reset
SET;
R #_Report_Evnt_005;

//Report Event Set
SET;
S #_Report_Evnt_006;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_ECn002;
L 	"dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k006;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[06];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k006;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k006: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[06]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S006:STEP-006::Begin Transition

A006: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Operator confirmed not to try again, NO.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S006::STEP 006:TRAN 007: No try?
A #_confirm_no_try;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S006:t007::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x007;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     23; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step23.

      JU    COMM; // Transition satisfied, Exit, go to next step
x007: NOP   0;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Operator confirmed to try again, YES.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S006::STEP 006:TRAN 008: Try again?
A #_confirm_try_again;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S006:t008::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x008;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     05; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step05.

      JU    COMM; // Transition satisfied, Exit, go to next step
x008: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S006::STEP-006:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP007 STEP007 STEP007 STEP007 ST //
// STEP007 STEP007 STEP007 STEP007 ST //
// STEP007 STEP007 STEP007 STEP007 ST //
//----------------------------------------------------------------------------//
// Check flood timer
//----------------------------------------------------------------------------//
TITLE =S007: STEP-07::UO_MX_CIP : Reset Flood Timer

S007: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S007:STEP-07:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A007; // Exit Action code, Jump to A007 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L007; // Action number loaded, Jump to L007--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L007: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r007; //Wrong Action number
      JU    _007; //Action error handling
       JU    aa07; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r007: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k007; //Exit
_007: NOP   0; // Action error handling
      JU    k007; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Flood Timer
TITLE =S007:: STEP-007:: : ACTION CODE
aa07: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //If timer finished, disable timer. Else, run timer for 10s.
A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L T#10S;
T #SQ_TIMER.PT;

//Report Event Set
SET;
S #_Report_Evnt_006;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k007;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[07];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k007;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k007: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[07]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S007:STEP-007::Begin Transition

A007: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Timer 10s
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S007::STEP 007:TRAN 009: Timer finished
A #SQ_TIMER.Q;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S007:t009::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x009;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     08; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step08.

      JU    COMM; // Transition satisfied, Exit, go to next step
x009: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S007::STEP-007:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP008 STEP008 STEP008 STEP008 ST //
// STEP008 STEP008 STEP008 STEP008 ST //
// STEP008 STEP008 STEP008 STEP008 ST //
//----------------------------------------------------------------------------//
// Close PW supply valve ECn002.
Log actual tank PW flood mass from EMM1 MV value.
//----------------------------------------------------------------------------//
TITLE =S008: STEP-08::UO_MX_CIP : Close PW and Wait for agitator cleaning time

S008: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S008:STEP-08:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A008; // Exit Action code, Jump to A008 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L008; // Action number loaded, Jump to L008--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L008: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r008; //Wrong Action number
      JU    _008; //Action error handling
       JU    aa08; //ACTION-01
JU    ab08; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r008: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k008; //Exit
_008: NOP   0; // Action error handling
      JU    k008; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Close PW supply valve and log actual flood mass.
TITLE =S008:: STEP-008:: : ACTION CODE
aa08: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Close PW supply valve
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECn002;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECn002;

//Log actual flood mass.
L #_MASS_PW_PV;
T #_log_PWFloodMass;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if ECn002 stopped.
A(;
L 	#_DEV_STATE_ECn002;
L 	"dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k008;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Load mixing time for flooded agitator.
TITLE =S008:: STEP-008:: : ACTION CODE
ab08: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;

//Load mixing time for flooded agitator.
L #_TIME_PW_AGIT;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k008;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[08];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k008;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k008: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[08]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S008:STEP-008::Begin Transition

A008: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Timer TIME_PW_AGIT expired?
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S008::STEP 008:TRAN 010: Timer
A #SQ_TIMER.Q;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S008:t010::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x010;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     09; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step09.

      JU    COMM; // Transition satisfied, Exit, go to next step
x010: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S008::STEP-008:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP009 STEP009 STEP009 STEP009 ST //
// STEP009 STEP009 STEP009 STEP009 ST //
// STEP009 STEP009 STEP009 STEP009 ST //
//----------------------------------------------------------------------------//
// Open VENT valve and disable Agitator.
//----------------------------------------------------------------------------//
TITLE =S009: STEP-09::UO_MX_CIP : Open Vent and disable Agitator

S009: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S009:STEP-09:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A009; // Exit Action code, Jump to A009 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L009; // Action number loaded, Jump to L009--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L009: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r009; //Wrong Action number
      JU    _009; //Action error handling
       JU    aa09; //ACTION-01
JU    ab09; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r009: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k009; //Exit
_009: NOP   0; // Action error handling
      JU    k009; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Disable agitator and open PW supply to wash vessel.
TITLE =S009:: STEP-009:: : ACTION CODE
aa09: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Open VENT valve
L "dbCONST_VAL".EM.EMC1.VALVE.VENT;
T #_VALVE_ECn001;
SET;
R #_RUNtoTIME_ECn001;
R #_AUXDRAIN_ECn001;

L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED; 
T #_SUB_ECn001;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECn001;

// Disable Mx Agitator
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_EAn010;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_EAn010;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_ECn001;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED; 
==I;
);
A(;
L #_DEV_STATE_EAn010;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);

      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k009;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Re-initialize timer.
TITLE =S009:: STEP-009:: : ACTION CODE
ab09: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L T#10S;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k009;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[09];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k009;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k009: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[09]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S009:STEP-009::Begin Transition

A009: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Timer 10s
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S0::STEP 0:TRAN 011: Timer expired.
A #SQ_TIMER.Q;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S0:t011::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x011;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     ; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step.

      JU    COMM; // Transition satisfied, Exit, go to next step
x011: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S009::STEP-009:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP010 STEP010 STEP010 STEP010 ST //
// STEP010 STEP010 STEP010 STEP010 ST //
// STEP010 STEP010 STEP010 STEP010 ST //
//----------------------------------------------------------------------------//
// Set EVx004 to substate DISCHARGE to open tank path to wash drain.
Log actual tank PW flood mixing time (done by EM).
Open HPCA supply valve ECn001.
//----------------------------------------------------------------------------//
TITLE =S010: STEP-10::UO_MX_CIP : Wait to empty vessel

S010: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S010:STEP-10:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A010; // Exit Action code, Jump to A010 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L010; // Action number loaded, Jump to L010--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L010: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r010; //Wrong Action number
      JU    _010; //Action error handling
       JU    aa10; //ACTION-01
JU    ab10; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r010: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k010; //Exit
_010: NOP   0; // Action error handling
      JU    k010; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open tank path to wash drain and CA supply valve.
//Start timer for PW Empty.
//(STATE=VALVE OPENED, VALVE=HPCA, RUN_TO_TIME=FALSE, AUX DRAIN=FALSE).
TITLE =S010:: STEP-010:: : ACTION CODE
aa10: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Open CA supply valve
L "dbCONST_VAL".EM.EMC1.VALVE.CA;
T #_VALVE_ECn001;
SET;
R #_RUNtoTIME_ECn001;
R #_AUXDRAIN_ECn001;
R #_AUXVENT_ECn001;

L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED;
T #_SUB_ECn001;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECn001;

// Open MX outlet valve
L  "dbCONST_VAL".EM.EMV1.SUBS.DISCHARGE;
T  #_SUB_EVn004;
L  "dbCONST_VAL".EM.CMD.START;
T  #_CMD_EVn004;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_ECn001;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED;
==I;
);

A(;
L 	#_DEV_STATE_EVn004;
L 	"dbCONST_VAL".EM.EMV1.SUBS.DISCHARGE;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k010;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Load time to empty vessel after flooding.
TITLE =S010:: STEP-010:: : ACTION CODE
ab10: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L #_TIME_PW_EMPTY1;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k010;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[10];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k010;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k010: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[10]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S010:STEP-010::Begin Transition

A010: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// TIME_PW_EMPTY1 expired?
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S010::STEP 010:TRAN 012: Timer expired.
A #SQ_TIMER.Q;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S010:t012::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x012;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     11; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step11.

      JU    COMM; // Transition satisfied, Exit, go to next step
x012: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S010::STEP-010:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP011 STEP011 STEP011 STEP011 ST //
// STEP011 STEP011 STEP011 STEP011 ST //
// STEP011 STEP011 STEP011 STEP011 ST //
//----------------------------------------------------------------------------//
// Open PW supply to wash vessel and start FLUSH.
//----------------------------------------------------------------------------//
TITLE =S011: STEP-11::UO_MX_CIP : Commence vessel washing with PW

S011: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S011:STEP-11:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A011; // Exit Action code, Jump to A011 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L011; // Action number loaded, Jump to L011--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L011: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r011; //Wrong Action number
      JU    _011; //Action error handling
       JU    aa11; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r011: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k011; //Exit
_011: NOP   0; // Action error handling
      JU    k011; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open PW supply to wash vessel. (STATE=FLUSH, MEDIUM=PW, RUN_TO_TIME=FALSE)
//Load Time to wash with PW.
TITLE =S011:: STEP-011:: : ACTION CODE
aa11: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Open PW supply valve
L "dbCONST_VAL".EM.EMC2.MEDIUM.PW; 
T #_MEDIUM_ECn002;
SET;
R #_RUNtoTIME_ECn002;
L #_TIME_PW_WASH;
T #_RunTimeECn001;

//Set ECn002 to substate FLUSH and start it.
L "dbCONST_VAL".EM.EMC2.SUBS.FLUSH;
T #_SUB_ECn002;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECn002;

//Report Event Set
SET;
S #_Report_Evnt_007;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if ECn002 changed to substate FLUSH.
A(;
L 	#_DEV_STATE_ECn002;
L "dbCONST_VAL".EM.EMC2.SUBS.FLUSH;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k011;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[11];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k011;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k011: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[11]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S011:STEP-011::Begin Transition

A011: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// TIME_PW_WASH_Mx expired?
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S011::STEP 011:TRAN 013: Timer expired.
A(;
L 	#_DEV_STATE_ECn002;
L 	"dbCONST_VAL".EM.DEV_STATE.COMPLETE;
==I;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S011:t013::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x013;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     12; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step12.

      JU    COMM; // Transition satisfied, Exit, go to next step
x013: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S011::STEP-011:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP012 STEP012 STEP012 STEP012 ST //
// STEP012 STEP012 STEP012 STEP012 ST //
// STEP012 STEP012 STEP012 STEP012 ST //
//----------------------------------------------------------------------------//
// Log actual tank PW wash time.
//----------------------------------------------------------------------------//
TITLE =S012: STEP-12::UO_MX_CIP : PW washing completed

S012: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S012:STEP-12:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A012; // Exit Action code, Jump to A012 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L012; // Action number loaded, Jump to L012--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L012: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r012; //Wrong Action number
      JU    _012; //Action error handling
       JU    aa12; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r012: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k012; //Exit
_012: NOP   0; // Action error handling
      JU    k012; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual tank PW wash time.
TITLE =S012:: STEP-012:: : ACTION CODE
aa12: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log actual tank PW wash time
L #SQ_TIMER.PT;
T #_log_PWWashTime;

//Report Event Set
SET;
S #_Report_Evnt_008;


//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1; //Always High flag
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k012;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[12];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k012;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k012: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[12]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S012:STEP-012::Begin Transition

A012: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Empty Transition
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S012::STEP 012:TRAN 014: Empty Transition
A M1.1; //Always High flag






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S012:t014::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x014;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     13; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step13.

      JU    COMM; // Transition satisfied, Exit, go to next step
x014: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S012::STEP-012:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP013 STEP013 STEP013 STEP013 ST //
// STEP013 STEP013 STEP013 STEP013 ST //
// STEP013 STEP013 STEP013 STEP013 ST //
//----------------------------------------------------------------------------//
// Divert Wash to MMFLx.
Start TIME_PW_WASH_MMFLx.
//----------------------------------------------------------------------------//
TITLE =S013: STEP-13::UO_MX_CIP : Divert Wash to MMFLx

S013: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S013:STEP-13:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A013; // Exit Action code, Jump to A013 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L013; // Action number loaded, Jump to L013--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L013: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r013; //Wrong Action number
      JU    _013; //Action error handling
       JU    aa13; //ACTION-01
JU    ab13; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r013: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k013; //Exit
_013: NOP   0; // Action error handling
      JU    k013; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Divert to MMFLx Filtration Line.
TITLE =S013:: STEP-013:: : ACTION CODE
aa13: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Set EXn014 to substate CIP_MMFLX and start it.
L  "dbCONST_VAL".EM.EMX1.SUBS.CIP_MMFLX; 
T  #_SUB_EXn014;
L  "dbCONST_VAL".EM.CMD.START;
T  #_CMD_EXn014;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if EXn014 changed to substate CIP_MMFLX.
A(;
L   #_DEV_STATE_EXn014;
L   "dbCONST_VAL".EM.EMX1.SUBS.CIP_MMFLX;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k013;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Start TIME_PW_WASH_MMFLx.
TITLE =S013:: STEP-013:: : ACTION CODE
ab13: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L #_TIME_PW_WASH_MMFLx;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k013;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[13];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k013;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k013: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[13]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S013:STEP-013::Begin Transition

A013: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// TIME_PW_WASH_MMFLx expired?
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S013::STEP 013:TRAN 015: Timer expired.
A #SQ_TIMER.Q;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S013:t015::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x015;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     14; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step14.

      JU    COMM; // Transition satisfied, Exit, go to next step
x015: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S013::STEP-013:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP014 STEP014 STEP014 STEP014 ST //
// STEP014 STEP014 STEP014 STEP014 ST //
// STEP014 STEP014 STEP014 STEP014 ST //
//----------------------------------------------------------------------------//
// Log actual Filtration line PW wash time and close PW supply valve.
Start TIME_PW_EMPTY2.
//----------------------------------------------------------------------------//
TITLE =S014: STEP-14::UO_MX_CIP : Filtration line PW wash completed

S014: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S014:STEP-14:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A014; // Exit Action code, Jump to A014 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L014; // Action number loaded, Jump to L014--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L014: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r014; //Wrong Action number
      JU    _014; //Action error handling
       JU    aa14; //ACTION-01
JU    ab14; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r014: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k014; //Exit
_014: NOP   0; // Action error handling
      JU    k014; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual Filtration line PW wash time and close PW supply valve.
TITLE =S014:: STEP-014:: : ACTION CODE
aa14: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log actual tank PW wash time
L #SQ_TIMER.PT;
T #_log_PWWashTime;

//Close PW supply valve
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECn002;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECn002;


//Report Event Set
SET;
S #_Report_Evnt_008;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if ECn002 stopped.
A(;
L 	#_DEV_STATE_ECn002;
L 	"dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k014;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Start Timer for PW Empty
TITLE =S014:: STEP-014:: : ACTION CODE
ab14: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Start Timer for PW Empty
A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L #_TIME_PW_EMPTY2;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k014;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[14];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k014;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k014: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[14]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S014:STEP-014::Begin Transition

A014: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// #TIME_PW_EMPTY2 expired?
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S014::STEP 014:TRAN 016: Timer expired
A #SQ_TIMER.Q;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S014:t016::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x016;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     15; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step15.

      JU    COMM; // Transition satisfied, Exit, go to next step
x016: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S014::STEP-014:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP015 STEP015 STEP015 STEP015 ST //
// STEP015 STEP015 STEP015 STEP015 ST //
// STEP015 STEP015 STEP015 STEP015 ST //
//----------------------------------------------------------------------------//
// Close HPCA supply valve and open PW line CS supply valve. 
Open VENT valve
//----------------------------------------------------------------------------//
TITLE =S015: STEP-15::MX_UO_CIP : Steaming PW inlet line

S015: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S015:STEP-15:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A015; // Exit Action code, Jump to A015 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L015; // Action number loaded, Jump to L015--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L015: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r015; //Wrong Action number
      JU    _015; //Action error handling
       JU    aa15; //ACTION-01
JU    ab15; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r015: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k015; //Exit
_015: NOP   0; // Action error handling
      JU    k015; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Close CA supply valve. ECn001 (STATE=STOPPED).
TITLE =S015:: STEP-015:: : ACTION CODE
aa15: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Close CA supply valve.
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECn001;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECn001;


//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if CA suppy valve closed.
A(;
L #_DEV_STATE_ECn001;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k015;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Timer TIME_PW_STEAM.
//Open PW line PS supply valve ECn002 (STATE=FLUSH, MEDIUM=CS(PW),RUN_TO_TIME=FALSE).
TITLE =S015:: STEP-015:: : ACTION CODE
ab15: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Open PW line CS supply valve
L "dbCONST_VAL".EM.EMC2.MEDIUM.CS_PW;  
T #_MEDIUM_ECn002;
SET;
S #_RUNtoTIME_ECn002;
L #_TIME_CS_STEAM;
T #_RunTimeECn001;

//Set ECn002 to substate FLUSH and start it.
L "dbCONST_VAL".EM.EMC2.SUBS.FLUSH;
T #_SUB_ECn002;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECn002;

// Open VENT valve
L "dbCONST_VAL".EM.EMC1.VALVE.VENT;
T #_VALVE_ECn001;
SET;
R #_RUNtoTIME_ECn001;
R #_AUXDRAIN_ECn001;
R #_AUXVENT_ECn001;

L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED; 
T #_SUB_ECn001;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECn001;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if ECn002 changed to substate FLUSH.
A(;
L #_DEV_STATE_ECn002;
L "dbCONST_VAL".EM.EMC2.SUBS.FLUSH;
==I;
);
//Verify if VENT valve opened.
A(;
L #_DEV_STATE_ECn001;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k015;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[15];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k015;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k015: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[15]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S015:STEP-015::Begin Transition

A015: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// TIME_PW_STEAM expired?
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S015::STEP 015:TRAN 017: Timer Expired?
//PW-CS FLUSH completed.
A(;
L 	#_DEV_STATE_ECn002;
L 	"dbCONST_VAL".EM.DEV_STATE.COMPLETE;
==I;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S015:t017::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x017;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     16; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step16.

      JU    COMM; // Transition satisfied, Exit, go to next step
x017: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S015::STEP-015:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP016 STEP016 STEP016 STEP016 ST //
// STEP016 STEP016 STEP016 STEP016 ST //
// STEP016 STEP016 STEP016 STEP016 ST //
//----------------------------------------------------------------------------//
// Log actual PW line steaming time.
Close PW line PS supply valve ECn002.
//----------------------------------------------------------------------------//
TITLE =S016: STEP-16::UO_MX_CIP : Stop Steaming PW inlet line

S016: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S016:STEP-16:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A016; // Exit Action code, Jump to A016 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L016; // Action number loaded, Jump to L016--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L016: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r016; //Wrong Action number
      JU    _016; //Action error handling
       JU    aa16; //ACTION-01
JU    ab16; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r016: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k016; //Exit
_016: NOP   0; // Action error handling
      JU    k016; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Close PW-line CS supply valve. (STATE=STOPPED)
//Log actual PW line steaming time.
TITLE =S016:: STEP-016:: : ACTION CODE
aa16: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Close PW line CS supply valve
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECn002;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECn002;

//Log actual PW line steaming time.
L #SQ_TIMER.PT;
T #_log_PWSteamTime;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_ECn002;
L 	"dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k016;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Start Timer for CS Steam
TITLE =S016:: STEP-016:: : ACTION CODE
ab16: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Start Timer for 10s.
A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L T#10S;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k016;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[16];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k016;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k016: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[16]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S016:STEP-016::Begin Transition

A016: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Timer 10s
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S016::STEP 016:TRAN 018: Timer
A #SQ_TIMER.Q;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S016:t018::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x018;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     17; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step17.

      JU    COMM; // Transition satisfied, Exit, go to next step
x018: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S016::STEP-016:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP017 STEP017 STEP017 STEP017 ST //
// STEP017 STEP017 STEP017 STEP017 ST //
// STEP017 STEP017 STEP017 STEP017 ST //
//----------------------------------------------------------------------------//
// Setup for WFI addition to vessel. Set ECn002 to substate SETUP with MEDIUM WFI.
Open outlet valve.
//----------------------------------------------------------------------------//
TITLE =S017: STEP-17::MX_UO_CIP : Wait for OPER to setup for WFI

S017: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S017:STEP-17:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A017; // Exit Action code, Jump to A017 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L017; // Action number loaded, Jump to L017--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L017: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r017; //Wrong Action number
      JU    _017; //Action error handling
       JU    aa17; //ACTION-01
JU    ab17; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r017: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k017; //Exit
_017: NOP   0; // Action error handling
      JU    k017; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //SETUP for WFI addition.
TITLE =S017:: STEP-017:: : ACTION CODE
aa17: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Set to MEDIUM WFI and start SETUP substate.
L "dbCONST_VAL".EM.EMC2.MEDIUM.WFI;
T #_MEDIUM_ECn002;
SET;
R #_RUNtoTIME_ECn002;

L "dbCONST_VAL".EM.EMC2.SUBS.SETUP;
T #_SUB_ECn002;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECn002;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if ECn002 changed to substate SETUP.
A(;
L #_DEV_STATE_ECn002;
L "dbCONST_VAL".EM.EMC2.SUBS.SETUP;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k017;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open Discharge
TITLE =S017:: STEP-017:: : ACTION CODE
ab17: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Open Discharge.
L 	"dbCONST_VAL".EM.EMV1.SUBS.DISCHARGE;
T 	#_SUB_EVn004;
L 	"dbCONST_VAL".EM.CMD.START;
T 	#_CMD_EVn004;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_EVn004;
L 	"dbCONST_VAL".EM.EMV1.SUBS.DISCHARGE;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k017;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[17];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k017;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k017: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[17]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S017:STEP-017::Begin Transition

A017: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// WFI addition SETUP completed.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S017::STEP 017:TRAN 019: Setup ready for WFI addition.
A(;
L 	#_DEV_STATE_ECn002;
L 	"dbCONST_VAL".EM.DEV_STATE.COMPLETE;
==I;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S017:t019::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x019;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     18; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step18.

      JU    COMM; // Transition satisfied, Exit, go to next step
x019: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S017::STEP-017:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP018 STEP018 STEP018 STEP018 ST //
// STEP018 STEP018 STEP018 STEP018 ST //
// STEP018 STEP018 STEP018 STEP018 ST //
//----------------------------------------------------------------------------//
// Divert to tank outlet drain line.
Open WFI supply valve to rinse vessel and open HPCA supply valve.
//----------------------------------------------------------------------------//
TITLE =S018: STEP-18::MX_UO_CIP : Commence WFI Rinse

S018: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S018:STEP-18:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A018; // Exit Action code, Jump to A018 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L018; // Action number loaded, Jump to L018--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L018: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r018; //Wrong Action number
      JU    _018; //Action error handling
       JU    aa18; //ACTION-01
JU    ab18; //ACTION-02
JU    ac18; //ACTION-03


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r018: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k018; //Exit
_018: NOP   0; // Action error handling
      JU    k018; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Divert to tank outlet drain line. (CIP_MX)
TITLE =S018:: STEP-018:: : ACTION CODE
aa18: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Set EXn014 to substate CIP_MX and start it.
L  "dbCONST_VAL".EM.EMX1.SUBS.CIP_MX;
T  #_SUB_EXn014;
L  "dbCONST_VAL".EM.CMD.START;
T  #_CMD_EXn014;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if EXn014 changed to substate CIP_MX.
A(;
L   #_DEV_STATE_EXn014;
L   "dbCONST_VAL".EM.EMX1.SUBS.CIP_MX;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k018;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open CA supply valve, ECn001 (STATE=VALVE OPENED, VALVE=HPCA, RUN_TO_TIME=FALSE, AUXDRAIN=FALSE).
TITLE =S018:: STEP-018:: : ACTION CODE
ab18: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Open CA supply valve.
L "dbCONST_VAL".EM.EMC1.VALVE.CA;
T #_VALVE_ECn001;
SET;
R #_AUXDRAIN_ECn001;
R #_AUXVENT_ECn001;

L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED;
T #_SUB_ECn001;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECn001;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if CA supply valve opened.
A(;
L #_DEV_STATE_ECn001;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k018;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     03; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open WFI supply valve, ECn002 (STATE=FLUSH, MEDIUM=WFI, RUN_TO_TIME=FALSE)
TITLE =S018:: STEP-018:: : ACTION CODE
ac18: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Set to MEDIUM WFI and open WFI supply valve
L "dbCONST_VAL".EM.EMC2.MEDIUM.WFI;  
T #_MEDIUM_ECn002;
SET;
S #_RUNtoTIME_ECn002;
L #_TIME_WFI_RINSE;
T #_RunTimeECn001;

L "dbCONST_VAL".EM.EMC2.SUBS.FLUSH;
T #_SUB_ECn002;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECn002;

//Start WFI rinse timer.
A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L #_#TIME_WFI_RINSE_Mx;
T #SQ_TIMER.PT;

//Report Event Set
SET;
S #_Report_Evnt_009;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if ECn002 changed to FLUSH substate.
A(;
L #_DEV_STATE_ECn002;
L "dbCONST_VAL".EM.EMC2.SUBS.FLUSH;
==I;
);
//Verify if Timer started.
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k018;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[18];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k018;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k018: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[18]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S018:STEP-018::Begin Transition

A018: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// TIME_WFI_RINSE_Mx expired?
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S018::STEP 018:TRAN 020: Timer Expired?
//Continue if FLUSH completed and TIME_WFI_RINSE_Mx finished.
A(;
L 	#_DEV_STATE_ECn002;
L 	"dbCONST_VAL".EM.DEV_STATE.COMPLETE;
==I;
);
A #SQ_TIMER.Q;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S018:t020::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x020;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     19; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step19.

      JU    COMM; // Transition satisfied, Exit, go to next step
x020: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S018::STEP-018:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP019 STEP019 STEP019 STEP019 ST //
// STEP019 STEP019 STEP019 STEP019 ST //
// STEP019 STEP019 STEP019 STEP019 ST //
//----------------------------------------------------------------------------//
// Log actual Mx WFI wash time.
Divert Wash to MMFLx.
//----------------------------------------------------------------------------//
TITLE =S019: STEP-19::UO_MX_CIP : Mx_WFI_Rinse Completed

S019: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S019:STEP-19:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A019; // Exit Action code, Jump to A019 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L019; // Action number loaded, Jump to L019--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L019: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r019; //Wrong Action number
      JU    _019; //Action error handling
       JU    aa19; //ACTION-01
JU    ab19; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r019: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k019; //Exit
_019: NOP   0; // Action error handling
      JU    k019; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual tank WFI rinse time. 
//Divert to MMFLx Filtration Line.
TITLE =S019:: STEP-019:: : ACTION CODE
aa19: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log actual tank WFI rinse time.
L #SQ_TIMER.PT;
T #_log_WFIRinseTime;

// Set EXn014 to substate CIP_MMFLX and start it.
L  "dbCONST_VAL".EM.EMX1.SUBS.CIP_MMFLX; 
T  #_SUB_EXn014;
L  "dbCONST_VAL".EM.CMD.START;
T  #_CMD_EXn014;

//Report Event Set
SET;
S #_Report_Evnt_008;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if EXn014 changed to substate CIP_MMFLX.
A(;
L   #_DEV_STATE_EXn014;
L   "dbCONST_VAL".EM.EMX1.SUBS.CIP_MMFLX;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k019;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// ////Start filtration line WFI rinse timer.
TITLE =S019:: STEP-019:: : ACTION CODE
ab19: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Start filtration line WFI rinse timer.
A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L #_TIME_WFI_RINSE_MMFLx;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k019;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[19];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k019;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k019: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[19]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S019:STEP-019::Begin Transition

A019: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// MMFLx WFI Rinse Completed
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S019::STEP 019:TRAN 021: MMFLx WFI Rinse Completed
A #SQ_TIMER.Q;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S019:t021::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x021;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     20; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step20.

      JU    COMM; // Transition satisfied, Exit, go to next step
x021: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S019::STEP-019:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP020 STEP020 STEP020 STEP020 ST //
// STEP020 STEP020 STEP020 STEP020 ST //
// STEP020 STEP020 STEP020 STEP020 ST //
//----------------------------------------------------------------------------//
// Log actual MMFLx WFI rinse time.
Close WFI supply valve ECn002.

Start timer to empty Tank, TIME_WFI_EMPTY.
//----------------------------------------------------------------------------//
TITLE =S020: STEP-20::UO_MX_CIP : WFI Rinse complete. Wait to empty vessel.

S020: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S020:STEP-20:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A020; // Exit Action code, Jump to A020 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L020; // Action number loaded, Jump to L020--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L020: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r020; //Wrong Action number
      JU    _020; //Action error handling
       JU    aa20; //ACTION-01
JU    ab20; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r020: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k020; //Exit
_020: NOP   0; // Action error handling
      JU    k020; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual filtration line WFI Rinse time.
//Close WFI supply valve and start WFI Empty timer.
//
TITLE =S020:: STEP-020:: : ACTION CODE
aa20: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Close WFI supply valve.
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECn002;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECn002;

//Log actual filtration line WFI Rinse time.
L #SQ_TIMER.PT;
T #_log_Fil_WFIRinseTime;

//Report Event Set
SET;
S #_Report_Evnt_010;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_ECn002;
L 	"dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);

      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k020;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Start timer to empty Tank.
TITLE =S020:: STEP-020:: : ACTION CODE
ab20: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Start Timer for WFI Empty
A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L #_TIME_WFI_EMPTY;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k020;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[20];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k020;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k020: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[20]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S020:STEP-020::Begin Transition

A020: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// TIME_WFI_EMPTY expired?
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S020::STEP 020:TRAN 022: Timer Expired?
A #SQ_TIMER.Q;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S020:t022::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x022;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     21; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step21.

      JU    COMM; // Transition satisfied, Exit, go to next step
x022: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S020::STEP-020:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP021 STEP021 STEP021 STEP021 ST //
// STEP021 STEP021 STEP021 STEP021 ST //
// STEP021 STEP021 STEP021 STEP021 ST //
//----------------------------------------------------------------------------//
// Close compressed air HPCA supply valve.
//----------------------------------------------------------------------------//
TITLE =S021: STEP-21::UO_MX_CIP : Close HPCA supply valve

S021: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S021:STEP-21:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A021; // Exit Action code, Jump to A021 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L021; // Action number loaded, Jump to L021--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L021: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r021; //Wrong Action number
      JU    _021; //Action error handling
       JU    aa21; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r021: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k021; //Exit
_021: NOP   0; // Action error handling
      JU    k021; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Close CA supply valve, ECn001 (STATE=STOPPED).
TITLE =S021:: STEP-021:: : ACTION CODE
aa21: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Close CA supply valve
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECn001;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECn001;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if HPCA supply valve closed.
A(;
L 	#_DEV_STATE_ECn001;
L 	"dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k021;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[21];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k021;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k021: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[21]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S021:STEP-021::Begin Transition

A021: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Jump
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S021::STEP 021:TRAN 023: Empty Transition
A M1.1; //Always High flag






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S021:t023::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x023;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     22; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step22.

      JU    COMM; // Transition satisfied, Exit, go to next step
x023: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S021::STEP-021:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP022 STEP022 STEP022 STEP022 ST //
// STEP022 STEP022 STEP022 STEP022 ST //
// STEP022 STEP022 STEP022 STEP022 ST //
//----------------------------------------------------------------------------//
// Log Mx CIP operation end time.
//----------------------------------------------------------------------------//
TITLE =S022: STEP-22::UO_MX_CIP : Log end time

S022: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S022:STEP-22:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A022; // Exit Action code, Jump to A022 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L022; // Action number loaded, Jump to L022--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L022: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r022; //Wrong Action number
      JU    _022; //Action error handling
       JU    aa22; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r022: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k022; //Exit
_022: NOP   0; // Action error handling
      JU    k022; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log Mx CIP operation end time.
TITLE =S022:: STEP-022:: : ACTION CODE
aa22: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Log Mx CIP operation end time.
L "dbCONST_VAL".CPU_TIME;
T #_log_MxCIPEnd;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1;

      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k022;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[22];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k022;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k022: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[22]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S022:STEP-022::Begin Transition

A022: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Jump
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S022::STEP 022:TRAN 024: Empty Transition
A M1.1; //Always High flag






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S022:t024::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x024;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     23; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step23.

      JU    COMM; // Transition satisfied, Exit, go to next step
x024: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S022::STEP-022:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP023 STEP023 STEP023 STEP023 ST //
// STEP023 STEP023 STEP023 STEP023 ST //
// STEP023 STEP023 STEP023 STEP023 ST //
//----------------------------------------------------------------------------//
// Set all used equipment modules to safe state:
EXn007 (STATE=STOPPED)
EXn014 (STATE=STOPPED)
EVn004 (STATE=STOPPED)
EAn010 (STATE=STOPPED)
ECn001 (STATE=STOPPED)
ECn002 (STATE=STOPPED)
//----------------------------------------------------------------------------//
TITLE =S023: STEP-23::UO_MX_CIP : Unit Operation Completed

S023: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S023:STEP-23:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A023; // Exit Action code, Jump to A023 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L023; // Action number loaded, Jump to L023--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L023: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r023; //Wrong Action number
      JU    _023; //Action error handling
       JU    aa23; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r023: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k023; //Exit
_023: NOP   0; // Action error handling
      JU    k023; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Set all used equipment modules to safe state.
TITLE =S023:: STEP-023:: : ACTION CODE
aa23: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Set all used equipment to safe state.
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_EXn007;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_EXn007;

L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_EXn014;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_EXn014;

L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_EVn004;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_EVn004;

//Stop EAn010
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_EAn010;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_EAn010;

// Open VENT valve
L "dbCONST_VAL".EM.EMC1.VALVE.VENT;
T #_VALVE_ECn001;
SET;
R #_RUNtoTIME_ECn001;
R #_AUXDRAIN_ECn001;
R #_AUXVENT_ECn001;

L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED; 
T #_SUB_ECn001;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECn001;

//Stop ECn002
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECn002;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECn002;


// Reset used flags
SET;
R #_confirm_no_try;
R #_confirm_try_again;
R #_prompt_no_PW;
R #_RUNtoTIME_ECn002;


//Reset Batch Report Event
SET;
R #_Report_Evnt_003;
R #_Report_Evnt_004;
R #_Report_Evnt_005;
R #_Report_Evnt_006;
R #_Report_Evnt_007;
R #_Report_Evnt_008;
R #_Report_Evnt_009;
R #_Report_Evnt_010;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1;

      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k023;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[23];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k023;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k023: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[23]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S023:STEP-023::Begin Transition

A023: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S023::STEP-023:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ SEQ FOOTER ================================//
// Common code to execute each scan:                                          //
//----------------------------------------------------------------------------//
TITLE =Sequencer Common Code, Execute in Each Scan

COMM: NOP   0;

NETWORK
TITLE =Retentive/Non Retentive Selectable Run timer

      CALL #sqRunTimer (
           TIME_H                   := #sqRunTimer.TIME_H,
           TIME_M                   := #sqRunTimer.TIME_M,
           TIME_S                   := #sqRunTimer.TIME_S,
           ENABLE                   := #sqRunTimer.ENABLE,
           RESET                    := #sqRunTimer.RESET,
           PAUSE                    := #sqRunTimer.PAUSE,
           NON_RET                  := #sqRunTimer.NON_RET,
           RMNG_H                   := #sqRunTimer.RMNG_H,
           RMNG_M                   := #sqRunTimer.RMNG_M,
           RMNG_S                   := #sqRunTimer.RMNG_S,
           TIME_EXPIRED             := #sqRunTimer.TIME_EXPIRED,
           TMR_RUNNG                := #sqRunTimer.TMR_RUNNG);

NETWORK
TITLE =Sequencer Step Timer

      CALL #sqStepTimer (
           IN                       := #sqStepTimer.IN,
           PT                       := "dbCONST_VAL".SQ_STEP_TIME,
           Q                        := #sqStepTimer.Q,
           ET                       := #sqStepTimer.ET);

NETWORK
TITLE =Sequencer Timer

 CALL #SQ_TIMER (
           IN                       := #SQ_TIMER.IN,
           PT                       := #SQ_TIMER.PT,
           Q                        := #SQ_TIMER.Q,
           ET                       := #SQ_TIMER.ET);

NETWORK
TITLE =General Assignments

      L     #sqSequencer.STEP.NumberNext;
      T     #NXT_STEP;
      T     #sqSequencer.STEP.NumberCurrent;
      T     #CURSTEP;

      A     #sqSequencer.STEP.Active;
      =     #S_ACTIVE;

      A     #sqSequencer.Error_Fault;
      =     #ERR_FAULT;

NETWORK
TITLE =Sequencer Finished

      AN    #OFF_IDLE;
      AN    #PAUSED;
      A     #sqSequencer.STEP.Done[23];
      =     #sqSequencer.Finished;
      =     #SQ_FINISHED;
      JCN   fnsd;
      L     "dbCONST_VAL".SQ_STATE.COMPLETE;
      T     #SQ_STATE;
      R     #PAUSED;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.Error_Fault;
fnsd: NOP   0;

      //----------------------------------------------------------------------//
      // Reset Finished flag if SQ OFF for Last step to scan:                 //
      //----------------------------------------------------------------------//
      A     #OFF_IDLE;
      AN    #sqSequencer.STEP.Done[23];
      AN    #sqSequencer.STEP.WithError[23];
      JCN   abrt;
      R     #sqSequencer.STEP.Finished;
      L     "dbCONST_VAL".SQ_STATE.ABORTED;
      T     #SQ_STATE;
      S     #OFF_IDLE;
      R     #PAUSED;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.Error_Fault;
      R     #PAUSED;
abrt: NOP   0;

//----------------------------------------------------------------------------//
// Visio Common Code Begin:                                                   //
//----------------------------------------------------------------------------//


//----------------------------------------------------------------------------//
// End of Sequencer:                                                          //
//----------------------------------------------------------------------------//
END_FUNCTION_BLOCK

