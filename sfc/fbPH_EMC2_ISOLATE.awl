//****************************************************************************************************
// Code generated by SFC Generator V1.13 on 08/09/17 10:39:49 by  David Paspa from File G:\Business\Synertec\K100411\Visio SFC\Snippet_Code\SEQ_HDR.txt
//****************************************************************************************************
//****************************************************************************************************

FUNCTION_BLOCK "fbEMC2_PH_CHARGE"
TITLE =TITLE =PH:EMC2_CHARGE

//
//
//------------------------------------------------------------------------------
//                   Copyright 2009 Synertec Asia (M) Sdn Bhd 
//------------------------------------------------------------------------------
// Title: PH_CHARGE
// 
// Description:
// Add specified amount of WFI or PW to the vessel Mx
//
//// SFC Revision History:
// Rev By               Date        CC         Note
// 0.6 Srinivas Nimmala  19-May-2010           Report Trigger Added    

// 0.5 Khairul Basar  20-Sep-2009 CC-09/023    SQ_TIMER is removed from Visio variable list.Timeout_alarm 
//                                             programmed.Start/Stop of EMM1 to request mass measurement.
//                                             Reset Pulse mode in S007.Mass_current compare logic with >=R
//                                             instead of ==R.
// 0.4 Khairul Basar  25-Aug-2009 CC-09/023    Change in Verific. & TRN code OR to AND. 
//                                             Change in the Last step.SQ_TIMER added.
// 0.3 David Paspa    24-Aug-2009 CC-09/023    Removed repeated setup steps.
// 0.2 Khairul Basar  18-Aug-2009              Added logic code
// 0.1 David Paspa    13-Jul-2009              SFC structural design
// 
//------------------------------------------------------------------------------
//// Sequencer Revision History:
//// Rev   By                  Date             Note
/////1.6   Khairul Basar       19-Nov-2009      Reset #sqSequencer.STEP.Active when STEP.Finished 
//// 1.5   Khairul Basar       15-Oct-2009      Placeholder inserted: "udtSQ_PH";
//// 1.4   Khairul Basar       06-Oct-2009      R #PAUSE;
//// 1.3   Khairul Basar       30-Sep-2009      SEQ_HDR change STEP-0 code deleted.
//// 1.2   Khairul Basar       26-Sep-2009      Ref2:
//// 1.1   Khairul Basar       23-Sep-2009      Ref1.
//// 1.0   Khairul Basar       20-Sep-2009      STEP.Finished flag reset by JUMP_MAN
//// 0.9   Khairul Basar       11-Sep-2009      SQ_TIMER added as VAR, declared in SEQ_FTR.
//// 0.8   Khairul Basar       09-Sep-2009      SqSequencer.Err_Fault is reset on 
////                                            STop cmd,Step-0 dead code deleted
////                                            from ACT & Verify.STP_FTR Step_withErr
////                                            flag STEP_NUM place holder configurred.
//// 0.7   Khairul Basar       28-Aug-2009      SQ_FINISHED OUT added again.
////                                            Deleted during major modification-1.
//// 0.6   Khairul Basar       23-Aug-2009      Major Modification-2
//// 0.5   Khairul Basar       23-Aug-2009      Major Modification-1
//// 0.4   Khairul Basar       18-Aug-2009      Reset Step done with/out error 
//bits using FC:RSET
//// 0.3   David Paspa         16-Aug-2009      Added placeholders for header name
////                                            and version and revision history. 
//// 0.2   Khairul Basar       11-Aug-2009      Retired external udt file for 
////                                            Static type parameters. All
////                                            parameters now IN, OUT or IN_OUT.
//// 0.1   Khairul Basar       12-Jun-2009      Initial design
////---------------------------------------------------------------------------
//Ref2:
//1.If SQ not finished Resume command will start Step timer, and redo the last action,
// verify the feedback.
//2."STEP.finished" flag is ANDed with "TRN_AND_JUMP" in the snippet file TRN_HDR.This is to avoid 
// checking of transition logic if STEP is not finished yet.
//3.MDCH, Load & transfer typo corrected.
//Ref1:
//1.SqStepTimer.IN is reset in STEP_FTR instead of resetting it in TRN_HDR.
//This is because TRN_HDTR is not included in the //Last step and StepTimer must reset in the last step.
//2.Reset all the timers when SQ stops.Reset done in SEQ_HDR.
//Also STEP-finished flag reset when SQ is OFF to 
//scan last step.


////Major Modification-1:
//1.sqStepTimer:All Verification Code must satisfy the condition finish step 
//action within STEP_DELAY time(40s).If step actions not finished within the time 
//period the error flag will raise High signal.Else timer will reset.
//2.sqRunTimer Added therefore can be used as retentive & non retentive.
//3.sqSequencer: This is re-structured UDT which is redefined the symbol names 
//as well as it gives more clearity.
//4.fcMODE and fcCMD functions are added to handle the mode & command 
//independently regardless of other logic.Two separate UDT udtMODE & udt 
//CMD assigned to Mode & command function respectively.
//5.MAN_JUMP programed for manual mode jump operation with or without Transition 
//code satisfied.TRN_AND_JUMP & NO_VERIFC are the parameters which will define 
//wheather verification code & transition code need to be checked to perform jump 
//operation.
//6.Auto to Manual switchover will be bumpless & will not affect step 
//operation.Manual to auto switchover can be used to resume Step action at 
//defined 
//Step number entered in STEPNO_JUMP.
////Major Modification-2:
//1.Any step error will send the Sequencer into Pause state.Code added in SEQ_HDR.Snippet Place holder for Bool-array 16 is deleted.
//// Parameters:
//// INPUTS
//// ======
//// SQ_CMD          Sequence command input inherited from object block
////                 0: off/idle
////                 1: start/initiate
////                 2: pause
////                 3: resume
////                 4: reserved (not programmed)
////                 5: reserved (not programmed)
////                 6: abort/go to last step
////                 7: acknowledge error/fault
//// SQ_MODE         Sequencer Auto/Manual input inherited from object block
////                 1: manual
////                 2: auto
//// 
//// INPUT/OUTPUTS
//// =============
//// SQ_JUMP_MAN     Allows manual jumping from one step to the next step. The
////                 manual jump flag is ORed with the transition process 
////                 condition and so can be used to bypass the condition if the 
////                 sequence will not progress.
////                 This input can also be used to jump to any step even 
////                 when no transition -> step linkage exists. This is only 
////                 possible when the SQ_MODE is in manual and SQ is in the 
////                 idle step. The step to jump to is specified in 
////                 SQ_man_jump_to_step (not accesseble by this FB in/out 
////                 interface but a separate DB memory location).
////
//// OUTPUTS
//// =======
//// SQ_STATE        The calculated state of the sequence
////                 0: off/idle
////                 1: start/initiated
////                 2: paused
////                 3: resumed
////                 4: reserved (wrong Mode)
////                 5: reserved (Wrong commad)
////                 6: aborted/go to last step
////                 7: acknowledged error/fault
//// CURSTEP         Current step being proccessed.
//// S_ACTIVE        If current step is active
//// NXT_STEP        Next step to jump to if transition condition is true
//// ERR_FAULT       True if any error/ or fault present 
//// PAUSED          True if step is paused
//// OFF_IDLE        Sequence is not running but ready for next SQ (in step=0)
// Define variables:
NAME : C2PCHAR
VERSION : 0.5


VAR_INPUT
  MODE : INT :=2;	
  SQ_CMD : INT :=0;
    _test_ISOLATE :BOOL ;	//An accurate mass reading is available
    _pulse_mode :BOOL ;	//select pulse mode
    _WFI_valve_state :INT ;	//WFI_valve_state
    _PW_valve_state :INT ;	//PW_valve_state
    _CS_PW_valve_state :INT ;	//CS_PW_valve_state
    _CS_WFI_valve_state :INT ;	//CS_WFI_valve_state
    _WFI_switch_state :INT ;	//switch_WFI
    _PW_switch_state :INT ;	//switch_PW 
    _mass_pulse :REAL ;	//mass_pulse
    _timeout :TIME ;	//timeout
    _mass_charge :REAL ;	//mass charge
    _medium :INT ;	//selected medium
	
END_VAR
VAR_OUTPUT
  SQ_STATE : INT ;	
  CURSTEP : INT ;	
  NXT_STEP : INT ;	
  S_ACTIVE : BOOL ;	
  ERR_FAULT : BOOL ;	
  PAUSED : BOOL ;	
  OFF_IDLE : BOOL ;
  SQ_FINISHED : BOOL ;	
    _CS_WFI_valve_cmd :INT ;	//CS_WFI_valve_cmd
    _CS_PW_valve_cmd :INT ;	//CS_PW_valve_cmd
    _WFI_valve_cmd :INT ;	//WFI_valve_cmd
    _PW_valve_cmd :INT ;	//PW_valve_cmd
    _timeout_alarm :BOOL ;	//Raise timeout_alarm 
	
END_VAR
VAR_IN_OUT
  STEPNO_JUMP : INT ;	
  MAN_JUMP : BOOL ;	
  NO_VERIFIC : BOOL ;	
  TRN_AND_JUMP : BOOL ;	
    _EMM1_cmd :INT ;	//EMM1 run command
    _mass_final :REAL ;	//mass_final
    _mass_current :REAL ;	//Mass from field EMM1
    _EMM1_substate :INT ;	//EMM1 measure /Tare substate
    _flowpath_PW :BOOL ;	//flowpath_PW/CS
    _flowpath_WFI :BOOL ;	//flowpath_WFI/CS_WFI
    _mass_full :REAL ;	//mass_full
    _mass_actual :REAL ;	//mass_actual
    _mass_initial :REAL ;	//mass_initial

END_VAR
VAR
  sqStepTimer : "TON";	
  sqRunTimer : "fbRunTimer";	
  sqSequencer : "udtSQ_PH";
  SQ_TIMER: "TON";
    _Report_End_Event :BOOL ;	//WFI End event log for report
    _Report_Start_Event :BOOL ;	//WFI Valve open command and event for report log
    _calc_confirm_tryagain :BOOL ;	//mass calculation error confirm try again
    _calc_confirm_abort :BOOL ;	//mass calculation error comfirm abort
    _Mass_calculation_fail :BOOL ;	//Mass calculation fail message to operator
    _confirm_PW :BOOL ;	//confirm_PW
    _confirm_WFI :BOOL ;	//confirm_WFI
    _prompt_PW :BOOL ;	//prompt_PW
    _prompt_WFI :BOOL ;	//prompt_WFI
    _confirm_tryagain :BOOL ;	//confirm_try again
    _confirm_abort :BOOL ;	//confirm_abort
    _prompt_abort_try :BOOL ;	//prompt_try_ or abort
 		
END_VAR
BEGIN
NETWORK
TITLE =Call Mode checking function

      L     #MODE; 
      T     #sqSequencer.MODE.current; 
      CALL "fcMODE" (
           Mode                     := #sqSequencer.MODE);



NETWORK
TITLE =Call Command checking function

      L     #SQ_CMD; 
      T     #sqSequencer.CMD.New; 

      CALL "fcCMD" (
           Comand                   := #sqSequencer.CMD);

NETWORK
TITLE =Sequencer Mode function

      A     #sqSequencer.MODE.changed; 
      JC    MDCH; // if Mode changed,jump to mode change function
      A     #sqSequencer.MODE.manual; 
      JC    MANU; 
      A     #sqSequencer.MODE.auto; 
      JC    AUTO; 
      A     #sqSequencer.MODE.oos; 
      JC    OOS; 
      A     #sqSequencer.MODE.wrong; 
      JC    WRMD; 
      JU    EMOD; 


NETWORK
TITLE =Mode change function
//On positive edge of mode change , this will execute once, only one cycle before 
//going to execute the selected mode function below.
MDCH: NOP   0; 
      SET   ; 
      R     #sqStepTimer.IN; 
      L     #sqSequencer.STEP.NumberCurrent; 
      T     #STEPNO_JUMP; 
      JU    EMOD; 
NETWORK
TITLE =Manual Mode function
// #TRN_AND_JUMP=can set/reset
// #sqSequencer.STEP.JumpCtrl=Can set/reset by #MAN_JUMP
//#NO_VERIFIC=Can set/ Reset
MANU: NOP   0; //Manual mode selected




      A     #MAN_JUMP; 
      =     #sqSequencer.STEP.JumpCtrl; 
      A     #MAN_JUMP; 
      JCN   EMOD; 

      L     #STEPNO_JUMP; 
      T     #sqSequencer.STEP.NumberNext; 
      T     #sqSequencer.STEP.NumberCurrent; 
      R     #MAN_JUMP; //Reset MAN_JUMP after loading user destination Step number
      R     #sqSequencer.STEP.Finished; //Reset finish flag, to execute next step action
      JU    EMOD; 
NETWORK
TITLE =Auto Mode function
// #TRN_AND_JUMP=always set 
// #sqSequencer.STEP.JumpCtrl=Always set
//#NO_VERIFIC=Alwasy Reset
AUTO: NOP   0; //Auto mode selected



      R     #MAN_JUMP; 
      S     #TRN_AND_JUMP; 
      R     #NO_VERIFIC; 
      S     #sqSequencer.STEP.JumpCtrl; //Always Set in auto mode

      L     #sqSequencer.STEP.NumberCurrent; 
      T     #STEPNO_JUMP; 
      JU    EMOD; 
NETWORK
TITLE =OOS mode function

OOS:  NOP   0; // Out of service
      JU    EMOD; 
WRMD: NOP   0; //Wrong mode selected
      S     #sqSequencer.Error_Fault; 
      L     "dbCONST_VAL".SQ_STATE.WRMODE; 
      T     #SQ_STATE; 

      JU    EMOD; 

NETWORK
TITLE =Mode not changedd

      NOP   0; 

NETWORK
TITLE =End Mode function

EMOD: NOP   0; 

NETWORK
TITLE =An error will Pause the Sequencer,Operator must Resume SQ to run

      A     #sqSequencer.Error_Fault; 
      AN    #sqSequencer.CMD.Changed; 
      JC    PAUS; 

NETWORK
TITLE =Command Action function 

      A     #sqSequencer.CMD.Changed; 
      JCN   CNCH; // if Command not changed,jump to end function
      R     #sqStepTimer.IN; 


      A     #sqSequencer.CMD.Start; 
      JC    STRT; 

      A     #sqSequencer.CMD.Stop; 
      JC    STOP; 


      A     #sqSequencer.CMD.Pause; 
      JC    PAUS; 

      A     #sqSequencer.CMD.Resume; 
      JC    RESM; 

      A     #sqSequencer.CMD.Abort; 
      JC    ABRT; 

      A     #sqSequencer.CMD.Ack; 
      JC    ACKN; 

      A     #sqSequencer.CMD.wrong; 
      JC    WCMD; 

      JU    ECMD; //Wrong command/not specified command




//End Comand function
NETWORK
TITLE =Comand -Start/Initiate action function 

STRT: NOP   0; 
      R     #OFF_IDLE; 
      R     #PAUSED; 
      R     #sqSequencer.STEP.Active; 
      R     #sqSequencer.STEP.Finished; 
      R     #sqSequencer.STEP.ActionFinished; 
      R     #sqSequencer.STEP.Jump; 
      R     #sqSequencer.STEP.TimerExpired; 
      R     #sqSequencer.STEP.Error_Fault; 
      R     #sqSequencer.STEP.ActionVerified; 
      R     #sqStepTimer.IN; 

      S     #sqRunTimer.RESET; 

//Load Initial step Number
      L     1; 
      T     #sqSequencer.STEP.Initial; 
      L     #sqSequencer.STEP.Initial; 
      T     #sqSequencer.STEP.NumberCurrent; 
      T     #sqSequencer.STEP.NumberNext; 




      L     "dbCONST_VAL".SQ_STATE.STARTED; 
      T     #SQ_STATE; 
//Reset Step done without error bits

      CALL "RSET" (
           S_BIT                    := #sqSequencer.STEP.Done[1],
           N                        := 11);//Upto final step


//Reset Step done with error bits
      CALL "RSET" (
           S_BIT                    := #sqSequencer.STEP.WithError[1],
           N                        := 11);//Upto final step




      JU    ECMD; //End Function


NETWORK
TITLE =Comand -Stop action function 

STOP: NOP   0; 
      S     #OFF_IDLE;
      R     #sqSequencer.STEP.Active; 
      R     #sqSequencer.STEP.Finished; 
      R     #sqSequencer.STEP.ActionFinished; 
      R     #sqSequencer.STEP.Jump; 
      R     #sqSequencer.STEP.TimerExpired; 
      R     #sqSequencer.STEP.Error_Fault; 
      R     #sqSequencer.Error_Fault; 
      R     #sqSequencer.STEP.ActionVerified; 
      R     #sqRunTimer.ENABLE;
      R     #sqStepTimer.IN;
      R     #SQ_TIMER.IN;
      R     #PAUSED; 


//Go to last step
      L     11;
      T     #sqSequencer.FinalStep; 
      L     #sqSequencer.FinalStep; 
      T     #sqSequencer.STEP.NumberNext; 
      L     "dbCONST_VAL".SQ_STATE.OFF_IDLE; 
      T     #SQ_STATE; 

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Pause action function 

PAUS: NOP   0; 
      S     #PAUSED; 
      R     #S_ACTIVE; 
      S     #sqRunTimer.PAUSE; 
      L     #sqSequencer.STEP.NumberCurrent; 
      T     #STEPNO_JUMP; 
      L     "dbCONST_VAL".SQ_STATE.PAUSED; 
      T     #SQ_STATE; 


      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Resume action function 


RESM: NOP   0; 
      R     #PAUSED; 
      R     #sqRunTimer.PAUSE; 
      R     #sqStepTimer.IN; //Reset Step timer
      L     "dbCONST_VAL".SQ_STATE.RESUMED; 
      T     #SQ_STATE; 

      A     #SQ_FINISHED;
      JC    ECMD;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;


      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Abort action function 

ABRT: NOP   0; 
      L     "dbCONST_VAL".SQ_STATE.ABORTED; 
      T     #SQ_STATE; 

      JC    STOP; //Stop & Abort same
      JU    ECMD; 


NETWORK
TITLE =Comand -Acknowledge action function 

ACKN: NOP   0; 
      R     #ERR_FAULT; 
      R     #sqSequencer.Error_Fault; 
      L     "dbCONST_VAL".SQ_STATE.ACKNOWLEDGED; 
      T     #SQ_STATE; 

      JU    ECMD; //End Function


NETWORK
TITLE =Comand -wrong/unavailable

WCMD: NOP   0; 

      S     #sqSequencer.Error_Fault; 
      L     "dbCONST_VAL".SQ_STATE.WRCMD; 
      T     #SQ_STATE; 

      JU    ECMD; 
NETWORK
TITLE =Comand -not changedd


CNCH: NOP   0; // Command not changed







NETWORK
TITLE =End command Function

ECMD: NOP   0; 


NETWORK
TITLE =Sequencer Step Jump distrubution list
//Sequencer step jump list: Load the step number to execute the step.
      L     #sqSequencer.STEP.NumberCurrent; 
      JL    SQER; // If Sequencer Step number invalid or greater than available number of step
      JU    S000; // Exceptional Error Handling
      JU    S001; // STEP-001:
JU    S002; // STEP-002:
JU    S003; // STEP-003:
JU    S004; // STEP-004:
JU    S005; // STEP-005:
JU    S006; // STEP-006:
JU    S007; // STEP-007:
JU    S008; // STEP-008:
JU    S009; // STEP-009:
JU    S010; // STEP-010:
JU    S011; // STEP-011:

//===========If Step number is Invalid or Out of Range=====================
SQER: NOP   0; 
      S     #sqSequencer.Error_Fault; 
      JU    COMM; // Jump to Common Sequencer code handling function

NETWORK
TITLE =STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP
//STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 
//STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 
//STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 
//STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 


NETWORK
TITLE =S000: STEP0::If Paused exit

S000: NOP   0; 

      
      JU    COMM; 






NETWORK
TITLE =S001: STEP-01::EMC2_PH_CHARGE : Request current mass in vessel

S001: NOP   0; 

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM; 


NETWORK
TITLE =S001:STEP-01:Begin Action

      A     #sqSequencer.STEP.Finished; 
      JC    A001; // Exit Action code, Jump to A001 Transition code
//============================Begin Step Action====================================

      A     #sqSequencer.STEP.Active; 
      JC    L001; // Action number loaded, Jump to L001--Step Action List
//============================Load Default/Initial Step action number===============
      S     #sqSequencer.STEP.Active; 
      S     #sqStepTimer.IN; 
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber; 

//===========================Step action list=======================================
//aann=mini Action step number(aa) inside main step number(nn)
//First Action aa00, Second action ab00, Third ac00, etc.

L001: NOP   0; 

      L     #sqSequencer.STEP.ActionNumber; 
      JL    r001; //Wrong Action number
      JU    _001; //Action error handling
       JU    aa01; //ACTION-01
JU    ab01; //ACTION-02


//More step action in the list can be inserted here, upto ab is tested

r001: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault; 
      JU    k001; //Exit
_001: NOP   0; // Action error handling
      JU    k001; // Exit




















NETWORK
TITLE =S001:: STEP-001:: : ACTION CODE
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//----------------------------------------------------------------------------
// ////Clear Out Old Setting
aa01: NOP   0; 
//------------------------------------------------------------------------
//ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT 
//------------------------------------------------------------------------
     L     0.000000e+000;
 T     #_mass_full; 

SET;
R #_Mass_calculation_fail;
R #_calc_confirm_tryagain;

//Reset report event for WFI Charge
SET;
R #_Report_End_Event;
R #_Report_Start_Event;

//------------------------------------------------------------------------
//VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY 
//------------------------------------------------------------------------
A M1.1;       
      S     #sqSequencer.STEP.ActionVerified; //Action verified
//==============================Action done===============================
      O     #sqSequencer.STEP.ActionVerified; 
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished; 






//==============================Get Ready after actio finished ===========
      A     #sqSequencer.STEP.ActionFinished; 
      JCN   k001;
// Reset Action finished flag, ready for next step action
      R     #sqSequencer.STEP.ActionVerified; 
      R     #sqSequencer.STEP.ActionFinished; 
//====================Load Next Step Action number=========================
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber; 






NETWORK
TITLE =S001:: STEP-001:: : ACTION CODE
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//----------------------------------------------------------------------------
// ////Calculate mass_full = mass_charge - mass_pulse (mass_pulse could be 0 or mass_pulse could be the same as mass_charge!).
ab01: NOP   0; 
//------------------------------------------------------------------------
//ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT 
//------------------------------------------------------------------------
     L     #_mass_charge; 
L     #_mass_pulse; 
 -R    ; 
T     #_mass_full;

//------------------------------------------------------------------------
//VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY 
//------------------------------------------------------------------------
A M1.1;       
      S     #sqSequencer.STEP.ActionVerified; //Action verified
//==============================Action done===============================
      O     #sqSequencer.STEP.ActionVerified; 
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished; 






//==============================Get Ready after actio finished ===========
      A     #sqSequencer.STEP.ActionFinished; 
      JCN   k001; 
// Reset Action finished flag, ready for next step action
      R     #sqSequencer.STEP.ActionVerified; 
      R     #sqSequencer.STEP.ActionFinished; 
//======================if ALL actions are finished========================
      SET   ; 
      S     #sqSequencer.STEP.Finished; 
      R     #sqSequencer.STEP.Active; 
      S     #sqSequencer.STEP.Done[01]; 
//=====================End Step action(s)==================================
      JU    k001; 
//===========================Finished Step Action(s)======================
k001: NOP   0; 

      A     #sqStepTimer.Q; 
      S     #sqSequencer.STEP.WithError[01]; // Step error flag
      S     #sqSequencer.Error_Fault; 
      R     #sqStepTimer.IN; 
NETWORK
TITLE =S001:STEP-001::Begin Transition

A001: NOP   0; 
     R     #sqStepTimer.IN; 






      A     #sqSequencer.STEP.Finished;      
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
TITLE =S001::STEP 001:TRAN 001: TRN Title
//------------------------------------------------------------------------------
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
//------------------------------------------------------------------------------
// TRN description
//------------------------------------------------------------------------------
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
//------------------------------------------------------------------------------
A(; 
 L     #_mass_full; 
 L     0.000000e+000;
 <R; 
  );





      A     #sqSequencer.STEP.JumpCtrl; 
      S     #sqSequencer.STEP.Jump; 

NETWORK
TITLE =S001:t001::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
//------------------------------------------------------------------------------
// Check the jump flag and jump to the next step if the transition condition is 
// true and has set the jump flag:
//------------------------------------------------------------------------------
      A     #sqSequencer.STEP.Jump; 
      JCN   x001; 

      R     #sqSequencer.STEP.Jump; 
      R     #sqSequencer.STEP.Finished; 

      L     02; // Load next STEPNO to jump to if transition satisfied 
      T     #sqSequencer.STEP.NumberNext; //Next Step02.

      JU    COMM; // Transition satisfied, Exit, go to next step
x001: NOP   0; 






      A     #sqSequencer.STEP.Finished;      
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
TITLE =S001::STEP 001:TRAN 004: Vessel mass measurement ready
//------------------------------------------------------------------------------
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
//------------------------------------------------------------------------------
// Vessel mass module indicates an accurate mass reading is available.
//------------------------------------------------------------------------------
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
//------------------------------------------------------------------------------
A M1.1;





      A     #sqSequencer.STEP.JumpCtrl; 
      S     #sqSequencer.STEP.Jump; 

NETWORK
TITLE =S001:t004::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
//------------------------------------------------------------------------------
// Check the jump flag and jump to the next step if the transition condition is 
// true and has set the jump flag:
//------------------------------------------------------------------------------
      A     #sqSequencer.STEP.Jump; 
      JCN   x004; 

      R     #sqSequencer.STEP.Jump; 
      R     #sqSequencer.STEP.Finished; 

      L     03; // Load next STEPNO to jump to if transition satisfied 
      T     #sqSequencer.STEP.NumberNext; //Next Step03.

      JU    COMM; // Transition satisfied, Exit, go to next step
x004: NOP   0; 






NETWORK
TITLE =S001::STEP-001:EXIT TRANSITION:
//--------------------------------------------------------------------------
// Jump to the common step progression code:
//--------------------------------------------------------------------------
      JU    COMM; 






NETWORK
TITLE =S002: STEP-02::EMC2_PH_CHARGE : Mass calculation fail

S002: NOP   0; 

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM; 


NETWORK
TITLE =S002:STEP-02:Begin Action

      A     #sqSequencer.STEP.Finished; 
      JC    A002; // Exit Action code, Jump to A002 Transition code
//============================Begin Step Action====================================

      A     #sqSequencer.STEP.Active; 
      JC    L002; // Action number loaded, Jump to L002--Step Action List
//============================Load Default/Initial Step action number===============
      S     #sqSequencer.STEP.Active; 
      S     #sqStepTimer.IN; 
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber; 

//===========================Step action list=======================================
//aann=mini Action step number(aa) inside main step number(nn)
//First Action aa00, Second action ab00, Third ac00, etc.

L002: NOP   0; 

      L     #sqSequencer.STEP.ActionNumber; 
      JL    r002; //Wrong Action number
      JU    _002; //Action error handling
       JU    aa02; //ACTION-01


//More step action in the list can be inserted here, upto ab is tested

r002: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault; 
      JU    k002; //Exit
_002: NOP   0; // Action error handling
      JU    k002; // Exit




















NETWORK
TITLE =S002:: STEP-002:: : ACTION CODE
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//----------------------------------------------------------------------------
// ////MASS CALCULATION FAIL TRY AGAIN
aa02: NOP   0; 
//------------------------------------------------------------------------
//ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT 
//------------------------------------------------------------------------
     SET;
S #_Mass_calculation_fail;

//------------------------------------------------------------------------
//VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY 
//------------------------------------------------------------------------
A M1.1;       
      S     #sqSequencer.STEP.ActionVerified; //Action verified
//==============================Action done===============================
      O     #sqSequencer.STEP.ActionVerified; 
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished; 






//==============================Get Ready after actio finished ===========
      A     #sqSequencer.STEP.ActionFinished; 
      JCN   k002; 
// Reset Action finished flag, ready for next step action
      R     #sqSequencer.STEP.ActionVerified; 
      R     #sqSequencer.STEP.ActionFinished; 
//======================if ALL actions are finished========================
      SET   ; 
      S     #sqSequencer.STEP.Finished; 
      R     #sqSequencer.STEP.Active; 
      S     #sqSequencer.STEP.Done[02]; 
//=====================End Step action(s)==================================
      JU    k002; 
//===========================Finished Step Action(s)======================
k002: NOP   0; 

      A     #sqStepTimer.Q; 
      S     #sqSequencer.STEP.WithError[02]; // Step error flag
      S     #sqSequencer.Error_Fault; 
      R     #sqStepTimer.IN; 
NETWORK
TITLE =S002:STEP-002::Begin Transition

A002: NOP   0; 
     R     #sqStepTimer.IN; 






      A     #sqSequencer.STEP.Finished;      
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
TITLE =S002::STEP 002:TRAN 002: Operator abort
//------------------------------------------------------------------------------
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
//------------------------------------------------------------------------------
// Operator decided to abort.
//------------------------------------------------------------------------------
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
//------------------------------------------------------------------------------
A #_calc_confirm_abort;





      A     #sqSequencer.STEP.JumpCtrl; 
      S     #sqSequencer.STEP.Jump; 

NETWORK
TITLE =S002:t002::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
//------------------------------------------------------------------------------
// Check the jump flag and jump to the next step if the transition condition is 
// true and has set the jump flag:
//------------------------------------------------------------------------------
      A     #sqSequencer.STEP.Jump; 
      JCN   x002; 

      R     #sqSequencer.STEP.Jump; 
      R     #sqSequencer.STEP.Finished; 

      L     11; // Load next STEPNO to jump to if transition satisfied 
      T     #sqSequencer.STEP.NumberNext; //Next Step11.

      JU    COMM; // Transition satisfied, Exit, go to next step
x002: NOP   0; 






      A     #sqSequencer.STEP.Finished;      
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
TITLE =S002::STEP 002:TRAN 003: Try again
//------------------------------------------------------------------------------
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
//------------------------------------------------------------------------------
// Operator decided to try again.
//------------------------------------------------------------------------------
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
//------------------------------------------------------------------------------
A #_calc_confirm_tryagain;





      A     #sqSequencer.STEP.JumpCtrl; 
      S     #sqSequencer.STEP.Jump; 

NETWORK
TITLE =S002:t003::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
//------------------------------------------------------------------------------
// Check the jump flag and jump to the next step if the transition condition is 
// true and has set the jump flag:
//------------------------------------------------------------------------------
      A     #sqSequencer.STEP.Jump; 
      JCN   x003; 

      R     #sqSequencer.STEP.Jump; 
      R     #sqSequencer.STEP.Finished; 

      L     01; // Load next STEPNO to jump to if transition satisfied 
      T     #sqSequencer.STEP.NumberNext; //Next Step01.

      JU    COMM; // Transition satisfied, Exit, go to next step
x003: NOP   0; 






NETWORK
TITLE =S002::STEP-002:EXIT TRANSITION:
//--------------------------------------------------------------------------
// Jump to the common step progression code:
//--------------------------------------------------------------------------
      JU    COMM; 






NETWORK
TITLE =S003: STEP-03::EMC2_PH_CHARGE : Store current vessel mass

S003: NOP   0; 

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM; 


NETWORK
TITLE =S003:STEP-03:Begin Action

      A     #sqSequencer.STEP.Finished; 
      JC    A003; // Exit Action code, Jump to A003 Transition code
//============================Begin Step Action====================================

      A     #sqSequencer.STEP.Active; 
      JC    L003; // Action number loaded, Jump to L003--Step Action List
//============================Load Default/Initial Step action number===============
      S     #sqSequencer.STEP.Active; 
      S     #sqStepTimer.IN; 
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber; 

//===========================Step action list=======================================
//aann=mini Action step number(aa) inside main step number(nn)
//First Action aa00, Second action ab00, Third ac00, etc.

L003: NOP   0; 

      L     #sqSequencer.STEP.ActionNumber; 
      JL    r003; //Wrong Action number
      JU    _003; //Action error handling
       JU    aa03; //ACTION-01
JU    ab03; //ACTION-02


//More step action in the list can be inserted here, upto ab is tested

r003: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault; 
      JU    k003; //Exit
_003: NOP   0; // Action error handling
      JU    k003; // Exit




















NETWORK
TITLE =S003:: STEP-003:: : ACTION CODE
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//----------------------------------------------------------------------------
// ////Clear Out Old Setting
aa03: NOP   0; 
//------------------------------------------------------------------------
//ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT 
//------------------------------------------------------------------------
     L     0.000000e+000; 
T     #_mass_initial;

//------------------------------------------------------------------------
//VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY 
//------------------------------------------------------------------------
A(; 
  L     #_mass_initial; 
  L     0.000000e+000; 
  ==R; 
  );       
      S     #sqSequencer.STEP.ActionVerified; //Action verified
//==============================Action done===============================
      O     #sqSequencer.STEP.ActionVerified; 
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished; 






//==============================Get Ready after actio finished ===========
      A     #sqSequencer.STEP.ActionFinished; 
      JCN   k003;
// Reset Action finished flag, ready for next step action
      R     #sqSequencer.STEP.ActionVerified; 
      R     #sqSequencer.STEP.ActionFinished; 
//====================Load Next Step Action number=========================
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber; 






NETWORK
TITLE =S003:: STEP-003:: : ACTION CODE
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//----------------------------------------------------------------------------
// ////Store Initial Mass
ab03: NOP   0; 
//------------------------------------------------------------------------
//ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT 
//------------------------------------------------------------------------
     L     #_mass_current; 
  T     #_mass_initial;

//------------------------------------------------------------------------
//VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY 
//------------------------------------------------------------------------
A M1.1;       
      S     #sqSequencer.STEP.ActionVerified; //Action verified
//==============================Action done===============================
      O     #sqSequencer.STEP.ActionVerified; 
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished; 






//==============================Get Ready after actio finished ===========
      A     #sqSequencer.STEP.ActionFinished; 
      JCN   k003; 
// Reset Action finished flag, ready for next step action
      R     #sqSequencer.STEP.ActionVerified; 
      R     #sqSequencer.STEP.ActionFinished; 
//======================if ALL actions are finished========================
      SET   ; 
      S     #sqSequencer.STEP.Finished; 
      R     #sqSequencer.STEP.Active; 
      S     #sqSequencer.STEP.Done[03]; 
//=====================End Step action(s)==================================
      JU    k003; 
//===========================Finished Step Action(s)======================
k003: NOP   0; 

      A     #sqStepTimer.Q; 
      S     #sqSequencer.STEP.WithError[03]; // Step error flag
      S     #sqSequencer.Error_Fault; 
      R     #sqStepTimer.IN; 
NETWORK
TITLE =S003:STEP-003::Begin Transition

A003: NOP   0; 
     R     #sqStepTimer.IN; 






      A     #sqSequencer.STEP.Finished;      
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
TITLE =S003::STEP 003:TRAN 005: Jump
//------------------------------------------------------------------------------
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
//------------------------------------------------------------------------------
// Jump unconditionally
//------------------------------------------------------------------------------
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
//------------------------------------------------------------------------------
A M1.1; //Always High flag





      A     #sqSequencer.STEP.JumpCtrl; 
      S     #sqSequencer.STEP.Jump; 

NETWORK
TITLE =S003:t005::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
//------------------------------------------------------------------------------
// Check the jump flag and jump to the next step if the transition condition is 
// true and has set the jump flag:
//------------------------------------------------------------------------------
      A     #sqSequencer.STEP.Jump; 
      JCN   x005; 

      R     #sqSequencer.STEP.Jump; 
      R     #sqSequencer.STEP.Finished; 

      L     04; // Load next STEPNO to jump to if transition satisfied 
      T     #sqSequencer.STEP.NumberNext; //Next Step04.

      JU    COMM; // Transition satisfied, Exit, go to next step
x005: NOP   0; 






NETWORK
TITLE =S003::STEP-003:EXIT TRANSITION:
//--------------------------------------------------------------------------
// Jump to the common step progression code:
//--------------------------------------------------------------------------
      JU    COMM; 






NETWORK
TITLE =S004: STEP-04::EMC2_PH_CHARGE : Open selected duty supply valve

S004: NOP   0; 

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM; 


NETWORK
TITLE =S004:STEP-04:Begin Action

      A     #sqSequencer.STEP.Finished; 
      JC    A004; // Exit Action code, Jump to A004 Transition code
//============================Begin Step Action====================================

      A     #sqSequencer.STEP.Active; 
      JC    L004; // Action number loaded, Jump to L004--Step Action List
//============================Load Default/Initial Step action number===============
      S     #sqSequencer.STEP.Active; 
      S     #sqStepTimer.IN; 
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber; 

//===========================Step action list=======================================
//aann=mini Action step number(aa) inside main step number(nn)
//First Action aa00, Second action ab00, Third ac00, etc.

L004: NOP   0; 

      L     #sqSequencer.STEP.ActionNumber; 
      JL    r004; //Wrong Action number
      JU    _004; //Action error handling
       JU    aa04; //ACTION-01
JU    ab04; //ACTION-02


//More step action in the list can be inserted here, upto ab is tested

r004: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault; 
      JU    k004; //Exit
_004: NOP   0; // Action error handling
      JU    k004; // Exit




















NETWORK
TITLE =S004:: STEP-004:: : ACTION CODE
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//----------------------------------------------------------------------------
// //Open WFI or PW supply valve.
aa04: NOP   0; 
//------------------------------------------------------------------------
//ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT 
//------------------------------------------------------------------------
     SET;
R #_confirm_tryagain;
R #_prompt_abort_try;
R #_timeout_alarm;
//Enable flow path and Open slected WFI/PW valve
L #_medium;
L "dbCONST_VAL".EM.EMC2.MEDIUM.WFI;
==I;
JC v021;

L #_medium;
L "dbCONST_VAL".EM.EMC2.MEDIUM.CS_WFI;
==I;
JC v022;


L #_medium;
L "dbCONST_VAL".EM.EMC2.MEDIUM.PW;
==I;
JC v023;

L #_medium;
L "dbCONST_VAL".EM.EMC2.MEDIUM.CS_PW;
==I;
JC v024;



v021:NOP 0;
SET;
S #_flowpath_WFI;
L  "dbCONST_VAL".CM.CMD_VALVE.OPEN ;
T #_WFI_valve_cmd;
JU en02;


v022:NOP 0;
SET;
S #_flowpath_WFI;
L  "dbCONST_VAL".CM.CMD_VALVE.OPEN ;
T #_CS_WFI_valve_cmd;
JU en02;


v023:NOP 0;
SET;
S #_flowpath_PW;
L  "dbCONST_VAL".CM.CMD_VALVE.OPEN ;
T #_PW_valve_cmd;
JU en02;


v024:NOP 0;
SET;
S #_flowpath_PW;
L  "dbCONST_VAL".CM.CMD_VALVE.OPEN ;
T #_CS_PW_valve_cmd;
JU en02;

en02: NOP 0;


//Log Report Start for WFI Charge
SET;
S #_Report_Start_Event;

//------------------------------------------------------------------------
//VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY 
//------------------------------------------------------------------------
//Verify state open of selected WFI/PW valve
A(;
L #_medium;
L "dbCONST_VAL".EM.EMC2.MEDIUM.WFI;
==I;
);
A(;
L  "dbCONST_VAL".CM.POSx_DEV_STATE.OPENED ;
L #_WFI_valve_state;
==I;
);
O;
A(;
L #_medium;
L "dbCONST_VAL".EM.EMC2.MEDIUM.CS_WFI;
==I;
);
A(;
L  "dbCONST_VAL".CM.POSx_DEV_STATE.OPENED ;
L #_CS_WFI_valve_state;
==I;
);
O;
A(;
L #_medium;
L "dbCONST_VAL".EM.EMC2.MEDIUM.PW;
==I;
);
A(;
L  "dbCONST_VAL".CM.POSx_DEV_STATE.OPENED ;
L #_PW_valve_state;
==I;
);
O;
A(;
L #_medium;
L "dbCONST_VAL".EM.EMC2.MEDIUM.CS_PW;
==I;
);
A(;
L  "dbCONST_VAL".CM.POSx_DEV_STATE.OPENED ;
L #_CS_PW_valve_state;
==I;
);       
      S     #sqSequencer.STEP.ActionVerified; //Action verified
//==============================Action done===============================
      O     #sqSequencer.STEP.ActionVerified; 
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished; 






//==============================Get Ready after actio finished ===========
      A     #sqSequencer.STEP.ActionFinished; 
      JCN   k004;
// Reset Action finished flag, ready for next step action
      R     #sqSequencer.STEP.ActionVerified; 
      R     #sqSequencer.STEP.ActionFinished; 
//====================Load Next Step Action number=========================
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber; 






NETWORK
TITLE =S004:: STEP-004:: : ACTION CODE
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//----------------------------------------------------------------------------
// //Start the sequence timer.
ab04: NOP   0; 
//------------------------------------------------------------------------
//ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT 
//------------------------------------------------------------------------
     L #_timeout;
T #SQ_TIMER.PT;

SET;
S #SQ_TIMER.IN;


//------------------------------------------------------------------------
//VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY 
//------------------------------------------------------------------------
A M1.1;
       
      S     #sqSequencer.STEP.ActionVerified; //Action verified
//==============================Action done===============================
      O     #sqSequencer.STEP.ActionVerified; 
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished; 






//==============================Get Ready after actio finished ===========
      A     #sqSequencer.STEP.ActionFinished; 
      JCN   k004; 
// Reset Action finished flag, ready for next step action
      R     #sqSequencer.STEP.ActionVerified; 
      R     #sqSequencer.STEP.ActionFinished; 
//======================if ALL actions are finished========================
      SET   ; 
      S     #sqSequencer.STEP.Finished; 
      R     #sqSequencer.STEP.Active; 
      S     #sqSequencer.STEP.Done[04]; 
//=====================End Step action(s)==================================
      JU    k004; 
//===========================Finished Step Action(s)======================
k004: NOP   0; 

      A     #sqStepTimer.Q; 
      S     #sqSequencer.STEP.WithError[04]; // Step error flag
      S     #sqSequencer.Error_Fault; 
      R     #sqStepTimer.IN; 
NETWORK
TITLE =S004:STEP-004::Begin Transition

A004: NOP   0; 
     R     #sqStepTimer.IN; 






      A     #sqSequencer.STEP.Finished;      
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
TITLE =S004::STEP 004:TRAN 006: Wait for mass endpoint
//------------------------------------------------------------------------------
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
//------------------------------------------------------------------------------
// Jump if current vessel mass is mass_initial + mass_full
//------------------------------------------------------------------------------
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
//------------------------------------------------------------------------------
L #_mass_initial;
L #_mass_full;
+R;
L #_mass_current;
<=R;







      A     #sqSequencer.STEP.JumpCtrl; 
      S     #sqSequencer.STEP.Jump; 

NETWORK
TITLE =S004:t006::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
//------------------------------------------------------------------------------
// Check the jump flag and jump to the next step if the transition condition is 
// true and has set the jump flag:
//------------------------------------------------------------------------------
      A     #sqSequencer.STEP.Jump; 
      JCN   x006; 

      R     #sqSequencer.STEP.Jump; 
      R     #sqSequencer.STEP.Finished; 

      L     06; // Load next STEPNO to jump to if transition satisfied 
      T     #sqSequencer.STEP.NumberNext; //Next Step06.

      JU    COMM; // Transition satisfied, Exit, go to next step
x006: NOP   0; 






      A     #sqSequencer.STEP.Finished;      
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
TITLE =S004::STEP 004:TRAN 007: Check timeout exceeded
//------------------------------------------------------------------------------
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
//------------------------------------------------------------------------------
// Jump if the timeout period has expired.
//------------------------------------------------------------------------------
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
//------------------------------------------------------------------------------
A #SQ_TIMER.Q;





      A     #sqSequencer.STEP.JumpCtrl; 
      S     #sqSequencer.STEP.Jump; 

NETWORK
TITLE =S004:t007::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
//------------------------------------------------------------------------------
// Check the jump flag and jump to the next step if the transition condition is 
// true and has set the jump flag:
//------------------------------------------------------------------------------
      A     #sqSequencer.STEP.Jump; 
      JCN   x007; 

      R     #sqSequencer.STEP.Jump; 
      R     #sqSequencer.STEP.Finished; 

      L     05; // Load next STEPNO to jump to if transition satisfied 
      T     #sqSequencer.STEP.NumberNext; //Next Step05.

      JU    COMM; // Transition satisfied, Exit, go to next step
x007: NOP   0; 






NETWORK
TITLE =S004::STEP-004:EXIT TRANSITION:
//--------------------------------------------------------------------------
// Jump to the common step progression code:
//--------------------------------------------------------------------------
      JU    COMM; 






NETWORK
TITLE =S005: STEP-05::EMC2_PH_CHARGE : Vessel filling timeout. Wait for operator retry.

S005: NOP   0; 

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM; 


NETWORK
TITLE =S005:STEP-05:Begin Action

      A     #sqSequencer.STEP.Finished; 
      JC    A005; // Exit Action code, Jump to A005 Transition code
//============================Begin Step Action====================================

      A     #sqSequencer.STEP.Active; 
      JC    L005; // Action number loaded, Jump to L005--Step Action List
//============================Load Default/Initial Step action number===============
      S     #sqSequencer.STEP.Active; 
      S     #sqStepTimer.IN; 
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber; 

//===========================Step action list=======================================
//aann=mini Action step number(aa) inside main step number(nn)
//First Action aa00, Second action ab00, Third ac00, etc.

L005: NOP   0; 

      L     #sqSequencer.STEP.ActionNumber; 
      JL    r005; //Wrong Action number
      JU    _005; //Action error handling
       JU    aa05; //ACTION-01


//More step action in the list can be inserted here, upto ab is tested

r005: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault; 
      JU    k005; //Exit
_005: NOP   0; // Action error handling
      JU    k005; // Exit




















NETWORK
TITLE =S005:: STEP-005:: : ACTION CODE
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//----------------------------------------------------------------------------
// //Action Description
aa05: NOP   0; 
//------------------------------------------------------------------------
//ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT 
//------------------------------------------------------------------------
     //Close selected WFI/PW valve

L #_medium;
L "dbCONST_VAL".EM.EMC2.MEDIUM.WFI;
==I;
JC v041;

L #_medium;
L "dbCONST_VAL".EM.EMC2.MEDIUM.CS_WFI;
==I;
JC v042;

L #_medium;
L "dbCONST_VAL".EM.EMC2.MEDIUM.PW;
==I;
JC v043;

L #_medium;
L "dbCONST_VAL".EM.EMC2.MEDIUM.CS_PW;
==I;
JC v044;



v041:NOP 0;
L  "dbCONST_VAL".CM.CMD_VALVE.CLOSE ;
T #_WFI_valve_cmd;
JU en04;


v042:NOP 0;
L  "dbCONST_VAL".CM.CMD_VALVE.CLOSE;
T #_CS_WFI_valve_cmd;
JU en04;


v043:NOP 0;
L  "dbCONST_VAL".CM.CMD_VALVE.CLOSE;
T #_PW_valve_cmd;
JU en04;


v044:NOP 0;
L  "dbCONST_VAL".CM.CMD_VALVE.CLOSE;
T #_CS_PW_valve_cmd;
JU en04;

en04: NOP 0;	

SET;
S #_prompt_abort_try;
S #_timeout_alarm;
R #SQ_TIMER.IN;

//------------------------------------------------------------------------
//VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY 
//------------------------------------------------------------------------
//Verify state open of selected WFI/PW valve
A(;
L #_medium;
L "dbCONST_VAL".EM.EMC2.MEDIUM.WFI;
==I;
);
A(;
L  "dbCONST_VAL".CM.POSx_DEV_STATE.CLOSED ;
L #_WFI_valve_state;
==I;
);
O;
A(;
L #_medium;
L "dbCONST_VAL".EM.EMC2.MEDIUM.CS_WFI;
==I;
);
A(;
L  "dbCONST_VAL".CM.POSx_DEV_STATE.CLOSED ;
L #_CS_WFI_valve_state;
==I;
);
O;
A(;
L #_medium;
L "dbCONST_VAL".EM.EMC2.MEDIUM.PW;
==I;
);
A(;
L  "dbCONST_VAL".CM.POSx_DEV_STATE.CLOSED ;
L #_PW_valve_state;
==I;
);
O;
A(;
L #_medium;
L "dbCONST_VAL".EM.EMC2.MEDIUM.CS_PW;
==I;
);
A(;
L  "dbCONST_VAL".CM.POSx_DEV_STATE.CLOSED ;
L #_CS_PW_valve_state;
==I;
);
       
      S     #sqSequencer.STEP.ActionVerified; //Action verified
//==============================Action done===============================
      O     #sqSequencer.STEP.ActionVerified; 
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished; 






//==============================Get Ready after actio finished ===========
      A     #sqSequencer.STEP.ActionFinished; 
      JCN   k005; 
// Reset Action finished flag, ready for next step action
      R     #sqSequencer.STEP.ActionVerified; 
      R     #sqSequencer.STEP.ActionFinished; 
//======================if ALL actions are finished========================
      SET   ; 
      S     #sqSequencer.STEP.Finished; 
      R     #sqSequencer.STEP.Active; 
      S     #sqSequencer.STEP.Done[05]; 
//=====================End Step action(s)==================================
      JU    k005; 
//===========================Finished Step Action(s)======================
k005: NOP   0; 

      A     #sqStepTimer.Q; 
      S     #sqSequencer.STEP.WithError[05]; // Step error flag
      S     #sqSequencer.Error_Fault; 
      R     #sqStepTimer.IN; 
NETWORK
TITLE =S005:STEP-005::Begin Transition

A005: NOP   0; 
     R     #sqStepTimer.IN; 






      A     #sqSequencer.STEP.Finished;      
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
TITLE =S005::STEP 005:TRAN 008: Operator abort
//------------------------------------------------------------------------------
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
//------------------------------------------------------------------------------
// Operator decided to abort.
//------------------------------------------------------------------------------
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
//------------------------------------------------------------------------------
A #_confirm_abort;





      A     #sqSequencer.STEP.JumpCtrl; 
      S     #sqSequencer.STEP.Jump; 

NETWORK
TITLE =S005:t008::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
//------------------------------------------------------------------------------
// Check the jump flag and jump to the next step if the transition condition is 
// true and has set the jump flag:
//------------------------------------------------------------------------------
      A     #sqSequencer.STEP.Jump; 
      JCN   x008; 

      R     #sqSequencer.STEP.Jump; 
      R     #sqSequencer.STEP.Finished; 

      L     11; // Load next STEPNO to jump to if transition satisfied 
      T     #sqSequencer.STEP.NumberNext; //Next Step11.

      JU    COMM; // Transition satisfied, Exit, go to next step
x008: NOP   0; 






      A     #sqSequencer.STEP.Finished;      
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
TITLE =S005::STEP 005:TRAN 009: Try again
//------------------------------------------------------------------------------
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
//------------------------------------------------------------------------------
// Operator decided to try again.
//------------------------------------------------------------------------------
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
//------------------------------------------------------------------------------
A #_confirm_tryagain;





      A     #sqSequencer.STEP.JumpCtrl; 
      S     #sqSequencer.STEP.Jump; 

NETWORK
TITLE =S005:t009::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
//------------------------------------------------------------------------------
// Check the jump flag and jump to the next step if the transition condition is 
// true and has set the jump flag:
//------------------------------------------------------------------------------
      A     #sqSequencer.STEP.Jump; 
      JCN   x009; 

      R     #sqSequencer.STEP.Jump; 
      R     #sqSequencer.STEP.Finished; 

      L     04; // Load next STEPNO to jump to if transition satisfied 
      T     #sqSequencer.STEP.NumberNext; //Next Step04.

      JU    COMM; // Transition satisfied, Exit, go to next step
x009: NOP   0; 






NETWORK
TITLE =S005::STEP-005:EXIT TRANSITION:
//--------------------------------------------------------------------------
// Jump to the common step progression code:
//--------------------------------------------------------------------------
      JU    COMM; 






NETWORK
TITLE =S006: STEP-06::EMC2_PH_CHARGE : Close supply valve

S006: NOP   0; 

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM; 


NETWORK
TITLE =S006:STEP-06:Begin Action

      A     #sqSequencer.STEP.Finished; 
      JC    A006; // Exit Action code, Jump to A006 Transition code
//============================Begin Step Action====================================

      A     #sqSequencer.STEP.Active; 
      JC    L006; // Action number loaded, Jump to L006--Step Action List
//============================Load Default/Initial Step action number===============
      S     #sqSequencer.STEP.Active; 
      S     #sqStepTimer.IN; 
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber; 

//===========================Step action list=======================================
//aann=mini Action step number(aa) inside main step number(nn)
//First Action aa00, Second action ab00, Third ac00, etc.

L006: NOP   0; 

      L     #sqSequencer.STEP.ActionNumber; 
      JL    r006; //Wrong Action number
      JU    _006; //Action error handling
       JU    aa06; //ACTION-01


//More step action in the list can be inserted here, upto ab is tested

r006: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault; 
      JU    k006; //Exit
_006: NOP   0; // Action error handling
      JU    k006; // Exit




















NETWORK
TITLE =S006:: STEP-006:: : ACTION CODE
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//----------------------------------------------------------------------------
// //Action Description
aa06: NOP   0; 
//------------------------------------------------------------------------
//ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT 
//------------------------------------------------------------------------
     
//Close selected WFI/PW valve


L  "dbCONST_VAL".CM.CMD_VALVE.CLOSE ;
T #_WFI_valve_cmd;
T #_CS_WFI_valve_cmd;
T #_PW_valve_cmd;
T #_CS_PW_valve_cmd;



//------------------------------------------------------------------------
//VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY 
//------------------------------------------------------------------------

//Verify state open of selected WFI/PW valve

A(;
L  "dbCONST_VAL".CM.POSx_DEV_STATE.CLOSED ;
L #_WFI_valve_state;
==I;
);
A(;
L  "dbCONST_VAL".CM.POSx_DEV_STATE.CLOSED ;
L #_CS_WFI_valve_state;
==I;
);
A(;
L  "dbCONST_VAL".CM.POSx_DEV_STATE.CLOSED ;
L #_PW_valve_state;
==I;
);
A(;
L  "dbCONST_VAL".CM.POSx_DEV_STATE.CLOSED ;
L #_CS_PW_valve_state;
==I;
);
       
      S     #sqSequencer.STEP.ActionVerified; //Action verified
//==============================Action done===============================
      O     #sqSequencer.STEP.ActionVerified; 
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished; 






//==============================Get Ready after actio finished ===========
      A     #sqSequencer.STEP.ActionFinished; 
      JCN   k006; 
// Reset Action finished flag, ready for next step action
      R     #sqSequencer.STEP.ActionVerified; 
      R     #sqSequencer.STEP.ActionFinished; 
//======================if ALL actions are finished========================
      SET   ; 
      S     #sqSequencer.STEP.Finished; 
      R     #sqSequencer.STEP.Active; 
      S     #sqSequencer.STEP.Done[06]; 
//=====================End Step action(s)==================================
      JU    k006; 
//===========================Finished Step Action(s)======================
k006: NOP   0; 

      A     #sqStepTimer.Q; 
      S     #sqSequencer.STEP.WithError[06]; // Step error flag
      S     #sqSequencer.Error_Fault; 
      R     #sqStepTimer.IN; 
NETWORK
TITLE =S006:STEP-006::Begin Transition

A006: NOP   0; 
     R     #sqStepTimer.IN; 






      A     #sqSequencer.STEP.Finished;      
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
TITLE =S006::STEP 006:TRAN 010: TRN Title
//------------------------------------------------------------------------------
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
//------------------------------------------------------------------------------
// Jump, no pulse mass
//------------------------------------------------------------------------------
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
//------------------------------------------------------------------------------
L #_mass_pulse;
 L 0.0;
==R;





      A     #sqSequencer.STEP.JumpCtrl; 
      S     #sqSequencer.STEP.Jump; 

NETWORK
TITLE =S006:t010::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
//------------------------------------------------------------------------------
// Check the jump flag and jump to the next step if the transition condition is 
// true and has set the jump flag:
//------------------------------------------------------------------------------
      A     #sqSequencer.STEP.Jump; 
      JCN   x010; 

      R     #sqSequencer.STEP.Jump; 
      R     #sqSequencer.STEP.Finished; 

      L     09; // Load next STEPNO to jump to if transition satisfied 
      T     #sqSequencer.STEP.NumberNext; //Next Step09.

      JU    COMM; // Transition satisfied, Exit, go to next step
x010: NOP   0; 






      A     #sqSequencer.STEP.Finished;      
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
TITLE =S006::STEP 006:TRAN 011: TRN Title
//------------------------------------------------------------------------------
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
//------------------------------------------------------------------------------
// Jump if mass_pulse > 0
//------------------------------------------------------------------------------
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
//------------------------------------------------------------------------------
L #_mass_pulse;
 L 0.0;
>R;






      A     #sqSequencer.STEP.JumpCtrl; 
      S     #sqSequencer.STEP.Jump; 

NETWORK
TITLE =S006:t011::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
//------------------------------------------------------------------------------
// Check the jump flag and jump to the next step if the transition condition is 
// true and has set the jump flag:
//------------------------------------------------------------------------------
      A     #sqSequencer.STEP.Jump; 
      JCN   x011; 

      R     #sqSequencer.STEP.Jump; 
      R     #sqSequencer.STEP.Finished; 

      L     07; // Load next STEPNO to jump to if transition satisfied 
      T     #sqSequencer.STEP.NumberNext; //Next Step07.

      JU    COMM; // Transition satisfied, Exit, go to next step
x011: NOP   0; 






NETWORK
TITLE =S006::STEP-006:EXIT TRANSITION:
//--------------------------------------------------------------------------
// Jump to the common step progression code:
//--------------------------------------------------------------------------
      JU    COMM; 






NETWORK
TITLE =S007: STEP-07::EMC2_PH_CHARGE : Open supply valve in Pulse mode

S007: NOP   0; 

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM; 


NETWORK
TITLE =S007:STEP-07:Begin Action

      A     #sqSequencer.STEP.Finished; 
      JC    A007; // Exit Action code, Jump to A007 Transition code
//============================Begin Step Action====================================

      A     #sqSequencer.STEP.Active; 
      JC    L007; // Action number loaded, Jump to L007--Step Action List
//============================Load Default/Initial Step action number===============
      S     #sqSequencer.STEP.Active; 
      S     #sqStepTimer.IN; 
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber; 

//===========================Step action list=======================================
//aann=mini Action step number(aa) inside main step number(nn)
//First Action aa00, Second action ab00, Third ac00, etc.

L007: NOP   0; 

      L     #sqSequencer.STEP.ActionNumber; 
      JL    r007; //Wrong Action number
      JU    _007; //Action error handling
       JU    aa07; //ACTION-01


//More step action in the list can be inserted here, upto ab is tested

r007: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault; 
      JU    k007; //Exit
_007: NOP   0; // Action error handling
      JU    k007; // Exit




















NETWORK
TITLE =S007:: STEP-007:: : ACTION CODE
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//----------------------------------------------------------------------------
// //Open WFI/PW supply valve in Pulse mode
aa07: NOP   0; 
//------------------------------------------------------------------------
//ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT 
//------------------------------------------------------------------------
     
//Open slected WFI/PW valve


L #_medium;
L "dbCONST_VAL".EM.EMC2.MEDIUM.WFI;
==I;
JC v081;

L #_medium;
L "dbCONST_VAL".EM.EMC2.MEDIUM.PW;
==I;
JC v082;


v081:NOP 0;
SET;
S #_pulse_mode;

L "dbCONST_VAL".CM.CMD_VALVE.OPEN ;
T #_WFI_valve_cmd;
JU en08;



v082:NOP 0;
SET;
S #_pulse_mode;

L  "dbCONST_VAL".CM.CMD_VALVE.OPEN ;
T #_PW_valve_cmd;
JU en08;


en08: NOP 0;	




//------------------------------------------------------------------------
//VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY 
//------------------------------------------------------------------------
A M1.1;       
      S     #sqSequencer.STEP.ActionVerified; //Action verified
//==============================Action done===============================
      O     #sqSequencer.STEP.ActionVerified; 
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished; 






//==============================Get Ready after actio finished ===========
      A     #sqSequencer.STEP.ActionFinished; 
      JCN   k007; 
// Reset Action finished flag, ready for next step action
      R     #sqSequencer.STEP.ActionVerified; 
      R     #sqSequencer.STEP.ActionFinished; 
//======================if ALL actions are finished========================
      SET   ; 
      S     #sqSequencer.STEP.Finished; 
      R     #sqSequencer.STEP.Active; 
      S     #sqSequencer.STEP.Done[07]; 
//=====================End Step action(s)==================================
      JU    k007; 
//===========================Finished Step Action(s)======================
k007: NOP   0; 

      A     #sqStepTimer.Q; 
      S     #sqSequencer.STEP.WithError[07]; // Step error flag
      S     #sqSequencer.Error_Fault; 
      R     #sqStepTimer.IN; 
NETWORK
TITLE =S007:STEP-007::Begin Transition

A007: NOP   0; 
     R     #sqStepTimer.IN; 






      A     #sqSequencer.STEP.Finished;      
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
TITLE =S007::STEP 007:TRAN 012: Wait for mass endpoint
//------------------------------------------------------------------------------
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
//------------------------------------------------------------------------------
// Jump if current vessel mass is mass_initial + mass_charge

//------------------------------------------------------------------------------
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
//------------------------------------------------------------------------------
L #_mass_initial;
L #_mass_charge;
+R;
L #_mass_current;
<=R;






      A     #sqSequencer.STEP.JumpCtrl; 
      S     #sqSequencer.STEP.Jump; 

NETWORK
TITLE =S007:t012::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
//------------------------------------------------------------------------------
// Check the jump flag and jump to the next step if the transition condition is 
// true and has set the jump flag:
//------------------------------------------------------------------------------
      A     #sqSequencer.STEP.Jump; 
      JCN   x012; 

      R     #sqSequencer.STEP.Jump; 
      R     #sqSequencer.STEP.Finished; 

      L     08; // Load next STEPNO to jump to if transition satisfied 
      T     #sqSequencer.STEP.NumberNext; //Next Step08.

      JU    COMM; // Transition satisfied, Exit, go to next step
x012: NOP   0; 






NETWORK
TITLE =S007::STEP-007:EXIT TRANSITION:
//--------------------------------------------------------------------------
// Jump to the common step progression code:
//--------------------------------------------------------------------------
      JU    COMM; 






NETWORK
TITLE =S008: STEP-08::EMC2_PH_CHARGE : Close supply valve

S008: NOP   0; 

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM; 


NETWORK
TITLE =S008:STEP-08:Begin Action

      A     #sqSequencer.STEP.Finished; 
      JC    A008; // Exit Action code, Jump to A008 Transition code
//============================Begin Step Action====================================

      A     #sqSequencer.STEP.Active; 
      JC    L008; // Action number loaded, Jump to L008--Step Action List
//============================Load Default/Initial Step action number===============
      S     #sqSequencer.STEP.Active; 
      S     #sqStepTimer.IN; 
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber; 

//===========================Step action list=======================================
//aann=mini Action step number(aa) inside main step number(nn)
//First Action aa00, Second action ab00, Third ac00, etc.

L008: NOP   0; 

      L     #sqSequencer.STEP.ActionNumber; 
      JL    r008; //Wrong Action number
      JU    _008; //Action error handling
       JU    aa08; //ACTION-01


//More step action in the list can be inserted here, upto ab is tested

r008: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault; 
      JU    k008; //Exit
_008: NOP   0; // Action error handling
      JU    k008; // Exit




















NETWORK
TITLE =S008:: STEP-008:: : ACTION CODE
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//----------------------------------------------------------------------------
// //Action Description
aa08: NOP   0; 
//------------------------------------------------------------------------
//ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT 
//------------------------------------------------------------------------
     //Close selected WFI/PW valve

L  "dbCONST_VAL".CM.CMD_VALVE.CLOSE ;
T #_WFI_valve_cmd;
T #_CS_WFI_valve_cmd;
T #_PW_valve_cmd;
T #_CS_PW_valve_cmd;

SET;
R #_pulse_mode;


//------------------------------------------------------------------------
//VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY 
//------------------------------------------------------------------------

//Verify state open of selected WFI/PW valve
A(;
L  "dbCONST_VAL".CM.POSx_DEV_STATE.CLOSED ;
L #_WFI_valve_state;
==I;
);
A(;
L  "dbCONST_VAL".CM.POSx_DEV_STATE.CLOSED ;
L #_CS_WFI_valve_state;
==I;
);
A(;
L  "dbCONST_VAL".CM.POSx_DEV_STATE.CLOSED ;
L #_PW_valve_state;
==I;
);
A(;
L  "dbCONST_VAL".CM.POSx_DEV_STATE.CLOSED ;
L #_CS_PW_valve_state;
==I;
);
       
      S     #sqSequencer.STEP.ActionVerified; //Action verified
//==============================Action done===============================
      O     #sqSequencer.STEP.ActionVerified; 
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished; 






//==============================Get Ready after actio finished ===========
      A     #sqSequencer.STEP.ActionFinished; 
      JCN   k008; 
// Reset Action finished flag, ready for next step action
      R     #sqSequencer.STEP.ActionVerified; 
      R     #sqSequencer.STEP.ActionFinished; 
//======================if ALL actions are finished========================
      SET   ; 
      S     #sqSequencer.STEP.Finished; 
      R     #sqSequencer.STEP.Active; 
      S     #sqSequencer.STEP.Done[08]; 
//=====================End Step action(s)==================================
      JU    k008; 
//===========================Finished Step Action(s)======================
k008: NOP   0; 

      A     #sqStepTimer.Q; 
      S     #sqSequencer.STEP.WithError[08]; // Step error flag
      S     #sqSequencer.Error_Fault; 
      R     #sqStepTimer.IN; 
NETWORK
TITLE =S008:STEP-008::Begin Transition

A008: NOP   0; 
     R     #sqStepTimer.IN; 






      A     #sqSequencer.STEP.Finished;      
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
TITLE =S008::STEP 008:TRAN 013: TRN Title
//------------------------------------------------------------------------------
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
//------------------------------------------------------------------------------
// Jump unconditionally
//------------------------------------------------------------------------------
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
//------------------------------------------------------------------------------
A M1.1; //Always High flag





      A     #sqSequencer.STEP.JumpCtrl; 
      S     #sqSequencer.STEP.Jump; 

NETWORK
TITLE =S008:t013::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
//------------------------------------------------------------------------------
// Check the jump flag and jump to the next step if the transition condition is 
// true and has set the jump flag:
//------------------------------------------------------------------------------
      A     #sqSequencer.STEP.Jump; 
      JCN   x013; 

      R     #sqSequencer.STEP.Jump; 
      R     #sqSequencer.STEP.Finished; 

      L     09; // Load next STEPNO to jump to if transition satisfied 
      T     #sqSequencer.STEP.NumberNext; //Next Step09.

      JU    COMM; // Transition satisfied, Exit, go to next step
x013: NOP   0; 






NETWORK
TITLE =S008::STEP-008:EXIT TRANSITION:
//--------------------------------------------------------------------------
// Jump to the common step progression code:
//--------------------------------------------------------------------------
      JU    COMM; 






NETWORK
TITLE =S009: STEP-09::EMC2_PH_CHARGE : Request charged mass in vessel

S009: NOP   0; 

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM; 


NETWORK
TITLE =S009:STEP-09:Begin Action

      A     #sqSequencer.STEP.Finished; 
      JC    A009; // Exit Action code, Jump to A009 Transition code
//============================Begin Step Action====================================

      A     #sqSequencer.STEP.Active; 
      JC    L009; // Action number loaded, Jump to L009--Step Action List
//============================Load Default/Initial Step action number===============
      S     #sqSequencer.STEP.Active; 
      S     #sqStepTimer.IN; 
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber; 

//===========================Step action list=======================================
//aann=mini Action step number(aa) inside main step number(nn)
//First Action aa00, Second action ab00, Third ac00, etc.

L009: NOP   0; 

      L     #sqSequencer.STEP.ActionNumber; 
      JL    r009; //Wrong Action number
      JU    _009; //Action error handling
       JU    aa09; //ACTION-01


//More step action in the list can be inserted here, upto ab is tested

r009: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault; 
      JU    k009; //Exit
_009: NOP   0; // Action error handling
      JU    k009; // Exit




















NETWORK
TITLE =S009:: STEP-009:: : ACTION CODE
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//----------------------------------------------------------------------------
// //Action Description
aa09: NOP   0; 
//------------------------------------------------------------------------
//ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT 
//------------------------------------------------------------------------
     // Commented out  instructions per request - Steve L. 13-Oct-2009
// L "dbCONST_VAL". EM.EMM1.SUBS.MEASURE;  
//T #_EMM1_substate;

//Start EMM1 Phase.
//L "dbCONST_VAL".EM.CMD.START; 
//T #_EMM1_cmd;


//------------------------------------------------------------------------
//VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY 
//------------------------------------------------------------------------
A M1.1; //Always High flag       
      S     #sqSequencer.STEP.ActionVerified; //Action verified
//==============================Action done===============================
      O     #sqSequencer.STEP.ActionVerified; 
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished; 






//==============================Get Ready after actio finished ===========
      A     #sqSequencer.STEP.ActionFinished; 
      JCN   k009; 
// Reset Action finished flag, ready for next step action
      R     #sqSequencer.STEP.ActionVerified; 
      R     #sqSequencer.STEP.ActionFinished; 
//======================if ALL actions are finished========================
      SET   ; 
      S     #sqSequencer.STEP.Finished; 
      R     #sqSequencer.STEP.Active; 
      S     #sqSequencer.STEP.Done[09]; 
//=====================End Step action(s)==================================
      JU    k009; 
//===========================Finished Step Action(s)======================
k009: NOP   0; 

      A     #sqStepTimer.Q; 
      S     #sqSequencer.STEP.WithError[09]; // Step error flag
      S     #sqSequencer.Error_Fault; 
      R     #sqStepTimer.IN; 
NETWORK
TITLE =S009:STEP-009::Begin Transition

A009: NOP   0; 
     R     #sqStepTimer.IN; 






      A     #sqSequencer.STEP.Finished;      
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
TITLE =S009::STEP 009:TRAN 014: Vessel mass measurement ready
//------------------------------------------------------------------------------
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
//------------------------------------------------------------------------------
// Vessel mass module indicates an accurate mass reading is available.
//------------------------------------------------------------------------------
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
//------------------------------------------------------------------------------
A #_mass_ready;





      A     #sqSequencer.STEP.JumpCtrl; 
      S     #sqSequencer.STEP.Jump; 

NETWORK
TITLE =S009:t014::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
//------------------------------------------------------------------------------
// Check the jump flag and jump to the next step if the transition condition is 
// true and has set the jump flag:
//------------------------------------------------------------------------------
      A     #sqSequencer.STEP.Jump; 
      JCN   x014; 

      R     #sqSequencer.STEP.Jump; 
      R     #sqSequencer.STEP.Finished; 

      L     10; // Load next STEPNO to jump to if transition satisfied 
      T     #sqSequencer.STEP.NumberNext; //Next Step10.

      JU    COMM; // Transition satisfied, Exit, go to next step
x014: NOP   0; 






NETWORK
TITLE =S009::STEP-009:EXIT TRANSITION:
//--------------------------------------------------------------------------
// Jump to the common step progression code:
//--------------------------------------------------------------------------
      JU    COMM; 






NETWORK
TITLE =S010: STEP-10::EMC2_PH_CHARGE : Calculate mass added

S010: NOP   0; 

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM; 


NETWORK
TITLE =S010:STEP-10:Begin Action

      A     #sqSequencer.STEP.Finished; 
      JC    A010; // Exit Action code, Jump to A010 Transition code
//============================Begin Step Action====================================

      A     #sqSequencer.STEP.Active; 
      JC    L010; // Action number loaded, Jump to L010--Step Action List
//============================Load Default/Initial Step action number===============
      S     #sqSequencer.STEP.Active; 
      S     #sqStepTimer.IN; 
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber; 

//===========================Step action list=======================================
//aann=mini Action step number(aa) inside main step number(nn)
//First Action aa00, Second action ab00, Third ac00, etc.

L010: NOP   0; 

      L     #sqSequencer.STEP.ActionNumber; 
      JL    r010; //Wrong Action number
      JU    _010; //Action error handling
       JU    aa10; //ACTION-01
JU    ab10; //ACTION-02


//More step action in the list can be inserted here, upto ab is tested

r010: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault; 
      JU    k010; //Exit
_010: NOP   0; // Action error handling
      JU    k010; // Exit




















NETWORK
TITLE =S010:: STEP-010:: : ACTION CODE
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//----------------------------------------------------------------------------
// ////Clear Out Old Setting
aa10: NOP   0; 
//------------------------------------------------------------------------
//ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT 
//------------------------------------------------------------------------
     L     0.000000e+000; 
  T     #_mass_actual;

//------------------------------------------------------------------------
//VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY 
//------------------------------------------------------------------------
A(; 
 L     #_mass_actual; 
 L     0.000000e+000; 
 ==R; 
 );       
      S     #sqSequencer.STEP.ActionVerified; //Action verified
//==============================Action done===============================
      O     #sqSequencer.STEP.ActionVerified; 
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished; 






//==============================Get Ready after actio finished ===========
      A     #sqSequencer.STEP.ActionFinished; 
      JCN   k010;
// Reset Action finished flag, ready for next step action
      R     #sqSequencer.STEP.ActionVerified; 
      R     #sqSequencer.STEP.ActionFinished; 
//====================Load Next Step Action number=========================
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber; 






NETWORK
TITLE =S010:: STEP-010:: : ACTION CODE
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//----------------------------------------------------------------------------
// ////Calculate Actual Charge
ab10: NOP   0; 
//------------------------------------------------------------------------
//ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT 
//------------------------------------------------------------------------
     L #_mass_current; 
 T #_mass_final; 
 L #_mass_initial; 
 -R; 
 T #_mass_actual;

//------------------------------------------------------------------------
//VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY 
//------------------------------------------------------------------------
A(; 
L  #_mass_actual; 
L  0.000000e+000; 
>R; 
 );       
      S     #sqSequencer.STEP.ActionVerified; //Action verified
//==============================Action done===============================
      O     #sqSequencer.STEP.ActionVerified; 
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished; 






//==============================Get Ready after actio finished ===========
      A     #sqSequencer.STEP.ActionFinished; 
      JCN   k010; 
// Reset Action finished flag, ready for next step action
      R     #sqSequencer.STEP.ActionVerified; 
      R     #sqSequencer.STEP.ActionFinished; 
//======================if ALL actions are finished========================
      SET   ; 
      S     #sqSequencer.STEP.Finished; 
      R     #sqSequencer.STEP.Active; 
      S     #sqSequencer.STEP.Done[10]; 
//=====================End Step action(s)==================================
      JU    k010; 
//===========================Finished Step Action(s)======================
k010: NOP   0; 

      A     #sqStepTimer.Q; 
      S     #sqSequencer.STEP.WithError[10]; // Step error flag
      S     #sqSequencer.Error_Fault; 
      R     #sqStepTimer.IN; 
NETWORK
TITLE =S010:STEP-010::Begin Transition

A010: NOP   0; 
     R     #sqStepTimer.IN; 






      A     #sqSequencer.STEP.Finished;      
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
TITLE =S010::STEP 010:TRAN 015: TRN Title
//------------------------------------------------------------------------------
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN
//------------------------------------------------------------------------------
// Jump
//------------------------------------------------------------------------------
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDI
//------------------------------------------------------------------------------
A M1.1; //Always High flag





      A     #sqSequencer.STEP.JumpCtrl; 
      S     #sqSequencer.STEP.Jump; 

NETWORK
TITLE =S010:t015::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
//------------------------------------------------------------------------------
// Check the jump flag and jump to the next step if the transition condition is 
// true and has set the jump flag:
//------------------------------------------------------------------------------
      A     #sqSequencer.STEP.Jump; 
      JCN   x015; 

      R     #sqSequencer.STEP.Jump; 
      R     #sqSequencer.STEP.Finished; 

      L     11; // Load next STEPNO to jump to if transition satisfied 
      T     #sqSequencer.STEP.NumberNext; //Next Step11.

      JU    COMM; // Transition satisfied, Exit, go to next step
x015: NOP   0; 






NETWORK
TITLE =S010::STEP-010:EXIT TRANSITION:
//--------------------------------------------------------------------------
// Jump to the common step progression code:
//--------------------------------------------------------------------------
      JU    COMM; 






NETWORK
TITLE =S011: STEP-11::EMC2_PH_CHARGE : Last Step

S011: NOP   0; 

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM; 


NETWORK
TITLE =S011:STEP-11:Begin Action

      A     #sqSequencer.STEP.Finished; 
      JC    A011; // Exit Action code, Jump to A011 Transition code
//============================Begin Step Action====================================

      A     #sqSequencer.STEP.Active; 
      JC    L011; // Action number loaded, Jump to L011--Step Action List
//============================Load Default/Initial Step action number===============
      S     #sqSequencer.STEP.Active; 
      S     #sqStepTimer.IN; 
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber; 

//===========================Step action list=======================================
//aann=mini Action step number(aa) inside main step number(nn)
//First Action aa00, Second action ab00, Third ac00, etc.

L011: NOP   0; 

      L     #sqSequencer.STEP.ActionNumber; 
      JL    r011; //Wrong Action number
      JU    _011; //Action error handling
       JU    aa11; //ACTION-01


//More step action in the list can be inserted here, upto ab is tested

r011: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault; 
      JU    k011; //Exit
_011: NOP   0; // Action error handling
      JU    k011; // Exit




















NETWORK
TITLE =S011:: STEP-011:: : ACTION CODE
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION 
//----------------------------------------------------------------------------
// //Last Step
aa11: NOP   0; 
//------------------------------------------------------------------------
//ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT 
//------------------------------------------------------------------------
     SET;
R #_confirm_abort;
R #_timeout_alarm;
R #_prompt_abort_try;
R #_confirm_PW;
R #_confirm_WFI;
R #_prompt_PW;
R #_prompt_WFI;
R #_confirm_tryagain;
R #_Mass_calculation_fail;
R #SQ_TIMER.IN;

//Log Report End for WFI Charge
SET;
S #_Report_End_Event;

SET;
R #_Report_Start_Event;

//------------------------------------------------------------------------
//VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY 
//------------------------------------------------------------------------
A M1.1; //Always High flag       
      S     #sqSequencer.STEP.ActionVerified; //Action verified
//==============================Action done===============================
      O     #sqSequencer.STEP.ActionVerified; 
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished; 






//==============================Get Ready after actio finished ===========
      A     #sqSequencer.STEP.ActionFinished; 
      JCN   k011; 
// Reset Action finished flag, ready for next step action
      R     #sqSequencer.STEP.ActionVerified; 
      R     #sqSequencer.STEP.ActionFinished; 
//======================if ALL actions are finished========================
      SET   ; 
      S     #sqSequencer.STEP.Finished; 
      R     #sqSequencer.STEP.Active; 
      S     #sqSequencer.STEP.Done[11]; 
//=====================End Step action(s)==================================
      JU    k011; 
//===========================Finished Step Action(s)======================
k011: NOP   0; 

      A     #sqStepTimer.Q; 
      S     #sqSequencer.STEP.WithError[11]; // Step error flag
      S     #sqSequencer.Error_Fault; 
      R     #sqStepTimer.IN; 
NETWORK
TITLE =S011:STEP-011::Begin Transition

A011: NOP   0; 
     R     #sqStepTimer.IN; 






NETWORK
TITLE =S011::STEP-011:EXIT TRANSITION:
//--------------------------------------------------------------------------
// Jump to the common step progression code:
//--------------------------------------------------------------------------
      JU    COMM; 







NETWORK
TITLE =Sequencer Common Code, Execute in Each Scan

COMM: NOP   0; 


NETWORK
TITLE =Retentive/Non Retentive Selectable Run timer

      CALL #sqRunTimer (
           TIME_H                   := #sqRunTimer.TIME_H,
           TIME_M                   := #sqRunTimer.TIME_M,
           TIME_S                   := #sqRunTimer.TIME_S,
           ENABLE                   := #sqRunTimer.ENABLE,
           RESET                    := #sqRunTimer.RESET,
           PAUSE                    := #sqRunTimer.PAUSE,
           NON_RET                  := #sqRunTimer.NON_RET,
           RMNG_H                   := #sqRunTimer.RMNG_H,
           RMNG_M                   := #sqRunTimer.RMNG_M,
           RMNG_S                   := #sqRunTimer.RMNG_S,
           TIME_EXPIRED             := #sqRunTimer.TIME_EXPIRED,
           TMR_RUNNG                := #sqRunTimer.TMR_RUNNG);


NETWORK
TITLE =Sequencer Step Timer

      CALL #sqStepTimer (
           IN                       := #sqStepTimer.IN,
           PT                       := "dbCONST_VAL".SQ_STEP_TIME,
           Q                        := #sqStepTimer.Q,
           ET                       := #sqStepTimer.ET);


NETWORK
TITLE =Sequencer Timer

 CALL #SQ_TIMER (
           IN                       := #SQ_TIMER.IN,
           PT                       := #SQ_TIMER.PT,
           Q                        := #SQ_TIMER.Q,
           ET                       := #SQ_TIMER.ET);


NETWORK
TITLE =General Assignments

      L     #sqSequencer.STEP.NumberNext; 
      T     #NXT_STEP; 
      T     #sqSequencer.STEP.NumberCurrent; 
      T     #CURSTEP; 


      A     #sqSequencer.STEP.Active; 
      =     #S_ACTIVE; 


      A     #sqSequencer.Error_Fault; 
      =     #ERR_FAULT; 

NETWORK
TITLE =Sequencer Finished


      AN    #OFF_IDLE;
      AN    #PAUSED;
      A     #sqSequencer.STEP.Done[11];
      =     #sqSequencer.Finished;
      =     #SQ_FINISHED;
      JCN   fnsd;
      L     "dbCONST_VAL".SQ_STATE.COMPLETE;
      T     #SQ_STATE;
      R     #PAUSED; 
      R     #sqSequencer.STEP.Error_Fault; 
      R     #sqSequencer.Error_Fault; 
fnsd: NOP   0;


//Reset Finished flag if SQ OFF for Last step to scan.
      A     #OFF_IDLE;
      AN    #sqSequencer.STEP.Done[11];
      AN    #sqSequencer.STEP.WithError[11];
      JCN   abrt;
      R     #sqSequencer.STEP.Finished;
      L     "dbCONST_VAL".SQ_STATE.ABORTED;
      T     #SQ_STATE;
      S     #OFF_IDLE;
      R     #PAUSED; 
      R     #sqSequencer.STEP.Error_Fault; 
      R     #sqSequencer.Error_Fault; 
      R     #PAUSED;
abrt: NOP   0;





//========================Visio Common Code Begin===========================


//========================Visio Common Code End===========================
//End of Sequencer





END_FUNCTION_BLOCK


