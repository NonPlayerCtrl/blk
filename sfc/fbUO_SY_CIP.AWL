//****************************************************************************************************
// Code generated by SFC Generator V1.13 on 02/04/18 16:20:02 by  MAC_IZZ from File D:\Rieckermann\old\Visio SFC\Snippet_Code\SEQ_HDR.txt
//****************************************************************************************************
//****************************************************************************************************

//================================ SEQ HEADER ================================//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Title: UO_SY_CIP                                                       //
//                                                                            //
// Description:                                                               //
// Unit Operation for setup of storage vessel equipment                                                        //
//                                                                            //
// // SFC Revision History:
// Rev By               Date        CC         Note
// 0.1 Gerald Kontriner 14-Sep-2009            SFC structural design                                                       //
//----------------------------------------------------------------------------//
// Sequencer Revision History:                                                //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      05-Jan-2018 NA        Reboot for S7-1500.             //
// 1.6 Khairul Basar    19-Nov-2009 NA        Reset #sqSequencer.STEP.Active  //
//                                            when STEP Finished.             //
// 1.5 Khairul Basar    15-Oct-2009 NA        Placeholder inserted:           //
//                                            "udtSQ_UO";          //
// 1.4 Khairul Basar    06-Oct-2009 NA        R #PAUSE;                       //
// 1.3 Khairul Basar    30-Sep-2009 NA        SEQ_HDR change STEP-0 code      //
//                                            deleted.                        //
// 1.2 Khairul Basar    26-Sep-2009 NA        Refer R4.                       //
// 1.1 Khairul Basar    23-Sep-2009 NA        Refer R3.                       //
// 1.0 Khairul Basar    20-Sep-2009 NA        STEP.Finished flag reset by     //
//                                            JUMP_MAN.                       //
// 0.9 Khairul Basar    11-Sep-2009 NA        SQ_TIMER added as VAR, declared //
//                                            in SEQ_FTR.                     //
// 0.8 Khairul Basar    09-Sep-2009 NA        SqSequencer.Err_Fault is reset  //
//                                            on Stop cmd, Step-0 dead code   //
//                                            deleted from ACT & Verify.      //
//                                            STP_FTR Step_withErr flag       //
//                                            STEP_NUM place holder           //
//                                            configured.                     //
// 0.7 Khairul Basar    28-Aug-2009 NA        SQ_FINISHED OUT added again.    //
//                                            Deleted during major mod R3.    //
// 0.6 Khairul Basar    23-Aug-2009 NA        Refer R2.                       //
// 0.5 Khairul Basar    23-Aug-2009 NA        Refer R1.                       //
// 0.4 Khairul Basar    18-Aug-2009 NA        Reset Step done with/out error  //
//                                            bits using FC:RSET.             //
// 0.3 David Paspa      16-Aug-2009 NA        Added placeholders for header   //
//                                            name and version and revision   //
//                                            history.                        //
// 0.2 Khairul Basar    11-Aug-2009 NA        Retired external udt file for   //
//                                            Static type parameters. All     //
//                                            parameters now IN, OUT or       //
//                                            IN_OUT.                         //
// 0.1 Khairul Basar    12-Jun-2009 NA        Initial design.                 //
//----------------------------------------------------------------------------//
// R4:                                                                        //
// 1.If SQ not finished Resume command will start Step timer, and redo the    //
// last action, verify the feedback.                                          //
// 2."STEP.finished" flag is ANDed with "TRN_AND_JUMP" in the snippet file    //
// TRN_HDR.This is to avoid checking of transition logic if STEP is not       //
// finished yet.                                                              //
// 3.MDCH, Load & transfer typo corrected.                                    //
//                                                                            //
// R3:                                                                        //
// 1.SqStepTimer.IN is reset in STEP_FTR instead of resetting it in TRN_HDR.  //
// This is because TRN_HDTR is not included in the Last step and StepTimer    //
// must reset in the last step.                                               //
// 2.Reset all the timers when SQ stops.Reset done in SEQ_HDR.                //
// Also STEP-finished flag reset when SQ is OFF to                            //
// scan last step.                                                            //
//                                                                            //
// R2:                                                                        //
// 1.Any step error will send the Sequencer into Pause state.Code added in    //
// SEQ_HDR.Snippet Place holder for Bool-array 32 is   //
// deleted.                                                                   //
//                                                                            //
// R1:                                                                        //
// 1.sqStepTimer:All Verification Code must satisfy the condition finish step //
// action within STEP_DELAY time(40s).If step actions not finished within the //
// time period the error flag will raise High signal.Else timer will reset.   //
// 2.sqRunTimer Added therefore can be used as retentive & non retentive.     //
// 3.sqSequencer: This is re-structured UDT which is redefined the symbol     //
// names as well as it gives more clearity.                                   //
// 4.fcMODE and fcCMD functions are added to handle the mode & command        //
// independently regardless of other logic.Two separate UDT udtMODE & udt     //
// CMD assigned to Mode & command function respectively.                      //
// 5.MAN_JUMP programed for manual mode jump operation with or without        //
// Transition code satisfied.TRN_AND_JUMP & NO_VERIFC are the parameters      //
// which will define whether verification code & transition code need to be   //
// checked to perform jump operation.                                         //
// 6.Auto to Manual switchover will be bumpless & will not affect step        //
// operation.Manual to auto switchover can be used to resume Step action at   //
// defined.                                                                   //
// Step number entered in STEPNO_JUMP.                                        //
//                                                                            //
// Parameters:                                                                //
// INPUTS                                                                     //
// ======                                                                     //
// SQ_CMD          Sequence command input inherited from object block         //
//                 0: off/idle                                                //
//                 1: start/initiate                                          //
//                 2: pause                                                   //
//                 3: resume                                                  //
//                 4: reserved (not programmed)                               //
//                 5: reserved (not programmed)                               //
//                 6: abort/go to last step                                   //
//                 7: acknowledge error/fault                                 //
// SQ_MODE         Sequencer Auto/Manual input inherited from object block    //
//                 1: manual                                                  //
//                 2: auto                                                    //
//                                                                            //
// INPUT/OUTPUTS                                                              //
// =============                                                              //
// SQ_JUMP_MAN     Allows manual jumping from one step to the next step. The  //
//                 manual jump flag is ORed with the transition process       //
//                 condition and so can be used to bypass the condition if the//
//                 sequence will not progress.                                //
//                 This input can also be used to jump to any step even       //
//                 when no transition -> step linkage exists. This is only    //
//                 possible when the SQ_MODE is in manual and SQ is in the    //
//                 idle step. The step to jump to is specified in             //
//                 SQ_man_jump_to_step (not accesseble by this FB in/out      //
//                 interface but a separate DB memory location).              //
//                                                                            //
// OUTPUTS                                                                    //
// =======                                                                    //
// SQ_STATE        The calculated state of the sequence                       //
//                 0: off/idle                                                //
//                 1: start/initiated                                         //
//                 2: paused                                                  //
//                 3: resumed                                                 //
//                 4: reserved (wrong Mode)                                   //
//                 5: reserved (Wrong commad)                                 //
//                 6: aborted/go to last step                                 //
//                 7: acknowledged error/fault                                //
// CURSTEP         Current step being proccessed.                             //
// S_ACTIVE        If current step is active                                  //
// NXT_STEP        Next step to jump to if transition condition is true       //
// ERR_FAULT       True if any error/ or fault present                        //
// PAUSED          True if step is paused                                     //
// OFF_IDLE        Sequence is not running but ready for next SQ (in step=0)  //
//----------------------------------------------------------------------------//
// Define variables:                                                          //
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "fbUO_SY_CIP"
TITLE = UO : SY_CIP
NAME : SUCIP
AUTHOR : REO
VERSION : 0.1

VAR_INPUT
  MODE : INT :=2;
  SQ_CMD : INT :=0;
    _TIME_WFI_STEAM_Sy :TIME ;	//Timer For WFI PS Steam
    _TIME_PW_FPZ :TIME ;	//PW FPZ rinse time
    _TIME_PW_STEAM :TIME ;	//Timer For PW PS Steam
    _FZ :INT ;	//Filling Line Selection
    _steaming_proceed :BOOL ;	//Steaming to proceed flag
    _cip_fill_ready :BOOL ;	//Sy is setup to wash fill line
    _DEV_STATE_EVxy04 :INT ;	//Device State of EVxy04
    _DEV_STATE_EXxy07 :INT ;	//Device State of EXxy07
    _DEV_STATE_EGxy05 :INT ;	//Device State of EGxy05
    _DEV_STATE_ECx102 :INT ;	//Device State of ECx102
    _DEV_STATE_ECxy01 :INT ;	//Device State of ECxy01
    _TIME_CS_FTL :TIME ;	//Time for steaming of the filling line
    _TIME_WFI_EMPTY :TIME ;	//Time to wait to empty the vessel after WFI rinse
    _TIME_WFI_LINE :TIME ;	//Time for WFI rinse of filling line
    _TIME_WFI_TANK :TIME ;	//Time for WFI rinse of vessel
    _TIME_PW_EMPTY_Sy :TIME ;	//Time to empty the vessel after the PW wash
    _TIME_PW_WASH :TIME ;	//PW vessel wash time

END_VAR
VAR_OUTPUT
  SQ_STATE : INT ;
  CURSTEP : INT ;
  NXT_STEP : INT ;
  S_ACTIVE : BOOL ;
  ERR_FAULT : BOOL ;
  PAUSED : BOOL ;
  OFF_IDLE : BOOL ;
  SQ_FINISHED : BOOL ;
    _RUNTIME_ECxy01 :TIME ;	//Run Timer
    _AUXVENT_ECxy01 :BOOL ;	//Description
    _AUXDRAIN_ECxy01 :BOOL ;	//Description
    _RUNtoTIME_ECxy01 :BOOL ;	//Description
    _FILL_A_EXxy07 :BOOL ;	//Filling Line Selection
    _steaming_ready :BOOL ;	//Ready to steam filling line
    _wash_drain_done :BOOL ;	//Set Wash Drain Complete
    _VALVE_ECxy01 :INT ;	//Valve selection for ECxy01
    _SUB_ECx102 :INT ;	//Substate selection to ECx102
    _SUB_EGxy05 :INT ;	//Substate selection to EGxy05
    _SUB_EXxy07 :INT ;	//Substate selection to EXxy07
    _SUB_EVxy04 :INT ;	//Substate selection to EVxy04
    _CMD_EVxy04 :INT ;	//Command to EVxy04
    _CMD_EXxy07 :INT ;	//Command to EXxy07
    _CMD_EGxy05 :INT ;	//Command to EGxy05
    _MEDIUM_ECx102 :INT ;	//Medium selection ECx102
    _CMD_ECx102 :INT ;	//Command to ECx102
    _SUB_ECxy01 :INT ;	//Substate selection to ECxy01
    _CMD_ECxy01 :INT ;	//Command to ECxy01

END_VAR
VAR_IN_OUT
  STEPNO_JUMP : INT ;
  MAN_JUMP : BOOL ;
  NO_VERIFIC : BOOL ;
  TRN_AND_JUMP : BOOL ;
    _SHARE_BY_ECx102 :INT ;	//Equipment arbitration ECx102
    _steaming_required :BOOL ;	//Flag indicating if steaming is required

END_VAR
VAR
  sqStepTimer : "TON";
  sqRunTimer : "fbRunTimer";
  sqSequencer : "udtSQ_UO";
  SQ_TIMER: "TON";
    _log_PW_FTLRinseTime :TIME ;	//Logging time used for rinsing filling transfer line with PW
    _Report_Evnt_016 :BOOL ;	//WFI Rinse Line Fill End for batch report
    _Report_Evnt_015 :BOOL ;	//WFI Rinse Line Fill Start for batch Report
    _Report_Evnt_014 :BOOL ;	//WFI Rinse End for Batch Report
    _Report_Evnt_013 :BOOL ;	//WFI Rinse Start for Batch Report
    _Report_Evnt_012 :BOOL ;	//PW Wash End for Batch Report
    _Report_Evnt_011 :BOOL ;	//PW Wash Start for batch Report
    _log_PWEmptyTime :TIME ;	//Description
    _log_PWSteamTime :TIME ;	//Log time for PW CS
    _log_SteamingTime :TIME ;	//Logging time used for steaming
    _log_WFI_FTLRinseTime :TIME ;	//Logging time used for rinsing filling transfer line with WFI
    _log_WFIRinseTime :TIME ;	//Logging time used for rinsing wash drain with WFI.
    _log_PWWashTime :TIME ;	//Logging time used for washing with PW
    _log_SyCIPEnd :TOD ;	//Logging Sy CIP Operation End Time
    _log_SyCIPBegin :TOD ;	//Logging Sy CIP Operation Begin Time

END_VAR
BEGIN
NETWORK
TITLE =Call Mode checking function

      L     #MODE;
      T     #sqSequencer.MODE.current;
      CALL "fcSFCMode" (
           Mode                     := #sqSequencer.MODE);

NETWORK
TITLE =Call Command checking function

      L     #SQ_CMD;
      T     #sqSequencer.CMD.New;

      CALL "fcSFCCommand" (
           Comand                   := #sqSequencer.CMD);

NETWORK
TITLE =Sequencer Mode function

      A     #sqSequencer.MODE.changed;
      JC    MDCH; // if Mode changed,jump to mode change function
      A     #sqSequencer.MODE.manual;
      JC    MANU;
      A     #sqSequencer.MODE.auto;
      JC    AUTO;
      A     #sqSequencer.MODE.oos;
      JC    OOS;
      A     #sqSequencer.MODE.wrong;
      JC    WRMD;
      JU    EMOD;

NETWORK
//----------------------------------------------------------------------------//
// On positive edge of mode change , this will execute once, only one cycle   //
// before going to execute the selected mode function below:                  //
//----------------------------------------------------------------------------//
TITLE =Mode change function
MDCH: NOP   0;
      SET   ;
      R     #sqStepTimer.IN;
      L     #sqSequencer.STEP.NumberCurrent;
      T     #STEPNO_JUMP;
      JU    EMOD;

NETWORK
//----------------------------------------------------------------------------//
// #TRN_AND_JUMP=can set/reset                                                //
// #sqSequencer.STEP.JumpCtrl=Can set/reset by #MAN_JUMP                      //
// #NO_VERIFIC=Can set/ Reset                                                 //
//----------------------------------------------------------------------------//
TITLE =Manual Mode function
MANU: NOP   0; //Manual mode selected



      A     #MAN_JUMP;
      =     #sqSequencer.STEP.JumpCtrl;
      A     #MAN_JUMP;
      JCN   EMOD;

      L     #STEPNO_JUMP;
      T     #sqSequencer.STEP.NumberNext;
      T     #sqSequencer.STEP.NumberCurrent;
      R     #MAN_JUMP; //Reset MAN_JUMP after loading user destination Step number
      R     #sqSequencer.STEP.Finished; //Reset finish flag, to execute next step action
      JU    EMOD;

NETWORK
//----------------------------------------------------------------------------//
// #TRN_AND_JUMP=always set                                                   //
// #sqSequencer.STEP.JumpCtrl=Always set                                      //
// #NO_VERIFIC=Alwasy Reset                                                   //
//----------------------------------------------------------------------------//
TITLE =Auto Mode function
AUTO: NOP   0; //Auto mode selected



      R     #MAN_JUMP;
      S     #TRN_AND_JUMP;
      R     #NO_VERIFIC;
      S     #sqSequencer.STEP.JumpCtrl; //Always Set in auto mode

      L     #sqSequencer.STEP.NumberCurrent;
      T     #STEPNO_JUMP;
      JU    EMOD;
NETWORK
TITLE =OOS mode function

OOS:  NOP   0; // Out of service
      JU    EMOD;
WRMD: NOP   0; //Wrong mode selected
      S     #sqSequencer.Error_Fault;
      L     "dbCONST_VAL".SQ_STATE.WRMODE;
      T     #SQ_STATE;

      JU    EMOD;

NETWORK
TITLE =Mode not changedd

      NOP   0;

NETWORK
TITLE =End Mode function

EMOD: NOP   0;

NETWORK
TITLE =An error will Pause the Sequencer,Operator must Resume SQ to run

      A     #sqSequencer.Error_Fault;
      AN    #sqSequencer.CMD.Changed;
      JC    PAUS;

NETWORK
TITLE =Command Action function

      A     #sqSequencer.CMD.Changed;
      JCN   CNCH; // if Command not changed,jump to end function
      R     #sqStepTimer.IN;


      A     #sqSequencer.CMD.Start;
      JC    STRT;

      A     #sqSequencer.CMD.Stop;
      JC    STOP;


      A     #sqSequencer.CMD.Pause;
      JC    PAUS;

      A     #sqSequencer.CMD.Resume;
      JC    RESM;

      A     #sqSequencer.CMD.Abort;
      JC    ABRT;

      A     #sqSequencer.CMD.Ack;
      JC    ACKN;

      A     #sqSequencer.CMD.wrong;
      JC    WCMD;

      JU    ECMD; //Wrong command/not specified command
//End Comand function

NETWORK
TITLE =Comand -Start/Initiate action function

STRT: NOP   0;
      R     #OFF_IDLE;
      R     #PAUSED;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;
      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.TimerExpired;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqStepTimer.IN;

      S     #sqRunTimer.RESET;

//----------------------------------------------------------------------------//
// Load Initial step Number:                                                  //
//----------------------------------------------------------------------------//
      L     1;
      T     #sqSequencer.STEP.Initial;
      L     #sqSequencer.STEP.Initial;
      T     #sqSequencer.STEP.NumberCurrent;
      T     #sqSequencer.STEP.NumberNext;




      L     "dbCONST_VAL".SQ_STATE.STARTED;
      T     #SQ_STATE;

//----------------------------------------------------------------------------//
// Reset Step done without error bits:                                        //
//----------------------------------------------------------------------------//
      CALL "RSET" (
           S_BIT                    := #sqSequencer.STEP.Done[1],
           N                        := 25);//Upto final step


//----------------------------------------------------------------------------//
// Reset Step done with error bits:                                           //
//----------------------------------------------------------------------------//
      CALL "RSET" (
           S_BIT                    := #sqSequencer.STEP.WithError[1],
           N                        := 25);//Upto final step

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Stop action function

STOP: NOP   0;
      S     #OFF_IDLE;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;
      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.TimerExpired;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.Error_Fault;
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqRunTimer.ENABLE;
      R     #sqStepTimer.IN;
      R     #SQ_TIMER.IN;
      R     #PAUSED;


//Go to last step
      L     25;
      T     #sqSequencer.FinalStep;
      L     #sqSequencer.FinalStep;
      T     #sqSequencer.STEP.NumberNext;
      L     "dbCONST_VAL".SQ_STATE.OFF_IDLE;
      T     #SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Pause action function

PAUS: NOP   0;
      S     #PAUSED;
      R     #S_ACTIVE;
      S     #sqRunTimer.PAUSE;
      L     #sqSequencer.STEP.NumberCurrent;
      T     #STEPNO_JUMP;
      L     "dbCONST_VAL".SQ_STATE.PAUSED;
      T     #SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Resume action function

RESM: NOP   0;
      R     #PAUSED;
      R     #sqRunTimer.PAUSE;
      R     #sqStepTimer.IN; //Reset Step timer
      L     "dbCONST_VAL".SQ_STATE.RESUMED;
      T     #SQ_STATE;

      A     #SQ_FINISHED;
      JC    ECMD;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Abort action function

ABRT: NOP   0;
      L     "dbCONST_VAL".SQ_STATE.ABORTED;
      T     #SQ_STATE;

      JC    STOP; //Stop & Abort same
      JU    ECMD;

NETWORK
TITLE =Comand -Acknowledge action function

ACKN: NOP   0;
      R     #ERR_FAULT;
      R     #sqSequencer.Error_Fault;
      L     "dbCONST_VAL".SQ_STATE.ACKNOWLEDGED;
      T     #SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -wrong/unavailable

WCMD: NOP   0;

      S     #sqSequencer.Error_Fault;
      L     "dbCONST_VAL".SQ_STATE.WRCMD;
      T     #SQ_STATE;

      JU    ECMD;
NETWORK
TITLE =Comand -not changedd

CNCH: NOP   0; // Command not changed

NETWORK
TITLE =End command Function

ECMD: NOP   0;

NETWORK
//----------------------------------------------------------------------------//
// Sequencer step jump list. Load the step number to execute the step:        //
//----------------------------------------------------------------------------//
TITLE =Sequencer Step Jump distrubution list
      L     #sqSequencer.STEP.NumberCurrent;
      JL    SQER; // If Sequencer Step number invalid or greater than available number of step
      JU    S000; // Exceptional Error Handling
      JU    S001; // STEP-001:
JU    S002; // STEP-002:
JU    S003; // STEP-003:
JU    S004; // STEP-004:
JU    S005; // STEP-005:
JU    S006; // STEP-006:
JU    S007; // STEP-007:
JU    S008; // STEP-008:
JU    S009; // STEP-009:
JU    S010; // STEP-010:
JU    S011; // STEP-011:
JU    S012; // STEP-012:
JU    S013; // STEP-013:
JU    S014; // STEP-014:
JU    S015; // STEP-015:
JU    S016; // STEP-016:
JU    S017; // STEP-017:
JU    S018; // STEP-018:
JU    S019; // STEP-019:
JU    S020; // STEP-020:
JU    S021; // STEP-021:
JU    S022; // STEP-022:
JU    S023; // STEP-023:
JU    S024; // STEP-024:
JU    S025; // STEP-025:


//----------------------------------------------------------------------------//
// If Step number is Invalid or Out of Range:                                 //
//----------------------------------------------------------------------------//
SQER: NOP   0;
      S     #sqSequencer.Error_Fault;
      JU    COMM; // Jump to Common Sequencer code handling function

NETWORK
//----------------------------------------------------------------------------//
// STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 ST //
// STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 ST //
// STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 ST //
//----------------------------------------------------------------------------//
TITLE =STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP

NETWORK
TITLE =S000: STEP0::If Paused exit

S000: NOP   0;

      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP001 STEP001 STEP001 STEP001 ST //
// STEP001 STEP001 STEP001 STEP001 ST //
// STEP001 STEP001 STEP001 STEP001 ST //
//----------------------------------------------------------------------------//
// Log CIP operation begin time.
Open tank path to wash drain: EXy006 STATE=CIP
Open Sy tank outlet valve: EVy004 STATE=DISCHARGE
//----------------------------------------------------------------------------//
TITLE =S001: STEP-01::SY_UO_CIP : Unit Operation Commenced

S001: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S001:STEP-01:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A001; // Exit Action code, Jump to A001 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L001; // Action number loaded, Jump to L001--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L001: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r001; //Wrong Action number
      JU    _001; //Action error handling
       JU    aa01; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r001: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k001; //Exit
_001: NOP   0; // Action error handling
      JU    k001; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log CIP operation begin time.
//Open tank path to wash drain: EXxy07 STATE=FILTER
//Open Sy tank outlet valve: EVxy04 STATE=DISCHARGE
//Reset ECx102.
TITLE =S001:: STEP-001:: : ACTION CODE
aa01: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      L "dbCONST_VAL".CPU_TIME;
T #_log_SyCIPBegin;


// Open tank path to wash drain
A(;
L 1;
L #_FZ;
==I;
);
JCN S302;
SET;
S #_FILL_A_EXxy07;
JU end1;

S302: NOP 0;
A(;
L 2;
L #_FZ;
==I;
);
R #_FILL_A_EXxy07;

end1: NOP 0;

L "dbCONST_VAL".EM.EMX2.SUBS.FILTER;
T #_SUB_EXxy07;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_EXxy07;


// Open Sy outlet valve
L "dbCONST_VAL".EM.EMV1.SUBS.DISCHARGE; 
T #_SUB_EVxy04;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_EVxy04;

L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECx102;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECx102;
SET;
S #_RUNtoTIME_ECxy01;


//Report Event Reset
SET;
R #_Report_Evnt_011;
R #_Report_Evnt_012;
R #_Report_Evnt_013;
R #_Report_Evnt_014;
R #_Report_Evnt_015;
R #_Report_Evnt_016;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if EXxy07 changed to substate FILTER.
A(;
L #_DEV_STATE_EXxy07;
L "dbCONST_VAL".EM.EMX2.SUBS.FILTER;
==I;
);
//Verify if EVxy04 changed to substate DISCHARGE.
A(;
L #_DEV_STATE_EVxy04;
L "dbCONST_VAL".EM.EMV1.SUBS.DISCHARGE; 
==I;
);
//Verify if ECx102 stopped.
A(;
L #_DEV_STATE_ECx102;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k001;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[01];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k001;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k001: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[01]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S001:STEP-001::Begin Transition

A001: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// EVn004 substate DISCHARGE is complete and Parent indicates SMFLx, FPz and FLz Units ready for flushing.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S001::STEP 001:TRAN 001: Discharge Complete?
A M1.1;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S001:t001::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x001;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     02; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step02.

      JU    COMM; // Transition satisfied, Exit, go to next step
x001: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S001::STEP-001:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP002 STEP002 STEP002 STEP002 ST //
// STEP002 STEP002 STEP002 STEP002 ST //
// STEP002 STEP002 STEP002 STEP002 ST //
//----------------------------------------------------------------------------//
// OPEN HPCA supply valve: ECy001 STATE=VALVE_OPENED; VALVE=HPCA; RUN_TO_TIME=FALSE, AUX DRAIN=FALSE.
Start timer to flush Tank Sy_TIME_PW_WASH.

Open PW supply to flush tank: ECy002 STATE=FLUSH; MEDIUM=PW
//----------------------------------------------------------------------------//
TITLE =S002: STEP-02::SY_UO_CIP : Commence Flush with PW

S002: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S002:STEP-02:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A002; // Exit Action code, Jump to A002 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L002; // Action number loaded, Jump to L002--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L002: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r002; //Wrong Action number
      JU    _002; //Action error handling
       JU    aa02; //ACTION-01
JU    ab02; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r002: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k002; //Exit
_002: NOP   0; // Action error handling
      JU    k002; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open CA supply valve: ECxy01 STATE=VALVE_OPENED; VALVE=CA.
//Load TIME_PW_WASH.
//
TITLE =S002:: STEP-002:: : ACTION CODE
aa02: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Open CA supply
SET;
R #_AUXDRAIN_ECxy01;
R #_AUXVENT_ECxy01;
R #_RUNtoTIME_ECxy01;

L "dbCONST_VAL".EM.EMC1.VALVE.CA;
T #_VALVE_ECxy01;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED; 
T #_SUB_ECxy01;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECxy01;

//Load TIME_PW_WASH.
SET;
L #_TIME_PW_WASH;
T #_RUNTIME_ECxy01;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_ECxy01;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED; 
==I;
);
A(;
L #_DEV_STATE_ECx102;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k002;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open PW supply and start ECxy02 STATE=FLUSH.
TITLE =S002:: STEP-002:: : ACTION CODE
ab02: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Open PW supply.
L "dbCONST_VAL".EM.EMC3.MEDIUM.PW;
T #_MEDIUM_ECx102;

//Start EMC3 FLUSH.
L "dbCONST_VAL".EM.EMC3.SUBS.FLUSH; 
T #_SUB_ECx102;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECx102;

//Report Event Set
SET;
S #_Report_Evnt_011;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_ECx102;
L "dbCONST_VAL".EM.EMC3.SUBS.FLUSH; 
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k002;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[02];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k002;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k002: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[02]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S002:STEP-002::Begin Transition

A002: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Timer Sy_TIME_PW_WASH expired.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S0::STEP 0:TRAN 002: Timer expired
A(;
L #_DEV_STATE_ECx102;
L 	"dbCONST_VAL".EM.DEV_STATE.COMPLETE;
==I;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S0:t002::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x002;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     ; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step.

      JU    COMM; // Transition satisfied, Exit, go to next step
x002: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S002::STEP-002:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP003 STEP003 STEP003 STEP003 ST //
// STEP003 STEP003 STEP003 STEP003 ST //
// STEP003 STEP003 STEP003 STEP003 ST //
//----------------------------------------------------------------------------//
// Log actual Sy PW wash time.
Divert Wash to FLz
//----------------------------------------------------------------------------//
TITLE =S003: STEP-03::Sy_UO_CIP : Set Flag for Sy_PW_Wash_Complete

S003: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S003:STEP-03:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A003; // Exit Action code, Jump to A003 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L003; // Action number loaded, Jump to L003--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L003: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r003; //Wrong Action number
      JU    _003; //Action error handling
       JU    aa03; //ACTION-01
JU    ab03; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r003: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k003; //Exit
_003: NOP   0; // Action error handling
      JU    k003; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual tank PW wash time and close PW supply valve.
TITLE =S003:: STEP-003:: : ACTION CODE
aa03: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log actual tank PW wash time
L #SQ_TIMER.PT;
T #_log_PWWashTime;

//Close PW supply valve
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECn002;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECn002;


//Report Event Set
SET;
S #_Report_Evnt_008;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_ECn002;
L 	"dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k003;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Start Timer for PW Empty.
TITLE =S003:: STEP-003:: : ACTION CODE
ab03: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Start Timer for PW Empty
A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L #_TIME_PW_EMPTY2;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k003;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[03];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k003;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k003: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[03]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S003:STEP-003::Begin Transition

A003: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S003::STEP-003:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP004 STEP004 STEP004 STEP004 ST //
// STEP004 STEP004 STEP004 STEP004 ST //
// STEP004 STEP004 STEP004 STEP004 ST //
//----------------------------------------------------------------------------//
// Log actual Sy PW wash time.
Divert path to Filling Line FPz, Filling Machine FLz and Drain Line.???

Start Timer for rinse FPz and FLz with PW.
Clear Flag for FLz_PW_Wash_Complete??
//----------------------------------------------------------------------------//
TITLE =S004: STEP-04::Sy_UO_CIP : Set Flag for Sy_PW_Wash_Complete

S004: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S004:STEP-04:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A004; // Exit Action code, Jump to A004 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L004; // Action number loaded, Jump to L004--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L004: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r004; //Wrong Action number
      JU    _004; //Action error handling
       JU    aa04; //ACTION-01
JU    ab04; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r004: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k004; //Exit
_004: NOP   0; // Action error handling
      JU    k004; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual tank PW wash time
//Divert path to Filling Line FPz, Filling Machine FLz and Drain Line.
TITLE =S004:: STEP-004:: : ACTION CODE
aa04: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log actual tank PW wash time
L #SQ_TIMER.PT;
T #_log_PWWashTime;

//Switch path to Fillling Line FPz and Fillling Machine FLz???
      L     "dbCONST".BLK.EMX2.SUBS.FILL_SY;
      T     #_SUB_EXxy07;
      L     "dbCONST".BLK.CMD.START;
      T     #_CMD_EXxy07;

//Switch path to drain line???
      L     "dbCONST".BLK.EMX2.SUBS.CIP_SY;
      T     #_SUB_EXxy07;
      L     "dbCONST".BLK.CMD.START;
      T     #_CMD_EXxy07;


//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;    
      L     #_DEV_STATE_EXxy07;
      L     "dbCONST".BLK.EMX2.SUBS.FILL_SY;
      ==I   
 );
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k004;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Start Timer for rinse FPz and FLz with PW.
TITLE =S004:: STEP-004:: : ACTION CODE
ab04: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Start Timer 
A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L #_TIME_PW_FPZ;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k004;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[04];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k004;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k004: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[04]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S004:STEP-004::Begin Transition

A004: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// FLz Rinse Complete
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S0::STEP 0:TRAN 003: FLz Rinse Complete
A #SQ_TIMER.Q;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S0:t003::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x003;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     ; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step.

      JU    COMM; // Transition satisfied, Exit, go to next step
x003: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S004::STEP-004:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP005 STEP005 STEP005 STEP005 ST //
// STEP005 STEP005 STEP005 STEP005 ST //
// STEP005 STEP005 STEP005 STEP005 ST //
//----------------------------------------------------------------------------//
// Log actual FLz PW rinse time.
Set Flag for FLz_PW_Wash_Complete???
Divert Wash to SMFLx
Close path to Filling Line FPz, Filling Macine FLz and Drain Line????

Start Timer for SMFLx rinse.
//----------------------------------------------------------------------------//
TITLE =S005: STEP-05::Sy_UO_CIP : Set Flag for FLz_PW_Wash_Complete

S005: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S005:STEP-05:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A005; // Exit Action code, Jump to A005 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L005; // Action number loaded, Jump to L005--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L005: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r005; //Wrong Action number
      JU    _005; //Action error handling
       JU    aa05; //ACTION-01
JU    ab05; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r005: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k005; //Exit
_005: NOP   0; // Action error handling
      JU    k005; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual PW Filling Transfer Line and Filling Machine rinse time.
TITLE =S005:: STEP-005:: : ACTION CODE
aa05: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log actual PW Filling Transfer Line and Filling Machine rinse time.
L #SQ_TIMER.PT;
T #_log_PW_FTLRinseTime;


//Switch path to Filtration Line SMFLx Drain.
      L     "dbCONST".BLK.EMX2.SUBS.SIP;
      T     #_SUB_EXxy07;
      L     "dbCONST".BLK.CMD.START;
      T     #_CMD_EXxy07;


//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;    
      L     #_DEV_STATE_EXxy07;
      L     "dbCONST".BLK.EMX2.SUBS.SIP;
      ==I   
 );
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k005;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Start Timer for SMFLx rinse.
TITLE =S005:: STEP-005:: : ACTION CODE
ab05: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Start Timer for SMFLx rinse.
A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L #_TIME_PW_LINE_SMFLx;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k005;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[05];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k005;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k005: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[05]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S005:STEP-005::Begin Transition

A005: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// SMFLx Wash Complete
Clear Flag for SMFLx_PW_Wash_Complete
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S0::STEP 0:TRAN 004: SMFLx Wash Complete
A #SQ_TIMER.Q;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S0:t004::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x004;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     ; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step.

      JU    COMM; // Transition satisfied, Exit, go to next step
x004: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S005::STEP-005:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP006 STEP006 STEP006 STEP006 ST //
// STEP006 STEP006 STEP006 STEP006 ST //
// STEP006 STEP006 STEP006 STEP006 ST //
//----------------------------------------------------------------------------//
// Log actual FLz PW wash time.
Set Flag for FLz_PW_Wash_Complete; 
Divert Wash to SMFLx
//----------------------------------------------------------------------------//
TITLE =S006: STEP-06::Sy_UO_CIP : Set Flag for FLz_PW_Wash_Complete

S006: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S006:STEP-06:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A006; // Exit Action code, Jump to A006 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L006; // Action number loaded, Jump to L006--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L006: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r006; //Wrong Action number
      JU    _006; //Action error handling
       JU    aa06; //ACTION-01
JU    ab06; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r006: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k006; //Exit
_006: NOP   0; // Action error handling
      JU    k006; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Close PW supply valve.
TITLE =S006:: STEP-006:: : ACTION CODE
aa06: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log actual tank PW wash time
L #SQ_TIMER.PT;
T #_log_PWWashTime;

//Close PW supply valve
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECn002;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECn002;


//Report Event Set
SET;
S #_Report_Evnt_008;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_ECn002;
L 	"dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k006;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Action Description
TITLE =S006:: STEP-006:: : ACTION CODE
ab06: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Start Timer for PW Empty
A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L #_TIME_PW_EMPTY2;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k006;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[06];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k006;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k006: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[06]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S006:STEP-006::Begin Transition

A006: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S006::STEP-006:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP007 STEP007 STEP007 STEP007 ST //
// STEP007 STEP007 STEP007 STEP007 ST //
// STEP007 STEP007 STEP007 STEP007 ST //
//----------------------------------------------------------------------------//
// Log actual PW SMFLx rinse time.
Close PW supply valve.

Start Timer for PW_EMPTY.
//----------------------------------------------------------------------------//
TITLE =S007: STEP-07::Sy_UO_CIP : Set Flag for FLz_PW_Wash_Complete

S007: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S007:STEP-07:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A007; // Exit Action code, Jump to A007 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L007; // Action number loaded, Jump to L007--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L007: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r007; //Wrong Action number
      JU    _007; //Action error handling
       JU    aa07; //ACTION-01
JU    ab07; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r007: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k007; //Exit
_007: NOP   0; // Action error handling
      JU    k007; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual PW SMFLx rinse time.
//Close PW supply valve.
TITLE =S007:: STEP-007:: : ACTION CODE
aa07: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log actual PW Filling Transfer Line and Filling Machine rinse time.
L #SQ_TIMER.PT;
T #_log_PW_FTLRinseTime;

//Close PW supply valve.
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECx102;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECx102;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_ECx102;
L 	"dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k007;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Start Timer for PW_EMPTY.
TITLE =S007:: STEP-007:: : ACTION CODE
ab07: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Start Timer for PW_EMPTY.
A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L #_TIME_PW_EMPTY_Sy;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k007;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[07];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k007;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k007: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[07]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S007:STEP-007::Begin Transition

A007: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S007::STEP-007:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP008 STEP008 STEP008 STEP008 ST //
// STEP008 STEP008 STEP008 STEP008 ST //
// STEP008 STEP008 STEP008 STEP008 ST //
//----------------------------------------------------------------------------//
// Close CA supply valve. ECy001 (STATE=STOPPED)
Open PW line PS supply valve ECn002 (STATE=FLUSH, MEDIUM=PS(PW),RUN_TO_TIME=FALSE)
Start timer for TIME_PW_STEAM.
//----------------------------------------------------------------------------//
TITLE =S008: STEP-08::SY_UO_CIP : Steaming PW inlet line

S008: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S008:STEP-08:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A008; // Exit Action code, Jump to A008 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L008; // Action number loaded, Jump to L008--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L008: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r008; //Wrong Action number
      JU    _008; //Action error handling
       JU    aa08; //ACTION-01
JU    ab08; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r008: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k008; //Exit
_008: NOP   0; // Action error handling
      JU    k008; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Close CA supply valve. ECn001 (STATE=STOPPED).
//Reset ECx102 state.
TITLE =S008:: STEP-008:: : ACTION CODE
aa08: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Close CA supply valve
SET;
R #_AUXDRAIN_ECxy01;
R #_AUXVENT_ECxy01;

L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECxy01;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECxy01;

L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECx102;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECx102;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_ECxy01;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
A(;
L #_DEV_STATE_ECx102;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k008;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open PW line PS supply valve ECn002 (STATE=FLUSH, MEDIUM=PS(PW)
TITLE =S008:: STEP-008:: : ACTION CODE
ab08: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Open PW line CS supply valve
L "dbCONST".SEL.LIQUID.PSPW;
T #_MEDIUM_ECx102;
SET;
S #_RUNtoTIME_ECxy01;
L #_TIME_PW_STEAM;
T #_RUNTIME_ECxy01;

L "dbCONST_VAL".EM.EMC3.SUBS.FLUSH;
T #_SUB_ECx102;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECx102;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_ECx102;
L "dbCONST_VAL".EM.EMC3.SUBS.FLUSH;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k008;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[08];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k008;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k008: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[08]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S008:STEP-008::Begin Transition

A008: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// TIME_PW_STEAM_Sy expired?
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S008::STEP 008:TRAN 006: Timer Expired?
A(;
L #_DEV_STATE_ECx102;
L 	"dbCONST_VAL".EM.DEV_STATE.COMPLETE;
==I;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S008:t006::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x006;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     10; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step10.

      JU    COMM; // Transition satisfied, Exit, go to next step
x006: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S008::STEP-008:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP009 STEP009 STEP009 STEP009 ST //
// STEP009 STEP009 STEP009 STEP009 ST //
// STEP009 STEP009 STEP009 STEP009 ST //
//----------------------------------------------------------------------------//
// Log actual tank PW empty time.
Close CA supply valve. ECy001 (STATE=STOPPED)
Open PW line CS supply valve ECn002 (STATE=FLUSH, MEDIUM=CS(PW),RUN_TO_TIME=FALSE)
//----------------------------------------------------------------------------//
TITLE =S009: STEP-09::SY_UO_CIP : Steaming PW inlet line

S009: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S009:STEP-09:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A009; // Exit Action code, Jump to A009 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L009; // Action number loaded, Jump to L009--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L009: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r009; //Wrong Action number
      JU    _009; //Action error handling
       JU    aa09; //ACTION-01
JU    ab09; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r009: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k009; //Exit
_009: NOP   0; // Action error handling
      JU    k009; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual tank PW empty time.
//Close CA supply valve. ECn001 (STATE=STOPPED).
//Open PW line CS supply valve ECn002 (STATE=FLUSH, MEDIUM=CS(PW),RUN_TO_TIME=FALSE).
TITLE =S009:: STEP-009:: : ACTION CODE
aa09: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log actual tank PW empty time
L #SQ_TIMER.PT;
T #_log_PWEmptyTime;

// Close CA supply valve
SET;
R #_AUXDRAIN_ECxy01;
R #_AUXVENT_ECxy01;

L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECxy01;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECxy01;

L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECx102;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECx102;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_ECxy01;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
A(;
L #_DEV_STATE_ECx102;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k009;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Action Description
TITLE =S009:: STEP-009:: : ACTION CODE
ab09: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Open PW line CS supply valve
L "dbCONST_VAL".EM.EMC3.MEDIUM.CS_PW;  
T #_MEDIUM_ECx102;
SET;
S #_RUNtoTIME_ECxy01;
L #_TIME_CS_STEAM;
T #_RUNTIME_ECxy01;

L "dbCONST_VAL".EM.EMC3.SUBS.FLUSH;
T #_SUB_ECx102;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECx102;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_ECx102;
L "dbCONST_VAL".EM.EMC3.SUBS.FLUSH;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k009;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[09];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k009;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k009: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[09]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S009:STEP-009::Begin Transition

A009: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S009::STEP-009:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP010 STEP010 STEP010 STEP010 ST //
// STEP010 STEP010 STEP010 STEP010 ST //
// STEP010 STEP010 STEP010 STEP010 ST //
//----------------------------------------------------------------------------//
// Log actual PW line steaming time.
Close PW line PS supply valve ECy002 (STATE=STOPPED)

Connect WFI inlet line to Sy.
//----------------------------------------------------------------------------//
TITLE =S010: STEP-10::SY_UO_CIP : Stop Steaming PW inlet line

S010: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S010:STEP-10:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A010; // Exit Action code, Jump to A010 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L010; // Action number loaded, Jump to L010--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L010: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r010; //Wrong Action number
      JU    _010; //Action error handling
       JU    aa10; //ACTION-01
JU    ab10; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r010: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k010; //Exit
_010: NOP   0; // Action error handling
      JU    k010; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual PW line steaming time.
//Close PW-line PS supply valve.
TITLE =S010:: STEP-010:: : ACTION CODE
aa10: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log actual PW line steaming time.
L #SQ_TIMER.PT;
T #_log_PWSteamTime;

//Close PW line PS supply valve.
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECx102;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECx102;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_ECx102;
L 	"dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k010;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Connect WFI inlet line to Sy.
//Set ECx102 to substate SETUP and MEDIUM=WFI.
TITLE =S010:: STEP-010:: : ACTION CODE
ab10: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Connect WFI inlet line to Sy.
L "dbCONST_VAL".EM.EMC3.MEDIUM.WFI;
T #_MEDIUM_ECx102;
L "dbCONST_VAL".EM.EMC3.SUBS.SETUP; 
T #_SUB_ECx102;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECx102;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_ECx102;
L "dbCONST_VAL".EM.EMC3.SUBS.SETUP; 
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k010;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[10];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k010;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k010: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[10]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S010:STEP-010::Begin Transition

A010: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// ECy002 SETUP complete
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S010::STEP 010:TRAN 008: Setup complete?
A(;
L #_DEV_STATE_ECx102;
L "dbCONST_VAL".EM.DEV_STATE.COMPLETE; 
==I;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S010:t008::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x008;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     13; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step13.

      JU    COMM; // Transition satisfied, Exit, go to next step
x008: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S010::STEP-010:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP011 STEP011 STEP011 STEP011 ST //
// STEP011 STEP011 STEP011 STEP011 ST //
// STEP011 STEP011 STEP011 STEP011 ST //
//----------------------------------------------------------------------------//
// Log actual PW line steaming time.
Close PW line PS supply valve ECy002 (STATE=STOPPED)
//----------------------------------------------------------------------------//
TITLE =S011: STEP-11::SY_UO_CIP : Stop Steaming PW inlet line

S011: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S011:STEP-11:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A011; // Exit Action code, Jump to A011 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L011; // Action number loaded, Jump to L011--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L011: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r011; //Wrong Action number
      JU    _011; //Action error handling
       JU    aa11; //ACTION-01
JU    ab11; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r011: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k011; //Exit
_011: NOP   0; // Action error handling
      JU    k011; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual PW line steaming time.
//Close PW-line PS supply valve.
TITLE =S011:: STEP-011:: : ACTION CODE
aa11: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log actual PW line steaming time.
L #SQ_TIMER.PT;
T #_log_PWSteamTime;

//Close PW line PS supply valve.
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECx102;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECx102;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_ECx102;
L 	"dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k011;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Action Description
TITLE =S011:: STEP-011:: : ACTION CODE
ab11: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Start Timer for CS Steam
A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L T#10S;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k011;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[11];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k011;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k011: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[11]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S011:STEP-011::Begin Transition

A011: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S011::STEP-011:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP012 STEP012 STEP012 STEP012 ST //
// STEP012 STEP012 STEP012 STEP012 ST //
// STEP012 STEP012 STEP012 STEP012 ST //
//----------------------------------------------------------------------------//
// Connect WFI inlet line to Sy.
Open Vent Valve
Set ECy002 to substate SETUP and MEDIUM=WFI.
//----------------------------------------------------------------------------//
TITLE =S012: STEP-12::SY_UO_CIP : Wait for OPER connect WFI

S012: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S012:STEP-12:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A012; // Exit Action code, Jump to A012 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L012; // Action number loaded, Jump to L012--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L012: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r012; //Wrong Action number
      JU    _012; //Action error handling
       JU    aa12; //ACTION-01
JU    ab12; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r012: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k012; //Exit
_012: NOP   0; // Action error handling
      JU    k012; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Connect WFI inlet line to Sy.
//Set ECx102 to substate SETUP and MEDIUM=WFI.
//
//Start timer to empty Tank TIME_PW_EMPTY
TITLE =S012:: STEP-012:: : ACTION CODE
aa12: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Connect WFI inlet line to Sy.
L "dbCONST_VAL".EM.EMC3.MEDIUM.WFI;
T #_MEDIUM_ECx102;
L "dbCONST_VAL".EM.EMC3.SUBS.SETUP; 
T #_SUB_ECx102;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECx102;

// Open VENT valve:
SET;
R #_RUNtoTIME_ECxy01;
R #_AUXDRAIN_ECxy01;
R #_AUXVENT_ECxy01;
L "dbCONST_VAL".EM.EMC1.VALVE.VENT;
T #_VALVE_ECxy01;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED; 
T #_SUB_ECxy01;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECxy01;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_ECx102;
L "dbCONST_VAL".EM.EMC3.SUBS.SETUP; 
==I;
);
A(;
L #_DEV_STATE_ECxy01;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED; 
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k012;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Action Description
TITLE =S012:: STEP-012:: : ACTION CODE
ab12: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Start Timer for PW Empty
A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L #_TIME_PW_EMPTY;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k012;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[12];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k012;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k012: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[12]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S012:STEP-012::Begin Transition

A012: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S012::STEP-012:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP013 STEP013 STEP013 STEP013 ST //
// STEP013 STEP013 STEP013 STEP013 ST //
// STEP013 STEP013 STEP013 STEP013 ST //
//----------------------------------------------------------------------------//
// Open Sy path to Wash Drain.

Open WFI supply to rinse tank: ECy002 STATE=FLUSH; MEDIUM=WFI.
Start timer to rinse tank by TIME_WFI_TANK.
Open HPCA supply valve.
//----------------------------------------------------------------------------//
TITLE =S013: STEP-13::SY_UO_CIP : Commence WFI Rinse of vessel

S013: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S013:STEP-13:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A013; // Exit Action code, Jump to A013 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L013; // Action number loaded, Jump to L013--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L013: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r013; //Wrong Action number
      JU    _013; //Action error handling
       JU    aa13; //ACTION-01
JU    ab13; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r013: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k013; //Exit
_013: NOP   0; // Action error handling
      JU    k013; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Reset ECxy002 state.
TITLE =S013:: STEP-013:: : ACTION CODE
aa13: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Switch path to drain line.
L     "dbCONST".BLK.EMX2.SUBS.CIP_SY;
T     #_SUB_EXxy07;
L     "dbCONST".BLK.CMD.START;
T     #_CMD_EXxy07;


L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECx102;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECx102;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_ECx102;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k013;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open WFI supply to rinse tank: ECxy02 STATE=FLUSH; MEDIUM=WFI.
//Start timer to rinse tank by TIME_WFI_TANK.
//Open HPCA supply valve.
TITLE =S013:: STEP-013:: : ACTION CODE
ab13: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Open WFI supply to rinse tank
L "dbCONST_VAL".EM.EMC3.MEDIUM.WFI;
T #_MEDIUM_ECx102;
SET;
S #_RUNtoTIME_ECxy01;
L #_TIME_WFI_TANK;
T #_RUNTIME_ECxy01;

L "dbCONST_VAL".EM.EMC3.SUBS.FLUSH; 
T #_SUB_ECx102;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECx102;

//Report Event Set
SET;
S #_Report_Evnt_013;



// Open CA supply
SET;
R #_AUXDRAIN_ECxy01;
R #_AUXVENT_ECxy01;

L "dbCONST_VAL".EM.EMC1.VALVE.CA;
T #_VALVE_ECxy01;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED; 
T #_SUB_ECxy01;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECxy01;


//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_ECx102;
L "dbCONST_VAL".EM.EMC3.SUBS.FLUSH; 
==I;
);

A(;
L #_DEV_STATE_ECxy01;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED; 
==I;
);

      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k013;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[13];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k013;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k013: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[13]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S013:STEP-013::Begin Transition

A013: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Timer TIME_WFI_TANK expired.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S0::STEP 0:TRAN 009: Timer expired?
A(;
L #_DEV_STATE_ECx102;
L 	"dbCONST_VAL".EM.DEV_STATE.COMPLETE;
==I;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S0:t009::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x009;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     ; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step.

      JU    COMM; // Transition satisfied, Exit, go to next step
x009: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S013::STEP-013:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP014 STEP014 STEP014 STEP014 ST //
// STEP014 STEP014 STEP014 STEP014 ST //
// STEP014 STEP014 STEP014 STEP014 ST //
//----------------------------------------------------------------------------//
// Open WFI supply to rinse tank: ECy002 STATE=FLUSH; MEDIUM=WFI

Start timer to rinse Sy_TIME_WFI_WASH
//----------------------------------------------------------------------------//
TITLE =S014: STEP-14::SY_UO_CIP : Commence WFI Rinse of vessel

S014: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S014:STEP-14:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A014; // Exit Action code, Jump to A014 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L014; // Action number loaded, Jump to L014--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L014: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r014; //Wrong Action number
      JU    _014; //Action error handling
       JU    aa14; //ACTION-01
JU    ab14; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r014: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k014; //Exit
_014: NOP   0; // Action error handling
      JU    k014; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open WFI supply to rinse tank: ECxy02 STATE=FLUSH; MEDIUM=WFI
//
//Start timer to rinse Tank TIME_WFI_TANK
TITLE =S014:: STEP-014:: : ACTION CODE
aa14: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Open CA supply
SET;
R #_AUXDRAIN_ECxy01;
R #_AUXVENT_ECxy01;

L "dbCONST_VAL".EM.EMC1.VALVE.CA;
T #_VALVE_ECxy01;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED; 
T #_SUB_ECxy01;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECxy01;

L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECx102;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECx102;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_ECxy01;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED; 
==I;
);
A(;
L #_DEV_STATE_ECx102;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k014;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Action Description
TITLE =S014:: STEP-014:: : ACTION CODE
ab14: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Open WFI supply to rinse tank
L "dbCONST_VAL".EM.EMC3.MEDIUM.WFI;
T #_MEDIUM_ECx102;
SET;
S #_RUNtoTIME_ECxy01;
L #_TIME_WFI_TANK;
T #_RUNTIME_ECxy01;

L "dbCONST_VAL".EM.EMC3.SUBS.FLUSH; 
T #_SUB_ECx102;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECx102;

//Report Event Set
SET;
S #_Report_Evnt_013;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_ECx102;
L "dbCONST_VAL".EM.EMC3.SUBS.FLUSH; 
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k014;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[14];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k014;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k014: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[14]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S014:STEP-014::Begin Transition

A014: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S014::STEP-014:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP015 STEP015 STEP015 STEP015 ST //
// STEP015 STEP015 STEP015 STEP015 ST //
// STEP015 STEP015 STEP015 STEP015 ST //
//----------------------------------------------------------------------------//
// Log actual Sy WFI wash time.
Set Flag for Sy_WFI_Wash_Complete; 

Divert Wash to FLz
Set EXy007 to substate CIP_FILL
Open DVy129
Close DVy127

Flag parent ready for CIP_FLz
//----------------------------------------------------------------------------//
TITLE =S015: STEP-15::Sy_UO_CIP : Set Flag for Sy_WFI_Wash_Complete

S015: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S015:STEP-15:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A015; // Exit Action code, Jump to A015 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L015; // Action number loaded, Jump to L015--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L015: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r015; //Wrong Action number
      JU    _015; //Action error handling
       JU    aa15; //ACTION-01
JU    ab15; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r015: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k015; //Exit
_015: NOP   0; // Action error handling
      JU    k015; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //
TITLE =S015:: STEP-015:: : ACTION CODE
aa15: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//

      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k015;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //
TITLE =S015:: STEP-015:: : ACTION CODE
ab15: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//

      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k015;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[15];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k015;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k015: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[15]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S015:STEP-015::Begin Transition

A015: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S015::STEP-015:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP016 STEP016 STEP016 STEP016 ST //
// STEP016 STEP016 STEP016 STEP016 ST //
// STEP016 STEP016 STEP016 STEP016 ST //
//----------------------------------------------------------------------------//
// Log actual Sy WFI wash time.
Set Flag for Sy_WFI_Wash_Complete; 

Divert Wash to FLz
Set EXy007 to substate CIP_FILL
Open DVy129
Close DVy127

Flag parent ready for CIP_FLz
//----------------------------------------------------------------------------//
TITLE =S016: STEP-16::Sy_UO_CIP : Set Flag for Sy_WFI_Wash_Complete

S016: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S016:STEP-16:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A016; // Exit Action code, Jump to A016 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L016; // Action number loaded, Jump to L016--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L016: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r016; //Wrong Action number
      JU    _016; //Action error handling
       JU    aa16; //ACTION-01
JU    ab16; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r016: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k016; //Exit
_016: NOP   0; // Action error handling
      JU    k016; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Close PW supply valve.
TITLE =S016:: STEP-016:: : ACTION CODE
aa16: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log actual tank PW wash time
L #SQ_TIMER.PT;
T #_log_PWWashTime;

//Close PW supply valve
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECn002;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECn002;


//Report Event Set
SET;
S #_Report_Evnt_008;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_ECn002;
L 	"dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k016;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Action Description
TITLE =S016:: STEP-016:: : ACTION CODE
ab16: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Start Timer for PW Empty
A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L #_TIME_PW_EMPTY2;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k016;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[16];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k016;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k016: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[16]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S016:STEP-016::Begin Transition

A016: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S016::STEP-016:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP017 STEP017 STEP017 STEP017 ST //
// STEP017 STEP017 STEP017 STEP017 ST //
// STEP017 STEP017 STEP017 STEP017 ST //
//----------------------------------------------------------------------------//
// Log actual FLz WFI wash time.
Set Flag for FLz_WFI_Wash_Complete; 

Divert Wash to SMFLx
Set Transfer Path EXy007 to substate Filtration_Mx
Open DVy125
Close DVy129

Flag parent ready for CIP_SMFLx
//----------------------------------------------------------------------------//
TITLE =S017: STEP-17::Sy_UO_CIP : Set Flag for FLz_WFI_Wash_Complete

S017: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S017:STEP-17:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A017; // Exit Action code, Jump to A017 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L017; // Action number loaded, Jump to L017--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L017: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r017; //Wrong Action number
      JU    _017; //Action error handling
       JU    aa17; //ACTION-01
JU    ab17; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r017: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k017; //Exit
_017: NOP   0; // Action error handling
      JU    k017; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //
TITLE =S017:: STEP-017:: : ACTION CODE
aa17: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//

      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k017;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //
TITLE =S017:: STEP-017:: : ACTION CODE
ab17: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//

      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k017;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[17];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k017;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k017: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[17]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S017:STEP-017::Begin Transition

A017: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S017::STEP-017:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP018 STEP018 STEP018 STEP018 ST //
// STEP018 STEP018 STEP018 STEP018 ST //
// STEP018 STEP018 STEP018 STEP018 ST //
//----------------------------------------------------------------------------//
// Log actual WFI SMFLx wash time.
Set Flag for SMFLx_WFI_Wash_Complete; 

Divert Wash to Sy_Drain
Set Transfer Path EXy007 to substate Sy_Drain
Open DVy127
Close DVy125
//----------------------------------------------------------------------------//
TITLE =S018: STEP-18::Sy_UO_CIP : SMFLx Wash Complete

S018: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S018:STEP-18:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A018; // Exit Action code, Jump to A018 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L018; // Action number loaded, Jump to L018--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L018: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r018; //Wrong Action number
      JU    _018; //Action error handling
       JU    aa18; //ACTION-01
JU    ab18; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r018: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k018; //Exit
_018: NOP   0; // Action error handling
      JU    k018; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Close PW supply valve.
TITLE =S018:: STEP-018:: : ACTION CODE
aa18: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log actual tank PW wash time
L #SQ_TIMER.PT;
T #_log_PWWashTime;

//Close PW supply valve
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECn002;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECn002;


//Report Event Set
SET;
S #_Report_Evnt_008;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_ECn002;
L 	"dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k018;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Action Description
TITLE =S018:: STEP-018:: : ACTION CODE
ab18: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Start Timer for PW Empty
A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L #_TIME_PW_EMPTY2;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k018;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[18];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k018;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k018: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[18]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S018:STEP-018::Begin Transition

A018: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S018::STEP-018:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP019 STEP019 STEP019 STEP019 ST //
// STEP019 STEP019 STEP019 STEP019 ST //
// STEP019 STEP019 STEP019 STEP019 ST //
//----------------------------------------------------------------------------//
// Log actual WFI Filling Transfer Line rinse time.
Close WFI supply valve. ECy002 (STATE=STOPPED)

Start timer to empty Tank TIME_WFI_EMPTY_Sy.
//----------------------------------------------------------------------------//
TITLE =S019: STEP-19::SY_UO_CIP : WFI Line Wash Complete. Wait for vessel to drain

S019: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S019:STEP-19:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A019; // Exit Action code, Jump to A019 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L019; // Action number loaded, Jump to L019--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L019: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r019; //Wrong Action number
      JU    _019; //Action error handling
       JU    aa19; //ACTION-01
JU    ab19; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r019: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k019; //Exit
_019: NOP   0; // Action error handling
      JU    k019; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual WFI Filling Transfer Line rinse time.
//Close WFI supply valve. ECxy02 (STATE=STOPPED)
//Start timer to empty Tank TIME_WFI_EMPTY
TITLE =S019:: STEP-019:: : ACTION CODE
aa19: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log actual tank WFI wash time
L #SQ_TIMER.PT;
T #_log_WFI_FTLRinseTime;

//Close WFI supply valve.
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECx102;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECx102;

//Report Event set
SET;
S #_Report_Evnt_016;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_ECx102;
L 	"dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k019;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Start Timer for WFI Empty.
TITLE =S019:: STEP-019:: : ACTION CODE
ab19: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Start Timer for WFI Empty.
A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L #_TIME_WFI_EMPTY;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k019;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[19];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k019;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k019: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[19]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S019:STEP-019::Begin Transition

A019: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Timer TIME_WFI_EMPTY_Sy expired.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S019::STEP 019:TRAN 013: Timer expire?
A #SQ_TIMER.Q;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S019:t013::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x013;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     20; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step20.

      JU    COMM; // Transition satisfied, Exit, go to next step
x013: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S019::STEP-019:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP020 STEP020 STEP020 STEP020 ST //
// STEP020 STEP020 STEP020 STEP020 ST //
// STEP020 STEP020 STEP020 STEP020 ST //
//----------------------------------------------------------------------------//
// Close CA supply valve: ECy001 STATE=STOPPED
//----------------------------------------------------------------------------//
TITLE =S020: STEP-20::SY_UO_CIP : Close CA supply valve

S020: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S020:STEP-20:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A020; // Exit Action code, Jump to A020 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L020; // Action number loaded, Jump to L020--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L020: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r020; //Wrong Action number
      JU    _020; //Action error handling
       JU    aa20; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r020: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k020; //Exit
_020: NOP   0; // Action error handling
      JU    k020; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Close CA supply valve
TITLE =S020:: STEP-020:: : ACTION CODE
aa20: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Close CA supply valve
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECxy01;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECxy01;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_ECxy01;
L 	"dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k020;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[20];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k020;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k020: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[20]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S020:STEP-020::Begin Transition

A020: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Steaming is required.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S020::STEP 020:TRAN 014: Is Steaming required?
A #_steaming_required;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S020:t014::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x014;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     21; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step21.

      JU    COMM; // Transition satisfied, Exit, go to next step
x014: NOP   0;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Jump
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S020::STEP 020:TRAN 015: Empty Transition
A M1.1; //Always High flag






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S020:t015::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x015;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     24; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step24.

      JU    COMM; // Transition satisfied, Exit, go to next step
x015: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S020::STEP-020:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP021 STEP021 STEP021 STEP021 ST //
// STEP021 STEP021 STEP021 STEP021 ST //
// STEP021 STEP021 STEP021 STEP021 ST //
//----------------------------------------------------------------------------//
// Flag parent ready for steaming by setting steaming_ready flag.
//----------------------------------------------------------------------------//
TITLE =S021: STEP-21::SY_UO_CIP : Wait for Steaming to be ready

S021: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S021:STEP-21:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A021; // Exit Action code, Jump to A021 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L021; // Action number loaded, Jump to L021--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L021: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r021; //Wrong Action number
      JU    _021; //Action error handling
       JU    aa21; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r021: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k021; //Exit
_021: NOP   0; // Action error handling
      JU    k021; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Flag parent ready for steaming by setting steaming_ready flag.
TITLE =S021:: STEP-021:: : ACTION CODE
aa21: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Flag parent ready for steaming.
SET;
S #_steaming_ready;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1; //Always High flag
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k021;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[21];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k021;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k021: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[21]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S021:STEP-021::Begin Transition

A021: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Parent indicates to proceed with steaming by setting the steaming_proceed flag.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S021::STEP 021:TRAN 016: Waiting for steaming to proceed
A #_steaming_proceed;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S021:t016::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x016;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     22; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step22.

      JU    COMM; // Transition satisfied, Exit, go to next step
x016: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S021::STEP-021:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP022 STEP022 STEP022 STEP022 ST //
// STEP022 STEP022 STEP022 STEP022 ST //
// STEP022 STEP022 STEP022 STEP022 ST //
//----------------------------------------------------------------------------//
// Open PS supply to steam tank and filling line: ECy002 STATE=FLUSH; MEDIUM=CS(WFI)

Start timer TIME_WFI_STEAM_Sy for CS supply.
//----------------------------------------------------------------------------//
TITLE =S022: STEP-22::SY_UO_CIP : Commence Filling Line steaming

S022: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S022:STEP-22:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A022; // Exit Action code, Jump to A022 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L022; // Action number loaded, Jump to L022--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L022: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r022; //Wrong Action number
      JU    _022; //Action error handling
       JU    aa22; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r022: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k022; //Exit
_022: NOP   0; // Action error handling
      JU    k022; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open PS supply to steam tank and filling line: ECxy02 STATE=FLUSH; MEDIUM=PS(WFI)
//Start timer TIME_WFI_STEAM_Sy for PS supply.
TITLE =S022:: STEP-022:: : ACTION CODE
aa22: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Open PS(WFI) supply to steam tank and filling line.
L "dbCONST".SEL.LIQUID.PSWFI;
T #_MEDIUM_ECx102;
SET;
S #_RUNtoTIME_ECxy01;
L #_TIME_WFI_STEAM_Sy;
T #_RUNTIME_ECxy01;

L "dbCONST_VAL".EM.EMC3.SUBS.FLUSH;
T #_SUB_ECx102;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECx102;

SET;
R #_steaming_ready;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_ECx102;
L "dbCONST_VAL".EM.EMC3.SUBS.FLUSH; 
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k022;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[22];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k022;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k022: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[22]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S022:STEP-022::Begin Transition

A022: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// TIME_WFI_STEAM_Sy expired?
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S022::STEP 022:TRAN 017: Timer expired?
A(;
L #_DEV_STATE_ECx102;
L 	"dbCONST_VAL".EM.DEV_STATE.COMPLETE;
==I;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S022:t017::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x017;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     23; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step23.

      JU    COMM; // Transition satisfied, Exit, go to next step
x017: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S022::STEP-022:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP023 STEP023 STEP023 STEP023 ST //
// STEP023 STEP023 STEP023 STEP023 ST //
// STEP023 STEP023 STEP023 STEP023 ST //
//----------------------------------------------------------------------------//
// Close PS supply valve. ECxy02 (STATE=STOPPED)

Log actual post CIP CS steaming time.
//----------------------------------------------------------------------------//
TITLE =S023: STEP-23::SY_UO_CIP : Filling Line steaming complete

S023: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S023:STEP-23:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A023; // Exit Action code, Jump to A023 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L023; // Action number loaded, Jump to L023--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L023: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r023; //Wrong Action number
      JU    _023; //Action error handling
       JU    aa23; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r023: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k023; //Exit
_023: NOP   0; // Action error handling
      JU    k023; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Close CS supply valve. ECxy02 (STATE=STOPPED)
//Log actual post CIP PS steaming time.
TITLE =S023:: STEP-023:: : ACTION CODE
aa23: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Close PS supply valve
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECx102;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECx102;

//Log actual post CIP CS steaming time.
L #SQ_TIMER.PT;
T #_log_SteamingTime;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_ECx102;
L 	"dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k023;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[23];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k023;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k023: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[23]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S023:STEP-023::Begin Transition

A023: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Jump
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S023::STEP 023:TRAN 018: Empty transition.
A M1.1; //Always High flag






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S023:t018::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x018;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     24; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step24.

      JU    COMM; // Transition satisfied, Exit, go to next step
x018: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S023::STEP-023:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP024 STEP024 STEP024 STEP024 ST //
// STEP024 STEP024 STEP024 STEP024 ST //
// STEP024 STEP024 STEP024 STEP024 ST //
//----------------------------------------------------------------------------//
// Open Sy VENT valve: ECxy01 STATE=VALVE_OPEN VALVE=VENT

Log Sy CIP operation end time.
//----------------------------------------------------------------------------//
TITLE =S024: STEP-24::SY_UO_CIP : Open vent valve

S024: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S024:STEP-24:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A024; // Exit Action code, Jump to A024 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L024; // Action number loaded, Jump to L024--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L024: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r024; //Wrong Action number
      JU    _024; //Action error handling
       JU    aa24; //ACTION-01
JU    ab24; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r024: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k024; //Exit
_024: NOP   0; // Action error handling
      JU    k024; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open Sy VENT valve: ECxy01 STATE=VALVE_OPEN VALVE=VENT
TITLE =S024:: STEP-024:: : ACTION CODE
aa24: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Open VENT valve:
SET;
R #_RUNtoTIME_ECxy01;
R #_AUXDRAIN_ECxy01;
R #_AUXVENT_ECxy01;

L "dbCONST_VAL".EM.EMC1.VALVE.VENT;
T #_VALVE_ECxy01;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED; 
T #_SUB_ECxy01;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECxy01;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_ECxy01;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED; 
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k024;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log Sy CIP operation end time.
TITLE =S024:: STEP-024:: : ACTION CODE
ab24: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Log Sy CIP operation end time.
L "dbCONST_VAL".CPU_TIME;
T #_log_SyCIPEnd;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k024;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[24];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k024;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k024: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[24]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S024:STEP-024::Begin Transition

A024: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Jump
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S024::STEP 024:TRAN 019: Empty Transition
A M1.1; //Always High flag






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S024:t019::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x019;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     25; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step25.

      JU    COMM; // Transition satisfied, Exit, go to next step
x019: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S024::STEP-024:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP025 STEP025 STEP025 STEP025 ST //
// STEP025 STEP025 STEP025 STEP025 ST //
// STEP025 STEP025 STEP025 STEP025 ST //
//----------------------------------------------------------------------------//
// Set Sy equipment to SAFE state:
ECx001 (STATE=STOPPED)
ECx102 (STATE=STOPPED)
EVxy04 (STATE=STOPPED)
//----------------------------------------------------------------------------//
TITLE =S025: STEP-25::SY_UO_CIP : Unit Operation Completed

S025: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S025:STEP-25:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A025; // Exit Action code, Jump to A025 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L025; // Action number loaded, Jump to L025--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L025: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r025; //Wrong Action number
      JU    _025; //Action error handling
       JU    aa25; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r025: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k025; //Exit
_025: NOP   0; // Action error handling
      JU    k025; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Set Sy equipment to SAFE state:
//ECxy01 (STATE=STOPPED)
//ECx102 (STATE=STOPPED)
//EVxy04 (STATE=STOPPED)
TITLE =S025:: STEP-025:: : ACTION CODE
aa25: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Open VENT valve:
L "dbCONST_VAL".EM.EMC1.VALVE.VENT;
T #_VALVE_ECxy01;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED; 
T #_SUB_ECxy01;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECxy01;

// Set Sy equipment to safe state:
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECx102;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECx102;

L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_EVxy04;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_EVxy04;


//Clear all used flags
SET;
R #_steaming_ready;
R #_wash_drain_done;
R #_RUNtoTIME_ECxy01;

//Report Event Reset
SET;
R #_Report_Evnt_011;
R #_Report_Evnt_012;
R #_Report_Evnt_013;
R #_Report_Evnt_014;
R #_Report_Evnt_015;
R #_Report_Evnt_016;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_ECxy01;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED; 
==I;
);
A(;
L #_DEV_STATE_ECx102;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
A(;
L #_DEV_STATE_EVxy04;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k025;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[25];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k025;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k025: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[25]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S025:STEP-025::Begin Transition

A025: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S025::STEP-025:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ SEQ FOOTER ================================//
// Common code to execute each scan:                                          //
//----------------------------------------------------------------------------//
TITLE =Sequencer Common Code, Execute in Each Scan

COMM: NOP   0;

NETWORK
TITLE =Retentive/Non Retentive Selectable Run timer

      CALL #sqRunTimer (
           TIME_H                   := #sqRunTimer.TIME_H,
           TIME_M                   := #sqRunTimer.TIME_M,
           TIME_S                   := #sqRunTimer.TIME_S,
           ENABLE                   := #sqRunTimer.ENABLE,
           RESET                    := #sqRunTimer.RESET,
           PAUSE                    := #sqRunTimer.PAUSE,
           NON_RET                  := #sqRunTimer.NON_RET,
           RMNG_H                   := #sqRunTimer.RMNG_H,
           RMNG_M                   := #sqRunTimer.RMNG_M,
           RMNG_S                   := #sqRunTimer.RMNG_S,
           TIME_EXPIRED             := #sqRunTimer.TIME_EXPIRED,
           TMR_RUNNG                := #sqRunTimer.TMR_RUNNG);

NETWORK
TITLE =Sequencer Step Timer

      CALL #sqStepTimer (
           IN                       := #sqStepTimer.IN,
           PT                       := "dbCONST_VAL".SQ_STEP_TIME,
           Q                        := #sqStepTimer.Q,
           ET                       := #sqStepTimer.ET);

NETWORK
TITLE =Sequencer Timer

 CALL #SQ_TIMER (
           IN                       := #SQ_TIMER.IN,
           PT                       := #SQ_TIMER.PT,
           Q                        := #SQ_TIMER.Q,
           ET                       := #SQ_TIMER.ET);

NETWORK
TITLE =General Assignments

      L     #sqSequencer.STEP.NumberNext;
      T     #NXT_STEP;
      T     #sqSequencer.STEP.NumberCurrent;
      T     #CURSTEP;

      A     #sqSequencer.STEP.Active;
      =     #S_ACTIVE;

      A     #sqSequencer.Error_Fault;
      =     #ERR_FAULT;

NETWORK
TITLE =Sequencer Finished

      AN    #OFF_IDLE;
      AN    #PAUSED;
      A     #sqSequencer.STEP.Done[25];
      =     #sqSequencer.Finished;
      =     #SQ_FINISHED;
      JCN   fnsd;
      L     "dbCONST_VAL".SQ_STATE.COMPLETE;
      T     #SQ_STATE;
      R     #PAUSED;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.Error_Fault;
fnsd: NOP   0;

      //----------------------------------------------------------------------//
      // Reset Finished flag if SQ OFF for Last step to scan:                 //
      //----------------------------------------------------------------------//
      A     #OFF_IDLE;
      AN    #sqSequencer.STEP.Done[25];
      AN    #sqSequencer.STEP.WithError[25];
      JCN   abrt;
      R     #sqSequencer.STEP.Finished;
      L     "dbCONST_VAL".SQ_STATE.ABORTED;
      T     #SQ_STATE;
      S     #OFF_IDLE;
      R     #PAUSED;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.Error_Fault;
      R     #PAUSED;
abrt: NOP   0;

//----------------------------------------------------------------------------//
// Visio Common Code Begin:                                                   //
//----------------------------------------------------------------------------//


//----------------------------------------------------------------------------//
// End of Sequencer:                                                          //
//----------------------------------------------------------------------------//
END_FUNCTION_BLOCK

