//****************************************************************************************************
// Code generated by SFC Generator V1.13 on 01/05/18 09:46:18 by  David Paspa from File F:\Business\Synertec\MPI.SMS\automation\code\awlMaster\stencil\seq_hdr.awl
//****************************************************************************************************
//****************************************************************************************************

//================================ SEQ HEADER ================================//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Title: UO_SY_CIP                                                       //
//                                                                            //
// Description:                                                               //
// Unit Operation for setup of storage vessel equipment                                                        //
//                                                                            //
// // SFC Revision History:
// Rev By               Date        CC         Note
// 0.1 Gerald Kontriner 14-Sep-2009            SFC structural design                                                       //
//----------------------------------------------------------------------------//
// Sequencer Revision History:                                                //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      05-Jan-2018 NA        Reboot for S7-1500.             //
// 1.6 Khairul Basar    19-Nov-2009 NA        Reset #sqSequencer.STEP.Active  //
//                                            when STEP Finished.             //
// 1.5 Khairul Basar    15-Oct-2009 NA        Placeholder inserted:           //
//                                            "udtSQ_UO";          //
// 1.4 Khairul Basar    06-Oct-2009 NA        R #PAUSE;                       //
// 1.3 Khairul Basar    30-Sep-2009 NA        SEQ_HDR change STEP-0 code      //
//                                            deleted.                        //
// 1.2 Khairul Basar    26-Sep-2009 NA        Refer R4.                       //
// 1.1 Khairul Basar    23-Sep-2009 NA        Refer R3.                       //
// 1.0 Khairul Basar    20-Sep-2009 NA        STEP.Finished flag reset by     //
//                                            JUMP_MAN.                       //
// 0.9 Khairul Basar    11-Sep-2009 NA        SQ_TIMER added as VAR, declared //
//                                            in SEQ_FTR.                     //
// 0.8 Khairul Basar    09-Sep-2009 NA        SqSequencer.Err_Fault is reset  //
//                                            on Stop cmd, Step-0 dead code   //
//                                            deleted from ACT & Verify.      //
//                                            STP_FTR Step_withErr flag       //
//                                            STEP_NUM place holder           //
//                                            configured.                     //
// 0.7 Khairul Basar    28-Aug-2009 NA        SQ_FINISHED OUT added again.    //
//                                            Deleted during major mod R3.    //
// 0.6 Khairul Basar    23-Aug-2009 NA        Refer R2.                       //
// 0.5 Khairul Basar    23-Aug-2009 NA        Refer R1.                       //
// 0.4 Khairul Basar    18-Aug-2009 NA        Reset Step done with/out error  //
//                                            bits using FC:RSET.             //
// 0.3 David Paspa      16-Aug-2009 NA        Added placeholders for header   //
//                                            name and version and revision   //
//                                            history.                        //
// 0.2 Khairul Basar    11-Aug-2009 NA        Retired external udt file for   //
//                                            Static type parameters. All     //
//                                            parameters now IN, OUT or       //
//                                            IN_OUT.                         //
// 0.1 Khairul Basar    12-Jun-2009 NA        Initial design.                 //
//----------------------------------------------------------------------------//
// R4:                                                                        //
// 1.If SQ not finished Resume command will start Step timer, and redo the    //
// last action, verify the feedback.                                          //
// 2."STEP.finished" flag is ANDed with "TRN_AND_JUMP" in the snippet file    //
// TRN_HDR.This is to avoid checking of transition logic if STEP is not       //
// finished yet.                                                              //
// 3.MDCH, Load & transfer typo corrected.                                    //
//                                                                            //
// R3:                                                                        //
// 1.SqStepTimer.IN is reset in STEP_FTR instead of resetting it in TRN_HDR.  //
// This is because TRN_HDTR is not included in the Last step and StepTimer    //
// must reset in the last step.                                               //
// 2.Reset all the timers when SQ stops.Reset done in SEQ_HDR.                //
// Also STEP-finished flag reset when SQ is OFF to                            //
// scan last step.                                                            //
//                                                                            //
// R2:                                                                        //
// 1.Any step error will send the Sequencer into Pause state.Code added in    //
// SEQ_HDR.Snippet Place holder for Bool-array 16 is   //
// deleted.                                                                   //
//                                                                            //
// R1:                                                                        //
// 1.sqStepTimer:All Verification Code must satisfy the condition finish step //
// action within STEP_DELAY time(40s).If step actions not finished within the //
// time period the error flag will raise High signal.Else timer will reset.   //
// 2.sqRunTimer Added therefore can be used as retentive & non retentive.     //
// 3.sqSequencer: This is re-structured UDT which is redefined the symbol     //
// names as well as it gives more clearity.                                   //
// 4.fcMODE and fcCMD functions are added to handle the mode & command        //
// independently regardless of other logic.Two separate UDT udtMODE & udt     //
// CMD assigned to Mode & command function respectively.                      //
// 5.MAN_JUMP programed for manual mode jump operation with or without        //
// Transition code satisfied.TRN_AND_JUMP & NO_VERIFC are the parameters      //
// which will define whether verification code & transition code need to be   //
// checked to perform jump operation.                                         //
// 6.Auto to Manual switchover will be bumpless & will not affect step        //
// operation.Manual to auto switchover can be used to resume Step action at   //
// defined.                                                                   //
// Step number entered in STEPNO_JUMP.                                        //
//                                                                            //
// Parameters:                                                                //
// INPUTS                                                                     //
// ======                                                                     //
// SQ_CMD          Sequence command input inherited from object block         //
//                 0: off/idle                                                //
//                 1: start/initiate                                          //
//                 2: pause                                                   //
//                 3: resume                                                  //
//                 4: reserved (not programmed)                               //
//                 5: reserved (not programmed)                               //
//                 6: abort/go to last step                                   //
//                 7: acknowledge error/fault                                 //
// SQ_MODE         Sequencer Auto/Manual input inherited from object block    //
//                 1: manual                                                  //
//                 2: auto                                                    //
//                                                                            //
// INPUT/OUTPUTS                                                              //
// =============                                                              //
// SQ_JUMP_MAN     Allows manual jumping from one step to the next step. The  //
//                 manual jump flag is ORed with the transition process       //
//                 condition and so can be used to bypass the condition if the//
//                 sequence will not progress.                                //
//                 This input can also be used to jump to any step even       //
//                 when no transition -> step linkage exists. This is only    //
//                 possible when the SQ_MODE is in manual and SQ is in the    //
//                 idle step. The step to jump to is specified in             //
//                 SQ_man_jump_to_step (not accesseble by this FB in/out      //
//                 interface but a separate DB memory location).              //
//                                                                            //
// OUTPUTS                                                                    //
// =======                                                                    //
// SQ_STATE        The calculated state of the sequence                       //
//                 0: off/idle                                                //
//                 1: start/initiated                                         //
//                 2: paused                                                  //
//                 3: resumed                                                 //
//                 4: reserved (wrong Mode)                                   //
//                 5: reserved (Wrong commad)                                 //
//                 6: aborted/go to last step                                 //
//                 7: acknowledged error/fault                                //
// CURSTEP         Current step being proccessed.                             //
// S_ACTIVE        If current step is active                                  //
// NXT_STEP        Next step to jump to if transition condition is true       //
// ERR_FAULT       True if any error/ or fault present                        //
// PAUSED          True if step is paused                                     //
// OFF_IDLE        Sequence is not running but ready for next SQ (in step=0)  //
//----------------------------------------------------------------------------//
// Define variables:                                                          //
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "fbUO_SY_CIP"
TITLE = UO : SY_CIP
NAME : SUCIP
AUTHOR : REO
VERSION : 0.1

VAR_INPUT
  MODE : INT :=2;
  SQ_CMD : INT :=0;
    _time_wfi_line_smflx :TIME ;	//Description
    _time_pw_line_smflx :TIME ;	//SMFLx rinse time with PW
    _emx_transfer_state :INT ;	//Device State of emx_transfer
    _emx_drain_state :INT ;	//Device State of emx_drain
    _time_wfi_steam_sy :TIME ;	//Timer For WFI PS Steam
    _time_pw_line_flz :TIME ;	//PW FPZ rinse time
    _time_pw_steam_sy :TIME ;	//Timer For PW PS Steam
    _steaming_proceed :BOOL ;	//Steaming to proceed flag
    _cip_fill_ready :BOOL ;	//Sy is setup to wash fill line
    _emc_water_state :INT ;	//Device State of emc_water
    _emv_vessel_state :INT ;	//Device State of emv_vessel
    _emc_gas_state :INT ;	//Device State of emc_gas
    _ema_vessel_state :INT ;	//Device State of ema_vessel
    _time_wfi_empty_sy :TIME ;	//Time to wait to empty the vessel after WFI rinse
    _time_wfi_line_flz :TIME ;	//Time for WFI rinse of filling line
    _time_wfi_tank :TIME ;	//Time for WFI rinse of vessel
    _time_pw_empty_sy :TIME ;	//Time to empty the vessel after the PW wash
    _time_pw_wash_sy :TIME ;	//PW vessel wash time

END_VAR
VAR_OUTPUT
  SQ_STATE : INT ;
  CURSTEP : INT ;
  NXT_STEP : INT ;
  S_ACTIVE : BOOL ;
  ERR_FAULT : BOOL ;
  PAUSED : BOOL ;
  OFF_IDLE : BOOL ;
  SQ_FINISHED : BOOL ;
    _emc_water_runtime :TIME ;	//run time for emc_water
    _emx_transfer_cmd :INT ;	//Command to emx_transfer
    _emx_transfer_subs :INT ;	//Substate selection emx_transfer
    _emx_drain_cmd :INT ;	//Command to emx_drain
    _emx_drain_subs :INT ;	//Substate selection emx_drain
    _steaming_ready :BOOL ;	//Ready to steam filling line
    _wash_drain_done :BOOL ;	//Set Wash Drain Complete
    _emc_gas_subs :INT ;	//Substate selection to emc_gas
    _emv_vessel_subs :INT ;	//Substate selection to emv_vessel
    _emc_water_subs :INT ;	//Substate selection to emc_water
    _emc_water_cmd :INT ;	//Command to emc_water
    _emv_vessel_cmd :INT ;	//Command to emv_vessel
    _emc_gas_medium :INT ;	//Medium selection ECx102
    _emc_gas_cmd :INT ;	//Command to emc_gas
    _ema_vessel_subs :INT ;	//Substate selection to ema_vessel
    _ema_vessel_cmd :INT ;	//Command to ema_vessel

END_VAR
VAR_IN_OUT
  STEPNO_JUMP : INT ;
  MAN_JUMP : BOOL ;
  NO_VERIFIC : BOOL ;
  TRN_AND_JUMP : BOOL ;

END_VAR
VAR
  sqStepTimer : "TON";
  sqRunTimer : "fbRunTimer";
  sqSequencer : "udtSFCSequence";
  SQ_TIMER: "TON";
    _prompt_steam_confirm_no :BOOL ;	//Flag indicating if steaming is not required
    _prompt_steam :BOOL ;	//Prompt operator to confirm continue steaming
    _wfi_steam_begin_time :TOD ;	//Description
    _wfi_steam_end_time :TOD ;	//Description
    _time_act_wfi_wfi_steam :TIME ;	//Actual post CIP PS steaming time
    _log_time_act_wfi_wfi_steam :BOOL ;	//Description
    _wfi_smflx_rinse_begin_time :TOD ;	//Description
    _wfi_smflx_rinse_end_time :TOD ;	//Description
    _time_act_wfi_smflx_rinse :TIME ;	//Description
    _log_time_act_wfi_smflx_rinse :BOOL ;	//Description
    _wfi_flz_rinse_begin_time :TOD ;	//Description
    _wfi_flz_rinse_end_time :TOD ;	//Description
    _time_act_wfi_flz_rinse :TIME ;	//Description
    _log_time_act_wfi_flz_rinse :BOOL ;	//Description
    _wfi_wash_begin_time :TOD ;	//Description
    _wfi_wash_end_time :TOD ;	//Description
    _time_act_wfi_wash :TIME ;	//Actual WFI wash drain rinse time
    _log_time_act_wfi_wash :BOOL ;	//Description
    _pw_steam_begin_time :TOD ;	//Description
    _pw_steam_end_time :TOD ;	//Description
    _time_act_pw_steam :TIME ;	//Actual PW line steaming time
    _log_time_act_pw_steam :BOOL ;	//Description
    _pw_smflx_rinse_begin_time :TOD ;	//Description
    _pw_smflx_rinse_end_time :TOD ;	//Description
    _time_act_pw_smflx_rinse :TIME ;	//Description
    _log_time_act_pw_smflx_rinse :BOOL ;	//Description
    _pw_flz_rinse_begin_time :TOD ;	//Description
    _pw_flz_rinse_end_time :TOD ;	//Description
    _pw_wash_begin_time :TOD ;	//PW wash begin time
    _pw_wash_end_time :TOD ;	//PW wash end time
    _log_time_act_pw_wash :BOOL ;	//Flags the HMI to log actual PW wash time.
    _time_act_pw_flz_rinse :TIME ;	//Description
    _log_time_act_pw_flz_rinse :BOOL ;	//Description
    _log_time_cip_begin :BOOL ;	//Flags the HMI that CIP started
    _log_time_cip_end :BOOL ;	//Flags the HMI that CIP ended
    _Report_Evnt_016 :BOOL ;	//WFI Rinse Line Fill End for batch report
    _Report_Evnt_015 :BOOL ;	//WFI Rinse Line Fill Start for batch Report
    _Report_Evnt_014 :BOOL ;	//WFI Rinse End for Batch Report
    _Report_Evnt_013 :BOOL ;	//WFI Rinse Start for Batch Report
    _Report_Evnt_012 :BOOL ;	//PW Wash End for Batch Report
    _Report_Evnt_011 :BOOL ;	//PW Wash Start for batch Report
    _time_act_pw_wash :TIME ;	//Logging time used for washing with PW
    _time_cip_end :TOD ;	//Logging Sy CIP Operation End Time
    _time_cip_begin :TOD ;	//Logging Sy CIP Operation Begin Time
    _prompt_steam_confirm_yes :BOOL ;	//Flag indicating if steaming is required

END_VAR
BEGIN
NETWORK
TITLE =Call Mode checking function

      L     #MODE;
      T     #sqSequencer.MODE.current;
      CALL "fcSFCMode" (
           Mode                     := #sqSequencer.MODE);

NETWORK
TITLE =Call Command checking function

      L     #SQ_CMD;
      T     #sqSequencer.CMD.New;

      CALL "fcSFCCommand" (
           Comand                   := #sqSequencer.CMD);

NETWORK
TITLE =Sequencer Mode function

      A     #sqSequencer.MODE.changed;
      JC    MDCH; // if Mode changed,jump to mode change function
      A     #sqSequencer.MODE.manual;
      JC    MANU;
      A     #sqSequencer.MODE.auto;
      JC    AUTO;
      A     #sqSequencer.MODE.oos;
      JC    OOS;
      A     #sqSequencer.MODE.wrong;
      JC    WRMD;
      JU    EMOD;

NETWORK
//----------------------------------------------------------------------------//
// On positive edge of mode change , this will execute once, only one cycle   //
// before going to execute the selected mode function below:                  //
//----------------------------------------------------------------------------//
TITLE =Mode change function
MDCH: NOP   0;
      SET   ;
      R     #sqStepTimer.IN;
      L     #sqSequencer.STEP.NumberCurrent;
      T     #STEPNO_JUMP;
      JU    EMOD;

NETWORK
//----------------------------------------------------------------------------//
// #TRN_AND_JUMP=can set/reset                                                //
// #sqSequencer.STEP.JumpCtrl=Can set/reset by #MAN_JUMP                      //
// #NO_VERIFIC=Can set/ Reset                                                 //
//----------------------------------------------------------------------------//
TITLE =Manual Mode function
MANU: NOP   0; //Manual mode selected



      A     #MAN_JUMP;
      =     #sqSequencer.STEP.JumpCtrl;
      A     #MAN_JUMP;
      JCN   EMOD;

      L     #STEPNO_JUMP;
      T     #sqSequencer.STEP.NumberNext;
      T     #sqSequencer.STEP.NumberCurrent;
      R     #MAN_JUMP; //Reset MAN_JUMP after loading user destination Step number
      R     #sqSequencer.STEP.Finished; //Reset finish flag, to execute next step action
      JU    EMOD;

NETWORK
//----------------------------------------------------------------------------//
// #TRN_AND_JUMP=always set                                                   //
// #sqSequencer.STEP.JumpCtrl=Always set                                      //
// #NO_VERIFIC=Alwasy Reset                                                   //
//----------------------------------------------------------------------------//
TITLE =Auto Mode function
AUTO: NOP   0; //Auto mode selected



      R     #MAN_JUMP;
      S     #TRN_AND_JUMP;
      R     #NO_VERIFIC;
      S     #sqSequencer.STEP.JumpCtrl; //Always Set in auto mode

      L     #sqSequencer.STEP.NumberCurrent;
      T     #STEPNO_JUMP;
      JU    EMOD;
NETWORK
TITLE =OOS mode function

OOS:  NOP   0; // Out of service
      JU    EMOD;
WRMD: NOP   0; //Wrong mode selected
      S     #sqSequencer.Error_Fault;
      L     "dbCONST".SEQ.STATE.WRMODE;
      T     #SQ_STATE;

      JU    EMOD;

NETWORK
TITLE =Mode not changedd

      NOP   0;

NETWORK
TITLE =End Mode function

EMOD: NOP   0;

NETWORK
TITLE =An error will Pause the Sequencer,Operator must Resume SQ to run

      A     #sqSequencer.Error_Fault;
      AN    #sqSequencer.CMD.Changed;
      JC    PAUS;

NETWORK
TITLE =Command Action function

      A     #sqSequencer.CMD.Changed;
      JCN   CNCH; // if Command not changed,jump to end function
      R     #sqStepTimer.IN;


      A     #sqSequencer.CMD.Start;
      JC    STRT;

      A     #sqSequencer.CMD.Stop;
      JC    STOP;


      A     #sqSequencer.CMD.Pause;
      JC    PAUS;

      A     #sqSequencer.CMD.Resume;
      JC    RESM;

      A     #sqSequencer.CMD.Abort;
      JC    ABRT;

      A     #sqSequencer.CMD.Ack;
      JC    ACKN;

      A     #sqSequencer.CMD.wrong;
      JC    WCMD;

      JU    ECMD; //Wrong command/not specified command
//End Comand function

NETWORK
TITLE =Comand -Start/Initiate action function

STRT: NOP   0;
      R     #OFF_IDLE;
      R     #PAUSED;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;
      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.TimerExpired;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqStepTimer.IN;

      S     #sqRunTimer.RESET;

//----------------------------------------------------------------------------//
// Load Initial step Number:                                                  //
//----------------------------------------------------------------------------//
      L     1;
      T     #sqSequencer.STEP.Initial;
      L     #sqSequencer.STEP.Initial;
      T     #sqSequencer.STEP.NumberCurrent;
      T     #sqSequencer.STEP.NumberNext;




      L     "dbCONST".SEQ.STATE.STARTED;
      T     #SQ_STATE;

//----------------------------------------------------------------------------//
// Reset Step done without error bits:                                        //
//----------------------------------------------------------------------------//
      CALL "RSET" (
           S_BIT                    := #sqSequencer.STEP.Done[1],
           N                        := 16);//Upto final step


//----------------------------------------------------------------------------//
// Reset Step done with error bits:                                           //
//----------------------------------------------------------------------------//
      CALL "RSET" (
           S_BIT                    := #sqSequencer.STEP.WithError[1],
           N                        := 16);//Upto final step

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Stop action function

STOP: NOP   0;
      S     #OFF_IDLE;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;
      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.TimerExpired;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.Error_Fault;
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqRunTimer.ENABLE;
      R     #sqStepTimer.IN;
      R     #SQ_TIMER.IN;
      R     #PAUSED;


//Go to last step
      L     16;
      T     #sqSequencer.FinalStep;
      L     #sqSequencer.FinalStep;
      T     #sqSequencer.STEP.NumberNext;
      L     "dbCONST".SEQ.STATE.OFF_IDLE;
      T     #SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Pause action function

PAUS: NOP   0;
      S     #PAUSED;
      R     #S_ACTIVE;
      S     #sqRunTimer.PAUSE;
      L     #sqSequencer.STEP.NumberCurrent;
      T     #STEPNO_JUMP;
      L     "dbCONST".SEQ.STATE.PAUSED;
      T     #SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Resume action function

RESM: NOP   0;
      R     #PAUSED;
      R     #sqRunTimer.PAUSE;
      R     #sqStepTimer.IN; //Reset Step timer
      L     "dbCONST".SEQ.STATE.RESUMED;
      T     #SQ_STATE;

      A     #SQ_FINISHED;
      JC    ECMD;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Abort action function

ABRT: NOP   0;
      L     "dbCONST".SEQ.STATE.ABORTED;
      T     #SQ_STATE;

      JC    STOP; //Stop & Abort same
      JU    ECMD;

NETWORK
TITLE =Comand -Acknowledge action function

ACKN: NOP   0;
      R     #ERR_FAULT;
      R     #sqSequencer.Error_Fault;
      L     "dbCONST".SEQ.STATE.ACKNOWLEDGED;
      T     #SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -wrong/unavailable

WCMD: NOP   0;

      S     #sqSequencer.Error_Fault;
      L     "dbCONST".SEQ.STATE.WRCMD;
      T     #SQ_STATE;

      JU    ECMD;
NETWORK
TITLE =Comand -not changedd

CNCH: NOP   0; // Command not changed

NETWORK
TITLE =End command Function

ECMD: NOP   0;

NETWORK
//----------------------------------------------------------------------------//
// Sequencer step jump list. Load the step number to execute the step:        //
//----------------------------------------------------------------------------//
TITLE =Sequencer Step Jump distrubution list
      L     #sqSequencer.STEP.NumberCurrent;
      JL    SQER; // If Sequencer Step number invalid or greater than available number of step
      JU    S000; // Exceptional Error Handling
      JU    S001; // STEP-001:
JU    S002; // STEP-002:
JU    S003; // STEP-003:
JU    S004; // STEP-004:
JU    S005; // STEP-005:
JU    S006; // STEP-006:
JU    S007; // STEP-007:
JU    S008; // STEP-008:
JU    S009; // STEP-009:
JU    S010; // STEP-010:
JU    S011; // STEP-011:
JU    S012; // STEP-012:
JU    S013; // STEP-013:
JU    S014; // STEP-014:
JU    S015; // STEP-015:
JU    S016; // STEP-016:


//----------------------------------------------------------------------------//
// If Step number is Invalid or Out of Range:                                 //
//----------------------------------------------------------------------------//
SQER: NOP   0;
      S     #sqSequencer.Error_Fault;
      JU    COMM; // Jump to Common Sequencer code handling function

NETWORK
//----------------------------------------------------------------------------//
// STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 ST //
// STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 ST //
// STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 ST //
//----------------------------------------------------------------------------//
TITLE =STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP

NETWORK
TITLE =S000: STEP0::If Paused exit

S000: NOP   0;

      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP001 STEP001 STEP001 STEP001 ST //
// STEP001 STEP001 STEP001 STEP001 ST //
// STEP001 STEP001 STEP001 STEP001 ST //
//----------------------------------------------------------------------------//
// Log CIP operation begin time.
Open tank path to outlet drain line.
Open Sy tank outlet valve.
//----------------------------------------------------------------------------//
TITLE =S001: STEP-01::SY_UO_CIP : Unit Operation Commenced

S001: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S001:STEP-01:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A001; // Exit Action code, Jump to A001 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L001; // Action number loaded, Jump to L001--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L001: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r001; //Wrong Action number
      JU    _001; //Action error handling
       JU    aa01; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r001: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k001; //Exit
_001: NOP   0; // Action error handling
      JU    k001; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log CIP operation begin time.
//Open tank path to outlet drain line.
//Open Sy tank outlet valve (DISCHARGE)
TITLE =S001:: STEP-001:: : ACTION CODE
aa01: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log Sy CIP operation begin time.
L "dbCONST".CHRONO.CPU_TIME;
T #_time_cip_begin;

SET;
S #_log_time_cip_begin;

// Open Sy outlet valve
L "dbCONST".BLK.EMV1.SUBS.DISCHARGE;
T #_emv_vessel_subs;
L "dbCONST".BLK.CMD.START;
T #_emv_vessel_cmd;

L "dbCONST".BLK.EMX2.SUBS.CIP_SY;
T #_emx_transfer_subs;
L "dbCONST".BLK.CMD.START;
T #_emx_transfer_cmd;

L "dbCONST".BLK.EMX4.SUBS.CIP;
T #_emx_drain_subs;
L "dbCONST".BLK.CMD.START;
T #_emx_drain_cmd;



//Report Event Reset
SET;
R #_Report_Evnt_011;
R #_Report_Evnt_012;
R #_Report_Evnt_013;
R #_Report_Evnt_014;
R #_Report_Evnt_015;
R #_Report_Evnt_016;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_emv_vessel_state;
L "dbCONST".BLK.EMV1.SUBS.DISCHARGE;
==I;
);
A(;
L #_emx_transfer_state;
L "dbCONST".BLK.EMX2.SUBS.CIP_SY;
==I;
);
A(;
L #_emx_drain_state;
L "dbCONST".BLK.EMX4.SUBS.CIP;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k001;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[01];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k001;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k001: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[01]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S001:STEP-001::Begin Transition

A001: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// EVn004 substate DISCHARGE is complete and Parent indicates SMFLx, FPz and FLz Units ready for flushing.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S001::STEP 001:TRAN 001: Discharge Complete?
A(;
L   #_emv_vessel_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S001:t001::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x001;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     02; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step02.

      JU    COMM; // Transition satisfied, Exit, go to next step
x001: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S001::STEP-001:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP002 STEP002 STEP002 STEP002 ST //
// STEP002 STEP002 STEP002 STEP002 ST //
// STEP002 STEP002 STEP002 STEP002 ST //
//----------------------------------------------------------------------------//
// Open HPCA supply valve. 
Start timer to flush Tank Sy_TIME_PW_WASH.

Open PW supply to flush tank.
//----------------------------------------------------------------------------//
TITLE =S002: STEP-02::SY_UO_CIP : Commence Flush with PW

S002: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S002:STEP-02:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A002; // Exit Action code, Jump to A002 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L002; // Action number loaded, Jump to L002--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L002: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r002; //Wrong Action number
      JU    _002; //Action error handling
       JU    aa02; //ACTION-01
JU    ab02; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r002: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k002; //Exit
_002: NOP   0; // Action error handling
      JU    k002; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open HPCA supply valve. 
//Load TIME_PW_WASH.
//
TITLE =S002:: STEP-002:: : ACTION CODE
aa02: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Open CA supply valve
L "dbCONST".SEL.GAS.HPCA;
T #_emc_gas_medium;
L "dbCONST".BLK.EMC1.SUBS.VALVE;  
T #_emc_gas_sub;
L "dbCONST".BLK.CMD.START;
T #_emc_gas_cmd;

//Load TIME_PW_WASH_Sy.
SET;
L #_time_pw_wash_sy;
T #_emc_water_runtime;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_emc_gas_state;
L "dbCONST".BLK.EMC1.SUBS.VALVE;  
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k002;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open PW supply and start FLUSH.
//Store PW Wash begin time.
TITLE =S002:: STEP-002:: : ACTION CODE
ab02: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Open PW supply.
L "dbCONST".SEL.LIQUID.PW;
T #_emc_water_medium;
L "dbCONST".BLK.EMC3.SUBS.FLUSH;
T #_emc_water_subs;
L "dbCONST".BLK.CMD.START;
T #_emc_water_cmd;

//Store PW Wash begin time.
L "dbCONST".CHRONO.CPU_TIME;
T #_pw_wash_begin_time;

//Report Event Set
SET;
S #_Report_Evnt_011;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if emc_water changed to substate FLUSH.
A(;
L   #_emc_water_state;
L   "dbCONST".BLK.EMC3.SUBS.FLUSH;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k002;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[02];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k002;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k002: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[02]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S002:STEP-002::Begin Transition

A002: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Timer Sy_TIME_PW_WASH expired.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S002::STEP 002:TRAN 002: Timer expired
A(;
L   #_emc_water_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S002:t002::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x002;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     03; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step03.

      JU    COMM; // Transition satisfied, Exit, go to next step
x002: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S002::STEP-002:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP003 STEP003 STEP003 STEP003 ST //
// STEP003 STEP003 STEP003 STEP003 ST //
// STEP003 STEP003 STEP003 STEP003 ST //
//----------------------------------------------------------------------------//
// Log actual Sy PW wash time.
Divert path to Filling Machine FLz and Drain Line.

Start Timer for rinse FLz with PW.
//----------------------------------------------------------------------------//
TITLE =S003: STEP-03::Sy_UO_CIP : Set Flag for Sy_PW_Wash_Complete

S003: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S003:STEP-03:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A003; // Exit Action code, Jump to A003 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L003; // Action number loaded, Jump to L003--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L003: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r003; //Wrong Action number
      JU    _003; //Action error handling
       JU    aa03; //ACTION-01
JU    ab03; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r003: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k003; //Exit
_003: NOP   0; // Action error handling
      JU    k003; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual tank PW wash time
//Divert path to Filling Machine FLz and Drain Line.
//Stop emx_drain.
//
TITLE =S003:: STEP-003:: : ACTION CODE
aa03: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Store PW wash end time.
L "dbCONST".CHRONO.CPU_TIME;
T #_pw_wash_end_time;

//Log actual tank PW wash time.
CALL T_DIFF
{date_type := 'Time_Of_Day', time_type := 'Time'}
(  IN1                         := #_pw_wash_begin_time ,
   IN2                         := #_pw_wash_end_time ,
  OUT                         := #_time_act_pw_wash
);
SET;
S #_log_time_act_pw_wash;

//Divert path to Filling Machine FLz and Drain Line.
      L     "dbCONST".BLK.EMX2.SUBS.FILL_SY;
      T     #_emx_transfer_subs;
      L     "dbCONST".BLK.CMD.START;
      T     #_emx_transfer_cmd;

//Stop emx_drain.
L "dbCONST".BLK.SAFE.CMD;
T  #_emx_drain_subs;
L "dbCONST".BLK.CMD.STOP;
T  #_emx_drain_cmd;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;    
      L     #_emx_transfer_state;
      L     "dbCONST".BLK.EMX2.SUBS.FILL_SY;
      ==I   
 );
A(;
L #_emx_drain_state;
L "dbCONST".BLK.STATE.STOPPED;
==I;
);

      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k003;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Start Timer for rinse FLz with PW.
TITLE =S003:: STEP-003:: : ACTION CODE
ab03: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      L #_time_pw_line_flz;
T #_emc_water_runtime;

// Open PW supply.
L "dbCONST".SEL.LIQUID.PW;
T #_emc_water_medium;
L "dbCONST".BLK.EMC3.SUBS.FLUSH;
T #_emc_water_subs;
L "dbCONST".BLK.CMD.START;
T #_emc_water_cmd;

//Store FLz rinse begin time.
L "dbCONST".CHRONO.CPU_TIME;
T #_pw_flz_rinse_begin_time;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if emc_water changed to substate FLUSH.
A(;
L   #_emc_water_state;
L   "dbCONST".BLK.EMC3.SUBS.FLUSH;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k003;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[03];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k003;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k003: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[03]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S003:STEP-003::Begin Transition

A003: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// FLz Rinse Complete
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S003::STEP 003:TRAN 003: FLz Rinse Complete
A(;
L   #_emc_water_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S003:t003::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x003;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     04; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step04.

      JU    COMM; // Transition satisfied, Exit, go to next step
x003: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S003::STEP-003:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP004 STEP004 STEP004 STEP004 ST //
// STEP004 STEP004 STEP004 STEP004 ST //
// STEP004 STEP004 STEP004 STEP004 ST //
//----------------------------------------------------------------------------//
// Log actual FLz PW rinse time.

Divert path to SMFLx.
Close path to Filling Macine FLz and Drain Line.

Start Timer for SMFLx rinse.
//----------------------------------------------------------------------------//
TITLE =S004: STEP-04::Sy_UO_CIP : Set Flag for FLz_PW_Wash_Complete

S004: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S004:STEP-04:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A004; // Exit Action code, Jump to A004 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L004; // Action number loaded, Jump to L004--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L004: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r004; //Wrong Action number
      JU    _004; //Action error handling
       JU    aa04; //ACTION-01
JU    ab04; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r004: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k004; //Exit
_004: NOP   0; // Action error handling
      JU    k004; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual PW Filling Transfer Line and Filling Machine rinse time.
//Divert path to SMFLx.
TITLE =S004:: STEP-004:: : ACTION CODE
aa04: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Store PW FLz rinse end time.
L "dbCONST".CHRONO.CPU_TIME;
T #_pw_flush_end_time;

//Log actual PW FLz rinse time.
CALL T_DIFF
{date_type := 'Time_Of_Day', time_type := 'Time'}
(  IN1                         := #_pw_flz_rinse_end_time ,
   IN2                         := #_pw_flz_rinse_end_time ,
  OUT                         := #_time_act_pw_flz_rinse
);
SET;
S #_log_time_act_flz_rinse;

//Switch path to Filtration Line SMFLx.
      L     "dbCONST".BLK.EMX2.SUBS.FILTER;  
      T     #_emx_transfer_subs;
      L     "dbCONST".BLK.CMD.START;
      T     #_emx_transfer_cmd;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;    
      L     #_emx_transfer_state;
      L     "dbCONST".BLK.EMX2.SUBS.FILTER;
      ==I   
 );
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k004;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Start Timer for SMFLx rinse.
TITLE =S004:: STEP-004:: : ACTION CODE
ab04: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      L #_time_pw_line_smflx;
T #_emc_water_runtime;

// Open PW supply.
L "dbCONST".SEL.LIQUID.PW;
T #_emc_water_medium;
L "dbCONST".BLK.EMC3.SUBS.FLUSH;
T #_emc_water_subs;
L "dbCONST".BLK.CMD.START;
T #_emc_water_cmd;

//Store SMFLx rinse begin time.
L "dbCONST".CHRONO.CPU_TIME;
T #_pw_smflx_rinse_begin_time;


//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if emc_water changed to substate FLUSH.
A(;
L   #_emc_water_state;
L   "dbCONST".BLK.EMC3.SUBS.FLUSH;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k004;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[04];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k004;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k004: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[04]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S004:STEP-004::Begin Transition

A004: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// SMFLx Wash Complete
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S004::STEP 004:TRAN 004: SMFLx Wash Complete
A(;
L   #_emc_water_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S004:t004::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x004;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     05; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step05.

      JU    COMM; // Transition satisfied, Exit, go to next step
x004: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S004::STEP-004:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP005 STEP005 STEP005 STEP005 ST //
// STEP005 STEP005 STEP005 STEP005 ST //
// STEP005 STEP005 STEP005 STEP005 ST //
//----------------------------------------------------------------------------//
// Log actual PW SMFLx rinse time.
Close PW supply valve.

Start Timer for TIME_PW_EMPTY_Sy.
//----------------------------------------------------------------------------//
TITLE =S005: STEP-05::Sy_UO_CIP : Set Flag for FLz_PW_Wash_Complete

S005: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S005:STEP-05:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A005; // Exit Action code, Jump to A005 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L005; // Action number loaded, Jump to L005--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L005: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r005; //Wrong Action number
      JU    _005; //Action error handling
       JU    aa05; //ACTION-01
JU    ab05; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r005: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k005; //Exit
_005: NOP   0; // Action error handling
      JU    k005; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual PW SMFLx rinse time.
//Close PW supply valve.
TITLE =S005:: STEP-005:: : ACTION CODE
aa05: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Store PW SMFLx rinse end time.
L "dbCONST".CHRONO.CPU_TIME;
T #_pw_smflx_rinse_end_time;

//Log actual PW SMFLx rinse time.
CALL T_DIFF
{date_type := 'Time_Of_Day', time_type := 'Time'}
(  IN1                         := #_pw_smflx_rinse_begin_time ,
   IN2                         := #_pw_smflx_rinse_end_time ,
  OUT                         := #_time_act_pw_smflx_rinse
);
SET;
S #_log_time_act_pw_smflx_rinse;

//Close PW supply valve.
L "dbCONST".BLK.SAFE.CMD;
T  #_emc_water_subs;
L "dbCONST".BLK.CMD.STOP;
T  #_emc_water_cmd;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L   #_emc_water_state;
L   "dbCONST".BLK.STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k005;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Start Timer for PW_EMPTY.
TITLE =S005:: STEP-005:: : ACTION CODE
ab05: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Start Timer for PW_EMPTY.
A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L #_time_pw_empty_sy;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k005;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[05];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k005;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k005: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[05]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S005:STEP-005::Begin Transition

A005: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// TIME_PW_EMPTY_Sy expired?
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S005::STEP 005:TRAN 005: TIME_PW_EMPTY_Sy expired?
A #SQ_TIMER.Q;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S005:t005::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x005;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     06; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step06.

      JU    COMM; // Transition satisfied, Exit, go to next step
x005: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S005::STEP-005:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP006 STEP006 STEP006 STEP006 ST //
// STEP006 STEP006 STEP006 STEP006 ST //
// STEP006 STEP006 STEP006 STEP006 ST //
//----------------------------------------------------------------------------//
// Close HPCA supply valve.
Open PW line PS supply valve.
Start timer for TIME_PW_STEAM.
//----------------------------------------------------------------------------//
TITLE =S006: STEP-06::SY_UO_CIP : Steaming PW inlet line

S006: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S006:STEP-06:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A006; // Exit Action code, Jump to A006 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L006; // Action number loaded, Jump to L006--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L006: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r006; //Wrong Action number
      JU    _006; //Action error handling
       JU    aa06; //ACTION-01
JU    ab06; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r006: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k006; //Exit
_006: NOP   0; // Action error handling
      JU    k006; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Close CA supply valve.
TITLE =S006:: STEP-006:: : ACTION CODE
aa06: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Close CA supply valve
L "dbCONST".BLK.SAFE.CMD;
T  #_emc_gas_subs;
L "dbCONST".BLK.CMD.STOP;
T  #_emc_gas_cmd;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_emc_gas_state;
L "dbCONST".BLK.STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k006;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open PW line PS supply valve.
//Store PW line PS steam begin time.
TITLE =S006:: STEP-006:: : ACTION CODE
ab06: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Open PW line PS supply valve
L #_time_pw_steam_sy;
T #_emc_water_runtime;

L "dbCONST".SEL.LIQUID.PSPW;
T #_emc_water_medium;
L "dbCONST".BLK.EMC3.SUBS.FLUSH;
T #_emc_water_subs;
L "dbCONST".BLK.CMD.START;
T #_emc_water_cmd;

//Store PW line PS steam begin time.
L "dbCONST".CHRONO.CPU_TIME;
T #_pw_steam_begin_time;


//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
//Verify if emc_water changed to substate FLUSH.
A(;
L   #_emc_water_state;
L   "dbCONST".BLK.EMC3.SUBS.FLUSH;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k006;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[06];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k006;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k006: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[06]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S006:STEP-006::Begin Transition

A006: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// TIME_PW_STEAM_Sy expired?
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S006::STEP 006:TRAN 006: Timer Expired?
A(;
L #_emc_water_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S006:t006::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x006;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     07; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step07.

      JU    COMM; // Transition satisfied, Exit, go to next step
x006: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S006::STEP-006:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP007 STEP007 STEP007 STEP007 ST //
// STEP007 STEP007 STEP007 STEP007 ST //
// STEP007 STEP007 STEP007 STEP007 ST //
//----------------------------------------------------------------------------//
// Log actual PW line steaming time.
Close PW line PS supply valve.

Connect WFI inlet line to Sy.
//----------------------------------------------------------------------------//
TITLE =S007: STEP-07::SY_UO_CIP : Stop Steaming PW inlet line

S007: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S007:STEP-07:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A007; // Exit Action code, Jump to A007 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L007; // Action number loaded, Jump to L007--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L007: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r007; //Wrong Action number
      JU    _007; //Action error handling
       JU    aa07; //ACTION-01
JU    ab07; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r007: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k007; //Exit
_007: NOP   0; // Action error handling
      JU    k007; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual PW line steaming time.
//Close PW-line PS supply valve.
TITLE =S007:: STEP-007:: : ACTION CODE
aa07: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Store PW line PS steam end time.
L "dbCONST".CHRONO.CPU_TIME;
T #_pw_steam_end_time;

//Log actual PW line steaming time.
CALL T_DIFF
{date_type := 'Time_Of_Day', time_type := 'Time'}
(  IN1                         := #_pw_steam_begin_time ,
   IN2                         := #_pw_steam_end_time ,
  OUT                         := #_time_act_pw_steam
);
SET;
S #_log_time_act_pw_steam;

//Close PW line PS supply valve.
L "dbCONST".BLK.SAFE.CMD;
T  #_emc_water_subs;
L "dbCONST".BLK.CMD.STOP;
T  #_emc_water_cmd;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L   #_emc_water_state;
L   "dbCONST".BLK.STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k007;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Connect WFI inlet line to Sy.
//Set emc_water to substate SETUP and MEDIUM=WFI.
TITLE =S007:: STEP-007:: : ACTION CODE
ab07: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Connect WFI inlet line to Sy.
L "dbCONST".SEL.LIQUID.WFI;
T #_emc_water_medium;
L "dbCONST".BLK.EMC3.SUBS.SETUP;
T #_emc_water_subs;
L "dbCONST".BLK.CMD.START;
T #_emc_water_cmd;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_emc_water_state;
L "dbCONST".BLK.EMC3.SUBS.SETUP;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k007;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[07];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k007;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k007: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[07]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S007:STEP-007::Begin Transition

A007: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// emc_water SETUP complete
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S007::STEP 007:TRAN 007: Setup complete?
A(;
L   #_emc_water_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S007:t007::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x007;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     08; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step08.

      JU    COMM; // Transition satisfied, Exit, go to next step
x007: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S007::STEP-007:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP008 STEP008 STEP008 STEP008 ST //
// STEP008 STEP008 STEP008 STEP008 ST //
// STEP008 STEP008 STEP008 STEP008 ST //
//----------------------------------------------------------------------------//
// Open Sy path to Wash Drain.

Open WFI supply to rinse tank.
Start timer to rinse tank by TIME_WFI_TANK.
Open HPCA supply valve.
//----------------------------------------------------------------------------//
TITLE =S008: STEP-08::SY_UO_CIP : Commence WFI Rinse of vessel

S008: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S008:STEP-08:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A008; // Exit Action code, Jump to A008 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L008; // Action number loaded, Jump to L008--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L008: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r008; //Wrong Action number
      JU    _008; //Action error handling
       JU    aa08; //ACTION-01
JU    ab08; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r008: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k008; //Exit
_008: NOP   0; // Action error handling
      JU    k008; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open Sy path to Wash Drain.
TITLE =S008:: STEP-008:: : ACTION CODE
aa08: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      L "dbCONST".BLK.EMX2.SUBS.CIP_SY;
T #_emx_transfer_subs;
L "dbCONST".BLK.CMD.START;
T #_emx_transfer_cmd;

L "dbCONST".BLK.EMX4.SUBS.CIP;
T #_emx_drain_subs;
L "dbCONST".BLK.CMD.START;
T #_emx_drain_cmd;


//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_emx_transfer_state;
L "dbCONST".BLK.EMX2.SUBS.CIP_SY;
==I;
);
A(;
L #_emx_drain_state;
L "dbCONST".BLK.EMX4.SUBS.CIP;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k008;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open WFI supply to rinse tank.
//Start timer to rinse tank by TIME_WFI_TANK.
//Store WFI wash begin time.
//Open HPCA supply valve.
TITLE =S008:: STEP-008:: : ACTION CODE
ab08: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Open WFI supply to rinse tank
L #_time_wfi_tank;
T #_emc_water_runtime;

L "dbCONST".SEL.LIQUID.WFI;
T #_emc_water_medium;
L "dbCONST".BLK.EMC3.SUBS.FLUSH;
T #_emc_water_subs;
L "dbCONST".BLK.CMD.START;
T #_emc_water_cmd;

//Store WFI wash begin time.
L "dbCONST".CHRONO.CPU_TIME;
T #_wfi_wash_begin_time;

//Report Event Set
SET;
S #_Report_Evnt_013;


// Open HPCA supply
L "dbCONST".SEL.GAS.HPCA;
T #_emc_gas_medium;
L "dbCONST".BLK.EMC1.SUBS.VALVE;  
T #_emc_gas_sub;
L "dbCONST".BLK.CMD.START;
T #_emc_gas_cmd;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_emc_water_state;
L "dbCONST".BLK.EMC3.SUBS.FLUSH;
==I;
);

A(;
L #_emc_gas_state;
L "dbCONST".BLK.EMC1.SUBS.VALVE;  
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k008;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[08];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k008;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k008: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[08]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S008:STEP-008::Begin Transition

A008: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Timer TIME_WFI_TANK expired.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S0::STEP 0:TRAN 008: Timer expired?
A(;
L   #_emc_water_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S0:t008::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x008;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     ; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step.

      JU    COMM; // Transition satisfied, Exit, go to next step
x008: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S008::STEP-008:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP009 STEP009 STEP009 STEP009 ST //
// STEP009 STEP009 STEP009 STEP009 ST //
// STEP009 STEP009 STEP009 STEP009 ST //
//----------------------------------------------------------------------------//
// Log actual Sy WFI wash time.

Divert Wash to FLz.
Open DVy129, Close DVy127
//----------------------------------------------------------------------------//
TITLE =S009: STEP-09::Sy_UO_CIP : Set Flag for Sy_WFI_Wash_Complete

S009: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S009:STEP-09:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A009; // Exit Action code, Jump to A009 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L009; // Action number loaded, Jump to L009--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L009: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r009; //Wrong Action number
      JU    _009; //Action error handling
       JU    aa09; //ACTION-01
JU    ab09; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r009: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k009; //Exit
_009: NOP   0; // Action error handling
      JU    k009; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual WFI wash time.
//Switch path to Fillling Line FPz and Fillling Machine FLz.
TITLE =S009:: STEP-009:: : ACTION CODE
aa09: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Store WFI wash end time.
L "dbCONST".CHRONO.CPU_TIME;
T #_wfi_wash_end_time;

//Log actual WFI wash time.
CALL T_DIFF
{date_type := 'Time_Of_Day', time_type := 'Time'}
(  IN1                         := #_wfi_wash_begin_time ,
   IN2                         := #_wfi_wash_end_time ,
  OUT                         := #_time_act_wfi_wash
);
SET;
S #_log_time_act_wfi_wash;

//Switch path to Fillling Line FPz and Fillling Machine FLz.
      L     "dbCONST".BLK.EMX2.SUBS.FILL_SY;
      T     #_emx_transfer_subs;
      L     "dbCONST".BLK.CMD.START;
      T     #_emx_transfer_cmd;

//Stop emx_drain.
L "dbCONST".BLK.SAFE.CMD;
T  #_emx_drain_subs;
L "dbCONST".BLK.CMD.STOP;
T  #_emx_drain_cmd;


//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;    
      L     #_emx_transfer_state;
      L     "dbCONST".BLK.EMX2.SUBS.FILL_SY;
      ==I   
 );
A(;
L #_emx_drain_state;
L "dbCONST".BLK.STATE.STOPPED;
==I;
);

      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k009;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open WFI supply with timer TIME_WFI_LINE_FLz.
TITLE =S009:: STEP-009:: : ACTION CODE
ab09: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Open WFI supply.
L #_time_wfi_line_flz;
T #_emc_water_runtime;

L "dbCONST".SEL.LIQUID.WFI;
T #_emc_water_medium;
L "dbCONST".BLK.EMC3.SUBS.FLUSH;
T #_emc_water_subs;
L "dbCONST".BLK.CMD.START;
T #_emc_water_cmd;

//Store FLz WFI wash begin time.
L "dbCONST".CHRONO.CPU_TIME;
T #_wfi_flz_rinse_begin_time;


//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_emc_water_state;
L "dbCONST".BLK.EMC3.SUBS.FLUSH;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k009;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[09];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k009;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k009: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[09]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S009:STEP-009::Begin Transition

A009: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S009::STEP-009:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP010 STEP010 STEP010 STEP010 ST //
// STEP010 STEP010 STEP010 STEP010 ST //
// STEP010 STEP010 STEP010 STEP010 ST //
//----------------------------------------------------------------------------//
// Log actual FLz WFI wash time.

Divert path to SMFLx
Open DVy125, Close DVy129

Start flush WFI with timer time_wfi_line_smflx.
//----------------------------------------------------------------------------//
TITLE =S010: STEP-10::Sy_UO_CIP : Set Flag for FLz_WFI_Wash_Complete

S010: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S010:STEP-10:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A010; // Exit Action code, Jump to A010 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L010; // Action number loaded, Jump to L010--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L010: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r010; //Wrong Action number
      JU    _010; //Action error handling
       JU    aa10; //ACTION-01
JU    ab10; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r010: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k010; //Exit
_010: NOP   0; // Action error handling
      JU    k010; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual FLz WFI wash time.
//Divert path to SMFLx
//
TITLE =S010:: STEP-010:: : ACTION CODE
aa10: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Store FLz WFI wash end time.
L "dbCONST".CHRONO.CPU_TIME;
T #_wfi_flz_rinse_end_time;

//Log actual FLz WFI wash time.
CALL T_DIFF
{date_type := 'Time_Of_Day', time_type := 'Time'}
(  IN1                         := #_wfi_flz_rinse_begin_time ,
   IN2                         := #_wfi_flz_rinse_end_time ,
  OUT                         := #_time_act_wfi_flz_rinse
);
SET;
S #_log_time_act_wfi_flz_rinse;


//Switch path to Filtration Line SMFLx.
      L     "dbCONST".BLK.EMX2.SUBS.FILTER;  
      T     #_emx_transfer_subs;
      L     "dbCONST".BLK.CMD.START;
      T     #_emx_transfer_cmd;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;    
    L     #_emx_transfer_state;
    L     "dbCONST".BLK.EMX2.SUBS.FILTER;
    ==I   
 );

      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k010;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Store SMFLx WFI rinse begin time.
//Start flush WFI with timer time_wfi_line_smflx.
TITLE =S010:: STEP-010:: : ACTION CODE
ab10: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Store SMFLx WFI rinse begin time.
L "dbCONST".CHRONO.CPU_TIME;
T #_wfi_smflx_rinse_begin_time;

//Open WFI supply
L #_time_wfi_line_smflx;
T #_emc_water_runtime;

L "dbCONST".SEL.LIQUID.WFI;
T #_emc_water_medium;
L "dbCONST".BLK.EMC3.SUBS.FLUSH;
T #_emc_water_subs;
L "dbCONST".BLK.CMD.START;
T #_emc_water_cmd;


//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
   L  #_emc_water_state;
   L  "dbCONST".BLK.EMC3.SUBS.FLUSH;
   ==I;
);

      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k010;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[10];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k010;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k010: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[10]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S010:STEP-010::Begin Transition

A010: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S010::STEP-010:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP011 STEP011 STEP011 STEP011 ST //
// STEP011 STEP011 STEP011 STEP011 ST //
// STEP011 STEP011 STEP011 STEP011 ST //
//----------------------------------------------------------------------------//
// Log actual WFI SMFLx rinse time.
Close WFI supply valve

Start Timer for WFI Empty, TIME_WFI_EMPTY_Sy.
//----------------------------------------------------------------------------//
TITLE =S011: STEP-11::Sy_UO_CIP : WFI SMFLx Rinse Completed

S011: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S011:STEP-11:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A011; // Exit Action code, Jump to A011 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L011; // Action number loaded, Jump to L011--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L011: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r011; //Wrong Action number
      JU    _011; //Action error handling
       JU    aa11; //ACTION-01
JU    ab11; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r011: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k011; //Exit
_011: NOP   0; // Action error handling
      JU    k011; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log actual WFI SMFLx rinse time.
//Close WFI supply valve.
TITLE =S011:: STEP-011:: : ACTION CODE
aa11: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Store WFI SMFLx rinse end time.
L "dbCONST".CHRONO.CPU_TIME;
T #_wfi_smflx_rinse_end_time;

//Log actual WFI SMFLx rinse time.
CALL T_DIFF
{date_type := 'Time_Of_Day', time_type := 'Time'}
(  IN1                         := #_wfi_smflx_rinse_begin_time ,
   IN2                         := #_wfi_smflx_rinse_end_time ,
  OUT                         := #_time_act_wfi_smflx_rinse
);
SET;
S #_log_time_act_wfi_smflx_rinse;

//Close WFI supply valve
L "dbCONST".BLK.SAFE.CMD;
T  #_emc_water_subs;
L "dbCONST".BLK.CMD.STOP;
T  #_emc_water_cmd;

//Report Event Set
SET;
S #_Report_Evnt_008;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_emc_water_state;
L "dbCONST".BLK.STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k011;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Start timer time_wfi_empty_sy
TITLE =S011:: STEP-011:: : ACTION CODE
ab11: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Start Timer for WFI Empty.
A #SQ_TIMER.Q;
R #SQ_TIMER.IN;

AN #SQ_TIMER.Q;
S #SQ_TIMER.IN;
L #_time_wfi_empty_sy;
T #SQ_TIMER.PT;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A #SQ_TIMER.IN;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k011;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[11];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k011;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k011: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[11]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S011:STEP-011::Begin Transition

A011: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S011::STEP-011:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP012 STEP012 STEP012 STEP012 ST //
// STEP012 STEP012 STEP012 STEP012 ST //
// STEP012 STEP012 STEP012 STEP012 ST //
//----------------------------------------------------------------------------//
// Close HPCA supply valve.
Prompt operator to continue steaming.
//----------------------------------------------------------------------------//
TITLE =S012: STEP-12::SY_UO_CIP : Close CA supply valve

S012: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S012:STEP-12:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A012; // Exit Action code, Jump to A012 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L012; // Action number loaded, Jump to L012--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L012: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r012; //Wrong Action number
      JU    _012; //Action error handling
       JU    aa12; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r012: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k012; //Exit
_012: NOP   0; // Action error handling
      JU    k012; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Close HPCA supply valve.
//Prompt operator to continue steaming.
TITLE =S012:: STEP-012:: : ACTION CODE
aa12: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Close HPCA supply valve.
L "dbCONST".BLK.SAFE.CMD;
T  #_emc_gas_subs;
L "dbCONST".BLK.CMD.STOP;
T  #_emc_gas_cmd;

//Prompt operator to continue steaming.
SET;
S #_prompt_steam;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_emc_gas_state;
L 	"dbCONST".BLK.STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k012;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[12];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k012;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k012: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[12]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S012:STEP-012::Begin Transition

A012: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Operator confirms steaming is required
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S012::STEP 012:TRAN 012: Is Steaming required?
A #_prompt_steam_confirm_yes;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S012:t012::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x012;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     13; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step13.

      JU    COMM; // Transition satisfied, Exit, go to next step
x012: NOP   0;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Operator confirms steaming is not required
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S0::STEP 0:TRAN 013: Steaming not required
A #_prompt_steam_confirm_no;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S0:t013::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x013;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     ; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step.

      JU    COMM; // Transition satisfied, Exit, go to next step
x013: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S012::STEP-012:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP013 STEP013 STEP013 STEP013 ST //
// STEP013 STEP013 STEP013 STEP013 ST //
// STEP013 STEP013 STEP013 STEP013 ST //
//----------------------------------------------------------------------------//
// Flag parent ready for steaming by setting steaming_ready flag.
//----------------------------------------------------------------------------//
TITLE =S013: STEP-13::SY_UO_CIP : Wait for Steaming to be ready

S013: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S013:STEP-13:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A013; // Exit Action code, Jump to A013 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L013; // Action number loaded, Jump to L013--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L013: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r013; //Wrong Action number
      JU    _013; //Action error handling
       JU    aa13; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r013: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k013; //Exit
_013: NOP   0; // Action error handling
      JU    k013; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Flag parent ready for steaming by setting steaming_ready flag.
TITLE =S013:: STEP-013:: : ACTION CODE
aa13: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Flag parent ready for steaming.
SET;
S #_steaming_ready;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1; //Always High flag
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k013;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[13];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k013;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k013: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[13]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S013:STEP-013::Begin Transition

A013: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Parent indicates to proceed with steaming by setting the steaming_proceed flag.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S013::STEP 013:TRAN 014: Waiting for steaming to proceed
A #_steaming_proceed;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S013:t014::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x014;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     14; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step14.

      JU    COMM; // Transition satisfied, Exit, go to next step
x014: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S013::STEP-013:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP014 STEP014 STEP014 STEP014 ST //
// STEP014 STEP014 STEP014 STEP014 ST //
// STEP014 STEP014 STEP014 STEP014 ST //
//----------------------------------------------------------------------------//
// Open Sy steam drain valve and close Sy CIP drain valve.

Open WFI(PS) supply valve.
Start timer TIME_WFI_STEAM_Sy.
//----------------------------------------------------------------------------//
TITLE =S014: STEP-14::Sy_UO_CIP : WFI SMFLx Rinse Completed

S014: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S014:STEP-14:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A014; // Exit Action code, Jump to A014 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L014; // Action number loaded, Jump to L014--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L014: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r014; //Wrong Action number
      JU    _014; //Action error handling
       JU    aa14; //ACTION-01
JU    ab14; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r014: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k014; //Exit
_014: NOP   0; // Action error handling
      JU    k014; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open Sy steam drain valve and close Sy CIP drain valve.
TITLE =S014:: STEP-014:: : ACTION CODE
aa14: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      L "dbCONST".BLK.EMX4.SUBS.SIP;
T #_emx_drain_subs;
L "dbCONST".BLK.CMD.START;
T #_emx_drain_cmd;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_emx_drain_state;
L "dbCONST".BLK.EMX4.SUBS.SIP;
==I;
);

      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k014;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Open WFI(PS) supply valve.
//Start timer TIME_WFI_STEAM_Sy for CS supply.
TITLE =S014:: STEP-014:: : ACTION CODE
ab14: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Open WFI(PS) supply to rinse tank
L #_time_wfi_steam_sy;
T #_emc_water_runtime;

L "dbCONST".SEL.LIQUID.PSWFI;
T #_emc_water_medium;
L "dbCONST".BLK.EMC3.SUBS.FLUSH;
T #_emc_water_subs;
L "dbCONST".BLK.CMD.START;
T #_emc_water_cmd;

//Store WFI line PS Steam begin time.
L "dbCONST".CHRONO.CPU_TIME;
T #_wfi_steam_begin_time;


SET;
R #_steaming_ready;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
   L  #_emc_water_state;
   L  "dbCONST".BLK.EMC3.SUBS.FLUSH;
   ==I;
);

      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k014;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[14];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k014;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k014: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[14]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S014:STEP-014::Begin Transition

A014: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// TIME_WFI_STEAM_Sy expired?
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S014::STEP 014:TRAN 015: Timer expired?
A(;
L   #_emc_water_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S014:t015::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x015;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     15; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step15.

      JU    COMM; // Transition satisfied, Exit, go to next step
x015: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S014::STEP-014:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP015 STEP015 STEP015 STEP015 ST //
// STEP015 STEP015 STEP015 STEP015 ST //
// STEP015 STEP015 STEP015 STEP015 ST //
//----------------------------------------------------------------------------//
// Close PS supply valve.
Log actual post CIP CS steaming time.
//----------------------------------------------------------------------------//
TITLE =S015: STEP-15::SY_UO_CIP : Filling Line steaming complete

S015: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S015:STEP-15:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A015; // Exit Action code, Jump to A015 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L015; // Action number loaded, Jump to L015--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L015: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r015; //Wrong Action number
      JU    _015; //Action error handling
       JU    aa15; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r015: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k015; //Exit
_015: NOP   0; // Action error handling
      JU    k015; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Close CS supply valve.
//Log actual post CIP PS WFI steaming time.
TITLE =S015:: STEP-015:: : ACTION CODE
aa15: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Store WFI PS steaming end time.
L "dbCONST".CHRONO.CPU_TIME;
T #_wfi_steam_end_time;

//Log actual post CIP PS steaming time.
CALL T_DIFF
{date_type := 'Time_Of_Day', time_type := 'Time'}
(  IN1                         := #_wfi_steam_begin_time ,
   IN2                         := #_wfi_steam_end_time ,
  OUT                         := #_time_act_wfi_steam
);
SET;
S #_log_time_act_wfi_steam;


//Close PS wfi supply valve.
L "dbCONST".BLK.SAFE.CMD;
T  #_emc_water_subs;
L "dbCONST".BLK.CMD.STOP;
T  #_emc_water_cmd;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_emc_water_state;
L "dbCONST".BLK.STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k015;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[15];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k015;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k015: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[15]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S015:STEP-015::Begin Transition

A015: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Jump
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S0::STEP 0:TRAN 016: Empty transition.
A M1.1; //Always High flag






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S0:t016::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x016;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     ; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step.

      JU    COMM; // Transition satisfied, Exit, go to next step
x016: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S015::STEP-015:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP016 STEP016 STEP016 STEP016 ST //
// STEP016 STEP016 STEP016 STEP016 ST //
// STEP016 STEP016 STEP016 STEP016 ST //
//----------------------------------------------------------------------------//
// Log Sy CIP operation end time.

Close all drain valves.
//----------------------------------------------------------------------------//
TITLE =S016: STEP-16::SY_UO_CIP : Unit Operation Completed

S016: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S016:STEP-16:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A016; // Exit Action code, Jump to A016 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L016; // Action number loaded, Jump to L016--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L016: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r016; //Wrong Action number
      JU    _016; //Action error handling
       JU    aa16; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r016: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k016; //Exit
_016: NOP   0; // Action error handling
      JU    k016; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Close all drain valves.
//Log Sy CIP operation end time.
TITLE =S016:: STEP-016:: : ACTION CODE
aa16: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Set Sy equipment to safe state:
L "dbCONST".BLK.SAFE.CMD;
T  #_emx_drain_subs;
L "dbCONST".BLK.CMD.STOP;
T  #_emx_drain_cmd;


//Clear all used flags
SET;
R #_steaming_ready;
R #_wash_drain_done;

//Report Event Reset
SET;
R #_Report_Evnt_011;
R #_Report_Evnt_012;
R #_Report_Evnt_013;
R #_Report_Evnt_014;
R #_Report_Evnt_015;
R #_Report_Evnt_016;

// Log Sy CIP operation end time.
L "dbCONST".CHRONO.CPU_TIME;
T #_time_cip_end;

SET;
S #_log_time_cip_end;


//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_emx_drain_state;
L "dbCONST".BLK.STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k016;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[16];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k016;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k016: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[16]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S016:STEP-016::Begin Transition

A016: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S016::STEP-016:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ SEQ FOOTER ================================//
// Common code to execute each scan:                                          //
//----------------------------------------------------------------------------//
TITLE =Sequencer Common Code, Execute in Each Scan

COMM: NOP   0;

NETWORK
TITLE =Retentive/Non Retentive Selectable Run timer

      CALL #sqRunTimer (
           TIME_H                   := #sqRunTimer.TIME_H,
           TIME_M                   := #sqRunTimer.TIME_M,
           TIME_S                   := #sqRunTimer.TIME_S,
           ENABLE                   := #sqRunTimer.ENABLE,
           RESET                    := #sqRunTimer.RESET,
           PAUSE                    := #sqRunTimer.PAUSE,
           NON_RET                  := #sqRunTimer.NON_RET,
           RMNG_H                   := #sqRunTimer.RMNG_H,
           RMNG_M                   := #sqRunTimer.RMNG_M,
           RMNG_S                   := #sqRunTimer.RMNG_S,
           TIME_EXPIRED             := #sqRunTimer.TIME_EXPIRED,
           TMR_RUNNG                := #sqRunTimer.TMR_RUNNG);

NETWORK
TITLE =Sequencer Step Timer

      CALL #sqStepTimer (
           IN                       := #sqStepTimer.IN,
           PT                       := "dbCONST_VAL".SQ_STEP_TIME,
           Q                        := #sqStepTimer.Q,
           ET                       := #sqStepTimer.ET);

NETWORK
TITLE =Sequencer Timer

 CALL #SQ_TIMER (
           IN                       := #SQ_TIMER.IN,
           PT                       := #SQ_TIMER.PT,
           Q                        := #SQ_TIMER.Q,
           ET                       := #SQ_TIMER.ET);

NETWORK
TITLE =General Assignments

      L     #sqSequencer.STEP.NumberNext;
      T     #NXT_STEP;
      T     #sqSequencer.STEP.NumberCurrent;
      T     #CURSTEP;

      A     #sqSequencer.STEP.Active;
      =     #S_ACTIVE;

      A     #sqSequencer.Error_Fault;
      =     #ERR_FAULT;

NETWORK
TITLE =Sequencer Finished

      AN    #OFF_IDLE;
      AN    #PAUSED;
      A     #sqSequencer.STEP.Done[16];
      =     #sqSequencer.Finished;
      =     #SQ_FINISHED;
      JCN   fnsd;
      L     "dbCONST_VAL".SQ_STATE.COMPLETE;
      T     #SQ_STATE;
      R     #PAUSED;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.Error_Fault;
fnsd: NOP   0;

      //----------------------------------------------------------------------//
      // Reset Finished flag if SQ OFF for Last step to scan:                 //
      //----------------------------------------------------------------------//
      A     #OFF_IDLE;
      AN    #sqSequencer.STEP.Done[16];
      AN    #sqSequencer.STEP.WithError[16];
      JCN   abrt;
      R     #sqSequencer.STEP.Finished;
      L     "dbCONST_VAL".SQ_STATE.ABORTED;
      T     #SQ_STATE;
      S     #OFF_IDLE;
      R     #PAUSED;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.Error_Fault;
      R     #PAUSED;
abrt: NOP   0;

//----------------------------------------------------------------------------//
// Visio Common Code Begin:                                                   //
//----------------------------------------------------------------------------//


//----------------------------------------------------------------------------//
// End of Sequencer:                                                          //
//----------------------------------------------------------------------------//
END_FUNCTION_BLOCK

