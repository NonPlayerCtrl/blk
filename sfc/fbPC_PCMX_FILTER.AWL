//****************************************************************************************************
// Code generated by SFC Generator V1.13 on 07/04/18 11:27:50 by  David Paspa from File F:\Business\Synertec\MPI.SMS\automation\code\Visio SFC\Snippet_Code\SEQ_HDR.txt
//****************************************************************************************************
//****************************************************************************************************

//================================ SEQ HEADER ================================//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Title: PC_PCMX_FILTER                                                       //
//                                                                            //
// Description:                                                               //
// Recipe procedure sequence for Filtration from Manufacturing Vessel Mx to Storage Vessel Sy.                                                        //
//                                                                            //
// // SFC Revision History:
// Rev By               Date        CC         Note
// 0.1 Gerald Kontriner 18-Sep-2009            SFC structural design                                                       //
//----------------------------------------------------------------------------//
// Sequencer Revision History:                                                //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      05-Jan-2018 NA        Reboot for S7-1500.             //
// 1.6 Khairul Basar    19-Nov-2009 NA        Reset #sqSequencer.STEP.Active  //
//                                            when STEP Finished.             //
// 1.5 Khairul Basar    15-Oct-2009 NA        Placeholder inserted:           //
//                                            "udtSQ_PC";          //
// 1.4 Khairul Basar    06-Oct-2009 NA        R #PAUSE;                       //
// 1.3 Khairul Basar    30-Sep-2009 NA        SEQ_HDR change STEP-0 code      //
//                                            deleted.                        //
// 1.2 Khairul Basar    26-Sep-2009 NA        Refer R4.                       //
// 1.1 Khairul Basar    23-Sep-2009 NA        Refer R3.                       //
// 1.0 Khairul Basar    20-Sep-2009 NA        STEP.Finished flag reset by     //
//                                            JUMP_MAN.                       //
// 0.9 Khairul Basar    11-Sep-2009 NA        SQ_TIMER added as VAR, declared //
//                                            in SEQ_FTR.                     //
// 0.8 Khairul Basar    09-Sep-2009 NA        SqSequencer.Err_Fault is reset  //
//                                            on Stop cmd, Step-0 dead code   //
//                                            deleted from ACT & Verify.      //
//                                            STP_FTR Step_withErr flag       //
//                                            STEP_NUM place holder           //
//                                            configured.                     //
// 0.7 Khairul Basar    28-Aug-2009 NA        SQ_FINISHED OUT added again.    //
//                                            Deleted during major mod R3.    //
// 0.6 Khairul Basar    23-Aug-2009 NA        Refer R2.                       //
// 0.5 Khairul Basar    23-Aug-2009 NA        Refer R1.                       //
// 0.4 Khairul Basar    18-Aug-2009 NA        Reset Step done with/out error  //
//                                            bits using FC:RSET.             //
// 0.3 David Paspa      16-Aug-2009 NA        Added placeholders for header   //
//                                            name and version and revision   //
//                                            history.                        //
// 0.2 Khairul Basar    11-Aug-2009 NA        Retired external udt file for   //
//                                            Static type parameters. All     //
//                                            parameters now IN, OUT or       //
//                                            IN_OUT.                         //
// 0.1 Khairul Basar    12-Jun-2009 NA        Initial design.                 //
//----------------------------------------------------------------------------//
// R4:                                                                        //
// 1.If SQ not finished Resume command will start Step timer, and redo the    //
// last action, verify the feedback.                                          //
// 2."STEP.finished" flag is ANDed with "TRN_AND_JUMP" in the snippet file    //
// TRN_HDR.This is to avoid checking of transition logic if STEP is not       //
// finished yet.                                                              //
// 3.MDCH, Load & transfer typo corrected.                                    //
//                                                                            //
// R3:                                                                        //
// 1.SqStepTimer.IN is reset in STEP_FTR instead of resetting it in TRN_HDR.  //
// This is because TRN_HDTR is not included in the Last step and StepTimer    //
// must reset in the last step.                                               //
// 2.Reset all the timers when SQ stops.Reset done in SEQ_HDR.                //
// Also STEP-finished flag reset when SQ is OFF to                            //
// scan last step.                                                            //
//                                                                            //
// R2:                                                                        //
// 1.Any step error will send the Sequencer into Pause state.Code added in    //
// SEQ_HDR.Snippet Place holder for Bool-array 16 is   //
// deleted.                                                                   //
//                                                                            //
// R1:                                                                        //
// 1.sqStepTimer:All Verification Code must satisfy the condition finish step //
// action within STEP_DELAY time(40s).If step actions not finished within the //
// time period the error flag will raise High signal.Else timer will reset.   //
// 2.sqRunTimer Added therefore can be used as retentive & non retentive.     //
// 3.sqSequencer: This is re-structured UDT which is redefined the symbol     //
// names as well as it gives more clearity.                                   //
// 4.fcMODE and fcCMD functions are added to handle the mode & command        //
// independently regardless of other logic.Two separate UDT udtMODE & udt     //
// CMD assigned to Mode & command function respectively.                      //
// 5.MAN_JUMP programed for manual mode jump operation with or without        //
// Transition code satisfied.TRN_AND_JUMP & NO_VERIFC are the parameters      //
// which will define whether verification code & transition code need to be   //
// checked to perform jump operation.                                         //
// 6.Auto to Manual switchover will be bumpless & will not affect step        //
// operation.Manual to auto switchover can be used to resume Step action at   //
// defined.                                                                   //
// Step number entered in STEPNO_JUMP.                                        //
//                                                                            //
// Parameters:                                                                //
// INPUTS                                                                     //
// ======                                                                     //
// SQ_CMD          Sequence command input inherited from object block         //
//                 0: off/idle                                                //
//                 1: start/initiate                                          //
//                 2: pause                                                   //
//                 3: resume                                                  //
//                 4: reserved (not programmed)                               //
//                 5: reserved (not programmed)                               //
//                 6: abort/go to last step                                   //
//                 7: acknowledge error/fault                                 //
// SQ_MODE         Sequencer Auto/Manual input inherited from object block    //
//                 1: manual                                                  //
//                 2: auto                                                    //
//                                                                            //
// INPUT/OUTPUTS                                                              //
// =============                                                              //
// SQ_JUMP_MAN     Allows manual jumping from one step to the next step. The  //
//                 manual jump flag is ORed with the transition process       //
//                 condition and so can be used to bypass the condition if the//
//                 sequence will not progress.                                //
//                 This input can also be used to jump to any step even       //
//                 when no transition -> step linkage exists. This is only    //
//                 possible when the SQ_MODE is in manual and SQ is in the    //
//                 idle step. The step to jump to is specified in             //
//                 SQ_man_jump_to_step (not accesseble by this FB in/out      //
//                 interface but a separate DB memory location).              //
//                                                                            //
// OUTPUTS                                                                    //
// =======                                                                    //
// SQ_STATE        The calculated state of the sequence                       //
//                 0: off/idle                                                //
//                 1: start/initiated                                         //
//                 2: paused                                                  //
//                 3: resumed                                                 //
//                 4: reserved (wrong Mode)                                   //
//                 5: reserved (Wrong commad)                                 //
//                 6: aborted/go to last step                                 //
//                 7: acknowledged error/fault                                //
// CURSTEP         Current step being proccessed.                             //
// S_ACTIVE        If current step is active                                  //
// NXT_STEP        Next step to jump to if transition condition is true       //
// ERR_FAULT       True if any error/ or fault present                        //
// PAUSED          True if step is paused                                     //
// OFF_IDLE        Sequence is not running but ready for next SQ (in step=0)  //
//----------------------------------------------------------------------------//
// Define variables:                                                          //
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "fbPC_PCMX_FILTER"
TITLE = PC : PCMX_FILTER
NAME : PCFILT
AUTHOR : REO
VERSION : 0.1

VAR_INPUT
  MODE : INT :=2;
  SQ_CMD : INT :=0;
    _BatchID_Mx :STRING[6] ;	//Batch ID of Mx Vessel
    _BatchID :STRING[6] ;	//Batch ID
    _ready_hpn2_Mx :BOOL ;	//Mx is ready to supply HPN2
    _ready_hpn2_MFL :BOOL ;	//MFL path ready for HPN2
    _path_ready_MFL :BOOL ;	//MFL path is ready
    _path_ready_Sy :BOOL ;	//Sy path is ready
    _DEV_STATE_Mx :INT ;	//Device State of unit Mx
    _DEV_STATE_Sy :INT ;	//Device state of unit Sy
    _DEV_STATE_MFL :INT ;	//Device State of unit MFL

END_VAR
VAR_OUTPUT
  SQ_STATE : INT ;
  CURSTEP : INT ;
  NXT_STEP : INT ;
  S_ACTIVE : BOOL ;
  ERR_FAULT : BOOL ;
  PAUSED : BOOL ;
  OFF_IDLE : BOOL ;
  SQ_FINISHED : BOOL ;
    _RELEASE_FCZ :BOOL ;	//Description
    _start_hpn2_Mx :BOOL ;	//Mx start to supply HPN2
    _filt_comp_Sy :BOOL ;	//Sy Filtration complete
    _filt_comp_Mx :BOOL ;	//Mx Filtration complete
    _toggle_mode :BOOL ;	//Toggle mode of all used units
    _CMD_Sy :INT ;	//Command to unit Sy
    _SUB_Sy :INT ;	//Substate selection to unit Sy
    _SUB_MFL :INT ;	//Substate selection to unit MFL
    _CMD_MFL :INT ;	//Command to unit MFL
    _CMD_Mx :INT ;	//Command to unit Mx
    _SUB_Mx :INT ;	//Substate selection to unit Mx

END_VAR
VAR_IN_OUT
  STEPNO_JUMP : INT ;
  MAN_JUMP : BOOL ;
  NO_VERIFIC : BOOL ;
  TRN_AND_JUMP : BOOL ;
    _FCZ_OWNED_BY :INT ;	//Description
    _FLZ_OWNED_BY :INT ;	//Description
    _MFL_OWNED_BY :INT ;	//Description
    _MX_OWNED_BY :INT ;	//Description
    _HYG_STATE_Sy :INT ;	//Hygiene Status of unit Sy
    _HYG_STATE_MFL :INT ;	//Hygiene Status of unit MFL
    _HYG_STATE_Mx :INT ;	//Hygiene Status of unit Mx

END_VAR
VAR
  sqStepTimer : "TON";
  sqRunTimer : "fbRunTimer";
  sqSequencer : "udtSFCSequencer";
  SQ_TIMER: "TON";
    _Report_End :BOOL ;	//Reort end event flag
    _confirm_abort :BOOL ;	//Operator Acknowledge Abort Due to Invalid Hygiene Status
    _prompt_abort :BOOL ;	//Operator Acknowledge Abort Due to Invalid Hygiene Status
    _msg_WrongHygiene :BOOL ;	//HMI message: Mx, MFL and/orSy have incorrect Hygiene Status
    _log_BatchID :STRING ;	//Logging previous Batch ID of vessel Mx
    _log_WrongHygiene :TOD ;	//Logging that Mx, MFL and/orSy have incorrect Hygiene Status
    _log_FILTEnd :TOD ;	//Logging FILTRATION operation end time
    _log_FILTBegin :TOD ;	//Logging FILTRATION operation start time

END_VAR
BEGIN
NETWORK
TITLE =Call Mode checking function

      L     #MODE;
      T     #sqSequencer.MODE.current;
      CALL "fcSFCMode" (
           Mode                     := #sqSequencer.MODE);

NETWORK
TITLE =Call Command checking function

      L     #SQ_CMD;
      T     #sqSequencer.CMD.New;

      CALL "fcSFCCommand" (
           Comand                   := #sqSequencer.CMD);

NETWORK
TITLE =Sequencer Mode function

      A     #sqSequencer.MODE.changed;
      JC    MDCH; // if Mode changed,jump to mode change function
      A     #sqSequencer.MODE.manual;
      JC    MANU;
      A     #sqSequencer.MODE.auto;
      JC    AUTO;
      A     #sqSequencer.MODE.oos;
      JC    OOS;
      A     #sqSequencer.MODE.wrong;
      JC    WRMD;
      JU    EMOD;

NETWORK
//----------------------------------------------------------------------------//
// On positive edge of mode change , this will execute once, only one cycle   //
// before going to execute the selected mode function below:                  //
//----------------------------------------------------------------------------//
TITLE =Mode change function
MDCH: NOP   0;
      SET   ;
      R     #sqStepTimer.IN;
      L     #sqSequencer.STEP.NumberCurrent;
      T     #STEPNO_JUMP;
      JU    EMOD;

NETWORK
//----------------------------------------------------------------------------//
// #TRN_AND_JUMP=can set/reset                                                //
// #sqSequencer.STEP.JumpCtrl=Can set/reset by #MAN_JUMP                      //
// #NO_VERIFIC=Can set/ Reset                                                 //
//----------------------------------------------------------------------------//
TITLE =Manual Mode function
MANU: NOP   0; //Manual mode selected



      A     #MAN_JUMP;
      =     #sqSequencer.STEP.JumpCtrl;
      A     #MAN_JUMP;
      JCN   EMOD;

      L     #STEPNO_JUMP;
      T     #sqSequencer.STEP.NumberNext;
      T     #sqSequencer.STEP.NumberCurrent;
      R     #MAN_JUMP; //Reset MAN_JUMP after loading user destination Step number
      R     #sqSequencer.STEP.Finished; //Reset finish flag, to execute next step action
      JU    EMOD;

NETWORK
//----------------------------------------------------------------------------//
// #TRN_AND_JUMP=always set                                                   //
// #sqSequencer.STEP.JumpCtrl=Always set                                      //
// #NO_VERIFIC=Alwasy Reset                                                   //
//----------------------------------------------------------------------------//
TITLE =Auto Mode function
AUTO: NOP   0; //Auto mode selected



      R     #MAN_JUMP;
      S     #TRN_AND_JUMP;
      R     #NO_VERIFIC;
      S     #sqSequencer.STEP.JumpCtrl; //Always Set in auto mode

      L     #sqSequencer.STEP.NumberCurrent;
      T     #STEPNO_JUMP;
      JU    EMOD;
NETWORK
TITLE =OOS mode function

OOS:  NOP   0; // Out of service
      JU    EMOD;
WRMD: NOP   0; //Wrong mode selected
      S     #sqSequencer.Error_Fault;
      L     "dbCONST_VAL".SQ_STATE.WRMODE;
      T     #SQ_STATE;

      JU    EMOD;

NETWORK
TITLE =Mode not changedd

      NOP   0;

NETWORK
TITLE =End Mode function

EMOD: NOP   0;

NETWORK
TITLE =An error will Pause the Sequencer,Operator must Resume SQ to run

      A     #sqSequencer.Error_Fault;
      AN    #sqSequencer.CMD.Changed;
      JC    PAUS;

NETWORK
TITLE =Command Action function

      A     #sqSequencer.CMD.Changed;
      JCN   CNCH; // if Command not changed,jump to end function
      R     #sqStepTimer.IN;


      A     #sqSequencer.CMD.Start;
      JC    STRT;

      A     #sqSequencer.CMD.Stop;
      JC    STOP;


      A     #sqSequencer.CMD.Pause;
      JC    PAUS;

      A     #sqSequencer.CMD.Resume;
      JC    RESM;

      A     #sqSequencer.CMD.Abort;
      JC    ABRT;

      A     #sqSequencer.CMD.Ack;
      JC    ACKN;

      A     #sqSequencer.CMD.wrong;
      JC    WCMD;

      JU    ECMD; //Wrong command/not specified command
//End Comand function

NETWORK
TITLE =Comand -Start/Initiate action function

STRT: NOP   0;
      R     #OFF_IDLE;
      R     #PAUSED;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;
      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.TimerExpired;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqStepTimer.IN;

      S     #sqRunTimer.RESET;

//----------------------------------------------------------------------------//
// Load Initial step Number:                                                  //
//----------------------------------------------------------------------------//
      L     1;
      T     #sqSequencer.STEP.Initial;
      L     #sqSequencer.STEP.Initial;
      T     #sqSequencer.STEP.NumberCurrent;
      T     #sqSequencer.STEP.NumberNext;




      L     "dbCONST_VAL".SQ_STATE.STARTED;
      T     #SQ_STATE;

//----------------------------------------------------------------------------//
// Reset Step done without error bits:                                        //
//----------------------------------------------------------------------------//
      CALL "RSET" (
           S_BIT                    := #sqSequencer.STEP.Done[1],
           N                        := 9);//Upto final step


//----------------------------------------------------------------------------//
// Reset Step done with error bits:                                           //
//----------------------------------------------------------------------------//
      CALL "RSET" (
           S_BIT                    := #sqSequencer.STEP.WithError[1],
           N                        := 9);//Upto final step

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Stop action function

STOP: NOP   0;
      S     #OFF_IDLE;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;
      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.TimerExpired;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.Error_Fault;
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqRunTimer.ENABLE;
      R     #sqStepTimer.IN;
      R     #SQ_TIMER.IN;
      R     #PAUSED;


//Go to last step
      L     9;
      T     #sqSequencer.FinalStep;
      L     #sqSequencer.FinalStep;
      T     #sqSequencer.STEP.NumberNext;
      L     "dbCONST_VAL".SQ_STATE.OFF_IDLE;
      T     #SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Pause action function

PAUS: NOP   0;
      S     #PAUSED;
      R     #S_ACTIVE;
      S     #sqRunTimer.PAUSE;
      L     #sqSequencer.STEP.NumberCurrent;
      T     #STEPNO_JUMP;
      L     "dbCONST_VAL".SQ_STATE.PAUSED;
      T     #SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Resume action function

RESM: NOP   0;
      R     #PAUSED;
      R     #sqRunTimer.PAUSE;
      R     #sqStepTimer.IN; //Reset Step timer
      L     "dbCONST_VAL".SQ_STATE.RESUMED;
      T     #SQ_STATE;

      A     #SQ_FINISHED;
      JC    ECMD;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Abort action function

ABRT: NOP   0;
      L     "dbCONST_VAL".SQ_STATE.ABORTED;
      T     #SQ_STATE;

      JC    STOP; //Stop & Abort same
      JU    ECMD;

NETWORK
TITLE =Comand -Acknowledge action function

ACKN: NOP   0;
      R     #ERR_FAULT;
      R     #sqSequencer.Error_Fault;
      L     "dbCONST_VAL".SQ_STATE.ACKNOWLEDGED;
      T     #SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -wrong/unavailable

WCMD: NOP   0;

      S     #sqSequencer.Error_Fault;
      L     "dbCONST_VAL".SQ_STATE.WRCMD;
      T     #SQ_STATE;

      JU    ECMD;
NETWORK
TITLE =Comand -not changedd

CNCH: NOP   0; // Command not changed

NETWORK
TITLE =End command Function

ECMD: NOP   0;

NETWORK
//----------------------------------------------------------------------------//
// Sequencer step jump list. Load the step number to execute the step:        //
//----------------------------------------------------------------------------//
TITLE =Sequencer Step Jump distrubution list
      L     #sqSequencer.STEP.NumberCurrent;
      JL    SQER; // If Sequencer Step number invalid or greater than available number of step
      JU    S000; // Exceptional Error Handling
      JU    S001; // STEP-001:
JU    S002; // STEP-002:
JU    S003; // STEP-003:
JU    S004; // STEP-004:
JU    S005; // STEP-005:
JU    S006; // STEP-006:
JU    S007; // STEP-007:
JU    S008; // STEP-008:
JU    S009; // STEP-009:


//----------------------------------------------------------------------------//
// If Step number is Invalid or Out of Range:                                 //
//----------------------------------------------------------------------------//
SQER: NOP   0;
      S     #sqSequencer.Error_Fault;
      JU    COMM; // Jump to Common Sequencer code handling function

NETWORK
//----------------------------------------------------------------------------//
// STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 ST //
// STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 ST //
// STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 ST //
//----------------------------------------------------------------------------//
TITLE =STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP

NETWORK
TITLE =S000: STEP0::If Paused exit

S000: NOP   0;

      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP001 STEP001 STEP001 STEP001 ST //
// STEP001 STEP001 STEP001 STEP001 ST //
// STEP001 STEP001 STEP001 STEP001 ST //
//----------------------------------------------------------------------------//
// Log Mx Filtration to FLz operation begin time.
//----------------------------------------------------------------------------//
TITLE =S001: STEP-01::RP_FILTER : Recipe Procedure Commenced

S001: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S001:STEP-01:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A001; // Exit Action code, Jump to A001 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L001; // Action number loaded, Jump to L001--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L001: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r001; //Wrong Action number
      JU    _001; //Action error handling
       JU    aa01; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r001: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k001; //Exit
_001: NOP   0; // Action error handling
      JU    k001; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log Mx Filtration to Sy operation begin time.
TITLE =S001:: STEP-001:: : ACTION CODE
aa01: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log Mx filtration to Sy operation begin
L "dbCONST_VAL".CPU_TIME;
T #_log_FILTBegin;

// Reset used flags
SET;
R #_toggle_mode;
R #_filt_comp_Sy;
R #_filt_comp_Mx;
R #_confirm_abort;
R #_prompt_abort;
R #_Report_End; //REPORT END FLAG

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1; //Always High flag
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k001;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[01];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k001;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k001: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[01]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S001:STEP-001::Begin Transition

A001: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Selected Sy, SMFLx, MMFLx, FPz and FLz are in Hygiene status STERILE? Selected Mx is in Hygiene status BATCH?
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S001::STEP 001:TRAN 001: Check Hygiene Status
A(;
L "dbCONST_VAL".UNIT.HYGIENE_STATE.STERILE;
L #_HYG_STATE_Sy;
==I;
);
A(;
L "dbCONST_VAL".UNIT.HYGIENE_STATE.STERILE;
L #_HYG_STATE_MFL;
==I;
);
A(;
L "dbCONST_VAL".UNIT.HYGIENE_STATE.BATCH;
L #_HYG_STATE_Mx;
==I;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S001:t001::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x001;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     03; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step03.

      JU    COMM; // Transition satisfied, Exit, go to next step
x001: NOP   0;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Empty Transition
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S001::STEP 001:TRAN 002: Incorrect Hygiene Status
A M1.1; //Always High flag






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S001:t002::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x002;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     02; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step02.

      JU    COMM; // Transition satisfied, Exit, go to next step
x002: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S001::STEP-001:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP002 STEP002 STEP002 STEP002 ST //
// STEP002 STEP002 STEP002 STEP002 ST //
// STEP002 STEP002 STEP002 STEP002 ST //
//----------------------------------------------------------------------------//
// Log that either Sy, SMFLx, MMFLx, FPz or FLz are not in Hygiene status STERILE or Mx is not in Hygiene status BATCH?
//----------------------------------------------------------------------------//
TITLE =S002: STEP-02::RP_FILTER : Incorrect Hygiene Status

S002: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S002:STEP-02:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A002; // Exit Action code, Jump to A002 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L002; // Action number loaded, Jump to L002--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L002: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r002; //Wrong Action number
      JU    _002; //Action error handling
       JU    aa02; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r002: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k002; //Exit
_002: NOP   0; // Action error handling
      JU    k002; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log that either MFL or Sy are not in Hygiene status STERILE or Mx is not in Hygiene status BATCH?
TITLE =S002:: STEP-002:: : ACTION CODE
aa02: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log time if either Mx, MFL or Sy are not in correct Hygiene status
L "dbCONST_VAL".CPU_TIME;
T #_log_WrongHygiene;

SET;
S #_msg_WrongHygiene;
S #_prompt_abort;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1; //Always High flag
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k002;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[02];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k002;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k002: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[02]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S002:STEP-002::Begin Transition

A002: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Confirm Abort (Incorrect Hygiene Status)
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S002::STEP 002:TRAN 003: Confirm Abort (Incorrect Hygiene Status)
A #_confirm_abort;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S002:t003::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x003;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     09; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step09.

      JU    COMM; // Transition satisfied, Exit, go to next step
x003: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S002::STEP-002:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP003 STEP003 STEP003 STEP003 ST //
// STEP003 STEP003 STEP003 STEP003 ST //
// STEP003 STEP003 STEP003 STEP003 ST //
//----------------------------------------------------------------------------//
// Retrieve and log BatchID Number from manufacturing vessel Mx.
Set SMFLx, MMFLx, FPz and FLz Hygiene Status to BATCH.
Set BatchID Number equal to current BatchID number of vessel Mx.

Toggle all Units From Manual to Auto. This will cascade down to make sure all equipment is in Auto.

Set Unit Mx to state FILTER
Set Unit Sy to state FILTER_FILL
Set Unit SMFLx to state FILTER
Set Unit MMFLx to state FILTER
Set Unit FPz to state FILL
Set Unit FLz to state FILL
//----------------------------------------------------------------------------//
TITLE =S003: STEP-03::RP_FILTER : Initiate SMFLx and MMFLx FILTRATION Unit Operation

S003: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S003:STEP-03:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A003; // Exit Action code, Jump to A003 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L003; // Action number loaded, Jump to L003--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L003: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r003; //Wrong Action number
      JU    _003; //Action error handling
       JU    aa03; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r003: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k003; //Exit
_003: NOP   0; // Action error handling
      JU    k003; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Retrieve and log BatchID Number from manufacturing vessel Mx.
//Set MFL and Sy Hygiene Status to BATCH.
//Set BatchID Number equal to current BatchID number of vessel Mx.
//
//Toggle all Units From Manual to Auto. This will cascade down to make sure all equipment is in Auto.
//
//Set Unit SY to state FILTER
//Set Unit MFL to state FILTER
TITLE =S003:: STEP-003:: : ACTION CODE
aa03: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Retrieve and log BatchID Number from manufacturing vessel Mx.
// L #_BatchID_Mx;
// T #_log_BatchID;

//Set MFL and Sy Hygiene Status to BATCH.
L "dbCONST_VAL".UNIT.HYGIENE_STATE.BATCH;
T #_HYG_STATE_MFL;
L "dbCONST_VAL".UNIT.HYGIENE_STATE.BATCH;
T #_HYG_STATE_Sy;

//Set BatchID Number equal to current BatchID number of vessel Mx.
// L #_BatchID;
// T #_BatchID_Mx;

//Toggle all Units From Manual to Auto. This will cascade down to make sure all equipment is in Auto.
SET;
S #_toggle_mode;

//Set Unit SY to state FILTER
L "dbCONST_VAL".UNIT.SY.SUBS.FILTER;
T #_SUB_Sy;
L "dbCONST_VAL".UNIT.CMD.START;
T #_CMD_Sy;

//Set Unit MFL to state FILTER
L "dbCONST_VAL".UNIT.MFL.SUBS.FILTER;
T #_SUB_MFL;
L "dbCONST_VAL".UNIT.CMD.START;
T #_CMD_MFL;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_Sy;
L 	"dbCONST_VAL".UNIT.SY.SUBS.FILTER;
==I;
);
A(;
L 	#_DEV_STATE_MFL;
L 	"dbCONST_VAL".UNIT.MFL.SUBS.FILTER;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k003;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[03];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k003;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k003: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[03]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S003:STEP-003::Begin Transition

A003: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Check if Mx Sy, SMFLx, MMFLx, FPz and FLz path is ready. 
If all path_ready flags have been set.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S0::STEP 0:TRAN 004: Mx, SMFLx, MMFLx, FPz and FLz path ready?
A #_path_ready_Sy;
A #_path_ready_MFL;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S0:t004::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x004;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     ; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step.

      JU    COMM; // Transition satisfied, Exit, go to next step
x004: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S003::STEP-003:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP004 STEP004 STEP004 STEP004 ST //
// STEP004 STEP004 STEP004 STEP004 ST //
// STEP004 STEP004 STEP004 STEP004 ST //
//----------------------------------------------------------------------------//
// Set Unit MX to state FILTER
//----------------------------------------------------------------------------//
TITLE =S004: STEP-04::RP_FILTER : Initiate MX FILTRATION Unit Operation

S004: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S004:STEP-04:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A004; // Exit Action code, Jump to A004 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L004; // Action number loaded, Jump to L004--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L004: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r004; //Wrong Action number
      JU    _004; //Action error handling
       JU    aa04; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r004: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k004; //Exit
_004: NOP   0; // Action error handling
      JU    k004; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Set Unit MX to state FILTER
TITLE =S004:: STEP-004:: : ACTION CODE
aa04: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Set Unit Mx to state FILTER
L "dbCONST_VAL".UNIT.MX.SUBS.FILTER;
T #_SUB_Mx;
L "dbCONST_VAL".UNIT.CMD.START;
T #_CMD_Mx;

//Toggle all Units From Manual to Auto. This will cascade down to make sure all equipment is in Auto.
SET;
R #_toggle_mode;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_Mx;
L 	"dbCONST_VAL".UNIT.MX.SUBS.FILTER;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k004;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[04];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k004;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k004: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[04]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S004:STEP-004::Begin Transition

A004: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S004::STEP-004:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP005 STEP005 STEP005 STEP005 ST //
// STEP005 STEP005 STEP005 STEP005 ST //
// STEP005 STEP005 STEP005 STEP005 ST //
//----------------------------------------------------------------------------//
// Set MX ready_hpCA flag.
//----------------------------------------------------------------------------//
TITLE =S005: STEP-05::RP_FILTER : Wait for filtration to complete

S005: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S005:STEP-05:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A005; // Exit Action code, Jump to A005 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L005; // Action number loaded, Jump to L005--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L005: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r005; //Wrong Action number
      JU    _005; //Action error handling
       JU    aa05; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r005: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k005; //Exit
_005: NOP   0; // Action error handling
      JU    k005; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Set MX ready_hpn2 flag.
TITLE =S005:: STEP-005:: : ACTION CODE
aa05: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      SET;
S #_start_hpn2_Mx;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1; //Always High flag
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k005;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[05];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k005;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k005: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[05]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S005:STEP-005::Begin Transition

A005: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S005::STEP-005:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP006 STEP006 STEP006 STEP006 ST //
// STEP006 STEP006 STEP006 STEP006 ST //
// STEP006 STEP006 STEP006 STEP006 ST //
//----------------------------------------------------------------------------//
// Set Mx flag filtration_complete
Set FLz flag Filling_complete
//----------------------------------------------------------------------------//
TITLE =S006: STEP-06::RP_FILTER : Wait for MX Filtration and FLz Filling operations to complete

S006: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S006:STEP-06:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A006; // Exit Action code, Jump to A006 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L006; // Action number loaded, Jump to L006--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L006: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r006; //Wrong Action number
      JU    _006; //Action error handling
       JU    aa06; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r006: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k006; //Exit
_006: NOP   0; // Action error handling
      JU    k006; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Set SY flag filtration_complete
//Set MX flag filtration_complete
TITLE =S006:: STEP-006:: : ACTION CODE
aa06: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      SET;
S #_filt_comp_Mx;
S #_filt_comp_Sy;
R #_start_hpn2_Mx;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1; //Always High flag
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k006;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[06];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k006;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k006: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[06]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S006:STEP-006::Begin Transition

A006: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Wait for Mx state FILTER complete and FLz state FILL complete.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S0::STEP 0:TRAN 007: Unit Mx and FLz complete?
A(;
L 	#_DEV_STATE_Mx;
L 	"dbCONST_VAL".UNIT.DEV_STATE.COMPLETE;
==I;
);

A(;
L 	#_DEV_STATE_Sy;
L 	"dbCONST_VAL".UNIT.DEV_STATE.COMPLETE;
==I;
);






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S0:t007::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x007;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     ; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step.

      JU    COMM; // Transition satisfied, Exit, go to next step
x007: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S006::STEP-006:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP007 STEP007 STEP007 STEP007 ST //
// STEP007 STEP007 STEP007 STEP007 ST //
// STEP007 STEP007 STEP007 STEP007 ST //
//----------------------------------------------------------------------------//
// Set Mx Hygiene Status to USED.
Set Sy Hygiene Status to USED
Set MMFLx Hygience Status to USED
Set SMFLx Hygiene Status to USED
Set FPz Hygiene Status to USED
Set FLz Hygiene Status to USED

Log FILTRATION operation end time.
Log FILL operation end time.
//----------------------------------------------------------------------------//
TITLE =S007: STEP-07::RP_FILTER : Recipe Procedure Completed

S007: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S007:STEP-07:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A007; // Exit Action code, Jump to A007 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L007; // Action number loaded, Jump to L007--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L007: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r007; //Wrong Action number
      JU    _007; //Action error handling
       JU    aa07; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r007: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k007; //Exit
_007: NOP   0; // Action error handling
      JU    k007; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log Filtration operation end
TITLE =S007:: STEP-007:: : ACTION CODE
aa07: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      A #_filt_comp_Mx;
L "dbCONST_VAL".CPU_TIME;
T #_log_FILTEnd;

//Set Mx hygiene status to USED
L "dbCONST_VAL".UNIT.HYGIENE_STATE.USED; 
T #_HYG_STATE_Mx;

//Set Mx hygiene status to USED
L "dbCONST_VAL".UNIT.HYGIENE_STATE.USED; 
T #_HYG_STATE_MFL;

//SET REPORT END FLAG
S #_Report_End;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k007;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[07];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k007;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k007: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[07]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S007:STEP-007::Begin Transition

A007: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S007::STEP-007:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP008 STEP008 STEP008 STEP008 ST //
// STEP008 STEP008 STEP008 STEP008 ST //
// STEP008 STEP008 STEP008 STEP008 ST //
//----------------------------------------------------------------------------//
// Release Units
//----------------------------------------------------------------------------//
TITLE =S008: STEP-08::RP_FILTER : Recipe Procedure Release Units

S008: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S008:STEP-08:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A008; // Exit Action code, Jump to A008 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L008; // Action number loaded, Jump to L008--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L008: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r008; //Wrong Action number
      JU    _008; //Action error handling
       JU    aa08; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r008: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k008; //Exit
_008: NOP   0; // Action error handling
      JU    k008; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log Filtration operation end
TITLE =S008:: STEP-008:: : ACTION CODE
aa08: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Release the MFL AND MX UNITS
L "dbCONST_VAL".UNIT.OWNER.NONE; 
T #_MFL_OWNED_BY;
L "dbCONST_VAL".UNIT.OWNER.NONE; 
T #_MX_OWNED_BY;


//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;    
L     "dbCONST_VAL".UNIT.OWNER.NONE;
L     #_MFL_OWNED_BY;
==I;   
);     
A(;    
L     "dbCONST_VAL".UNIT.OWNER.NONE;
L     #_MX_OWNED_BY;
==I;   
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k008;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[08];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k008;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k008: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[08]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S008:STEP-008::Begin Transition

A008: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S008::STEP-008:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP009 STEP009 STEP009 STEP009 ST //
// STEP009 STEP009 STEP009 STEP009 ST //
// STEP009 STEP009 STEP009 STEP009 ST //
//----------------------------------------------------------------------------//
// Procedure End Step
//----------------------------------------------------------------------------//
TITLE =S009: STEP-09::RP_FILTER : Recipe Procedure End Step

S009: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S009:STEP-09:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A009; // Exit Action code, Jump to A009 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L009; // Action number loaded, Jump to L009--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L009: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r009; //Wrong Action number
      JU    _009; //Action error handling
       JU    aa09; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r009: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k009; //Exit
_009: NOP   0; // Action error handling
      JU    k009; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Set Mx Hygiene Status to USED.
//Log FILTRATION operation end time.
TITLE =S009:: STEP-009:: : ACTION CODE
aa09: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      A(;
L "dbCONST_VAL".UNIT.HYGIENE_STATE.USED; 
L #_HYG_STATE_Mx;
==I;
);
JC NORM;

//Stop Mx Unit Operation
L "dbCONST_VAL".UNIT.CMD.STOP; 
T #_CMD_Mx;
L "dbCONST_VAL".UNIT.SUBSTATE.ZERO; 
T #_SUB_Mx;

NORM: NOP 0;

//Stop MFL Unit Operation
L "dbCONST_VAL".UNIT.CMD.STOP;
T #_CMD_MFL;
L "dbCONST_VAL".UNIT.SUBSTATE.ZERO; 
T #_SUB_MFL;

//Clear used flags
SET;
R #_toggle_mode;
R #_msg_WrongHygiene;
R #_prompt_abort;
R #_confirm_abort;
R #_start_hpn2_Mx;
R #_filt_comp_Mx;
R #_filt_comp_Sy;
R #_Report_End;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k009;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[09];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k009;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k009: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[09]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S009:STEP-009::Begin Transition

A009: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S009::STEP-009:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ SEQ FOOTER ================================//
// Common code to execute each scan:                                          //
//----------------------------------------------------------------------------//
TITLE =Sequencer Common Code, Execute in Each Scan

COMM: NOP   0;

NETWORK
TITLE =Retentive/Non Retentive Selectable Run timer

      CALL #sqRunTimer (
           TIME_H                   := #sqRunTimer.TIME_H,
           TIME_M                   := #sqRunTimer.TIME_M,
           TIME_S                   := #sqRunTimer.TIME_S,
           ENABLE                   := #sqRunTimer.ENABLE,
           RESET                    := #sqRunTimer.RESET,
           PAUSE                    := #sqRunTimer.PAUSE,
           NON_RET                  := #sqRunTimer.NON_RET,
           RMNG_H                   := #sqRunTimer.RMNG_H,
           RMNG_M                   := #sqRunTimer.RMNG_M,
           RMNG_S                   := #sqRunTimer.RMNG_S,
           TIME_EXPIRED             := #sqRunTimer.TIME_EXPIRED,
           TMR_RUNNG                := #sqRunTimer.TMR_RUNNG);

NETWORK
TITLE =Sequencer Step Timer

      CALL #sqStepTimer (
           IN                       := #sqStepTimer.IN,
           PT                       := "dbCONST_VAL".SQ_STEP_TIME,
           Q                        := #sqStepTimer.Q,
           ET                       := #sqStepTimer.ET);

NETWORK
TITLE =Sequencer Timer

 CALL #SQ_TIMER (
           IN                       := #SQ_TIMER.IN,
           PT                       := #SQ_TIMER.PT,
           Q                        := #SQ_TIMER.Q,
           ET                       := #SQ_TIMER.ET);

NETWORK
TITLE =General Assignments

      L     #sqSequencer.STEP.NumberNext;
      T     #NXT_STEP;
      T     #sqSequencer.STEP.NumberCurrent;
      T     #CURSTEP;

      A     #sqSequencer.STEP.Active;
      =     #S_ACTIVE;

      A     #sqSequencer.Error_Fault;
      =     #ERR_FAULT;

NETWORK
TITLE =Sequencer Finished

      AN    #OFF_IDLE;
      AN    #PAUSED;
      A     #sqSequencer.STEP.Done[9];
      =     #sqSequencer.Finished;
      =     #SQ_FINISHED;
      JCN   fnsd;
      L     "dbCONST_VAL".SQ_STATE.COMPLETE;
      T     #SQ_STATE;
      R     #PAUSED;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.Error_Fault;
fnsd: NOP   0;

      //----------------------------------------------------------------------//
      // Reset Finished flag if SQ OFF for Last step to scan:                 //
      //----------------------------------------------------------------------//
      A     #OFF_IDLE;
      AN    #sqSequencer.STEP.Done[9];
      AN    #sqSequencer.STEP.WithError[9];
      JCN   abrt;
      R     #sqSequencer.STEP.Finished;
      L     "dbCONST_VAL".SQ_STATE.ABORTED;
      T     #SQ_STATE;
      S     #OFF_IDLE;
      R     #PAUSED;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.Error_Fault;
      R     #PAUSED;
abrt: NOP   0;

//----------------------------------------------------------------------------//
// Visio Common Code Begin:                                                   //
//----------------------------------------------------------------------------//


//----------------------------------------------------------------------------//
// End of Sequencer:                                                          //
//----------------------------------------------------------------------------//
END_FUNCTION_BLOCK

