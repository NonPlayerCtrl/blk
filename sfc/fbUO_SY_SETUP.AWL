//****************************************************************************************************
// Code generated by SFC Generator V1.13 on 30/11/18 18:22:47 by  David Paspa from File G:\Business\Synertec\MPI.SMS\automation\code\awlMaster\stencil\seq_hdr.awl
//****************************************************************************************************
//****************************************************************************************************

//================================ SEQ HEADER ================================//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Title: UO_SY_SETUP                                                       //
//                                                                            //
// Description:                                                               //
// Unit Operation for setup of storage vessel equipment.                                                        //
//                                                                            //
// // SFC Revision History:
// Rev By               Date        CC         Note
// 2.0 David Paspa      27-Nov-2018            Reboot for S7-1500
// 0.1 Gerald Kontriner 14-Sep-2009            SFC structural design                                                       //
//----------------------------------------------------------------------------//
// Sequencer Revision History:                                                //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      05-Jan-2018 NA        Reboot for S7-1500.             //
// 1.6 Khairul Basar    19-Nov-2009 NA        Reset #sqSequencer.STEP.Active  //
//                                            when STEP Finished.             //
// 1.5 Khairul Basar    15-Oct-2009 NA        Placeholder inserted:           //
//                                            "udtSQ_UO";          //
// 1.4 Khairul Basar    06-Oct-2009 NA        R #PAUSE;                       //
// 1.3 Khairul Basar    30-Sep-2009 NA        SEQ_HDR change STEP-0 code      //
//                                            deleted.                        //
// 1.2 Khairul Basar    26-Sep-2009 NA        Refer R4.                       //
// 1.1 Khairul Basar    23-Sep-2009 NA        Refer R3.                       //
// 1.0 Khairul Basar    20-Sep-2009 NA        STEP.Finished flag reset by     //
//                                            JUMP_MAN.                       //
// 0.9 Khairul Basar    11-Sep-2009 NA        SQ_TIMER added as VAR, declared //
//                                            in SEQ_FTR.                     //
// 0.8 Khairul Basar    09-Sep-2009 NA        SqSequencer.Err_Fault is reset  //
//                                            on Stop cmd, Step-0 dead code   //
//                                            deleted from ACT & Verify.      //
//                                            STP_FTR Step_withErr flag       //
//                                            STEP_NUM place holder           //
//                                            configured.                     //
// 0.7 Khairul Basar    28-Aug-2009 NA        SQ_FINISHED OUT added again.    //
//                                            Deleted during major mod R3.    //
// 0.6 Khairul Basar    23-Aug-2009 NA        Refer R2.                       //
// 0.5 Khairul Basar    23-Aug-2009 NA        Refer R1.                       //
// 0.4 Khairul Basar    18-Aug-2009 NA        Reset Step done with/out error  //
//                                            bits using FC:RSET.             //
// 0.3 David Paspa      16-Aug-2009 NA        Added placeholders for header   //
//                                            name and version and revision   //
//                                            history.                        //
// 0.2 Khairul Basar    11-Aug-2009 NA        Retired external udt file for   //
//                                            Static type parameters. All     //
//                                            parameters now IN, OUT or       //
//                                            IN_OUT.                         //
// 0.1 Khairul Basar    12-Jun-2009 NA        Initial design.                 //
//----------------------------------------------------------------------------//
// R4:                                                                        //
// 1.If SQ not finished Resume command will start Step timer, and redo the    //
// last action, verify the feedback.                                          //
// 2."STEP.finished" flag is ANDed with "TRN_AND_JUMP" in the snippet file    //
// TRN_HDR.This is to avoid checking of transition logic if STEP is not       //
// finished yet.                                                              //
// 3.MDCH, Load & transfer typo corrected.                                    //
//                                                                            //
// R3:                                                                        //
// 1.SqStepTimer.IN is reset in STEP_FTR instead of resetting it in TRN_HDR.  //
// This is because TRN_HDTR is not included in the Last step and StepTimer    //
// must reset in the last step.                                               //
// 2.Reset all the timers when SQ stops.Reset done in SEQ_HDR.                //
// Also STEP-finished flag reset when SQ is OFF to                            //
// scan last step.                                                            //
//                                                                            //
// R2:                                                                        //
// 1.Any step error will send the Sequencer into Pause state.Code added in    //
// SEQ_HDR.Snippet Place holder for Bool-array 24 is   //
// deleted.                                                                   //
//                                                                            //
// R1:                                                                        //
// 1.sqStepTimer:All Verification Code must satisfy the condition finish step //
// action within STEP_DELAY time(40s).If step actions not finished within the //
// time period the error flag will raise High signal.Else timer will reset.   //
// 2.sqRunTimer Added therefore can be used as retentive & non retentive.     //
// 3.sqSequencer: This is re-structured UDT which is redefined the symbol     //
// names as well as it gives more clearity.                                   //
// 4.fcMODE and fcCMD functions are added to handle the mode & command        //
// independently regardless of other logic.Two separate UDT udtMODE & udt     //
// CMD assigned to Mode & command function respectively.                      //
// 5.MAN_JUMP programed for manual mode jump operation with or without        //
// Transition code satisfied.TRN_AND_JUMP & NO_VERIFC are the parameters      //
// which will define whether verification code & transition code need to be   //
// checked to perform jump operation.                                         //
// 6.Auto to Manual switchover will be bumpless & will not affect step        //
// operation.Manual to auto switchover can be used to resume Step action at   //
// defined.                                                                   //
// Step number entered in STEPNO_JUMP.                                        //
//                                                                            //
// Parameters:                                                                //
// INPUTS                                                                     //
// ======                                                                     //
// SQ_CMD          Sequence command input inherited from object block         //
//                 0: off/idle                                                //
//                 1: start/initiate                                          //
//                 2: pause                                                   //
//                 3: resume                                                  //
//                 4: reserved (not programmed)                               //
//                 5: reserved (not programmed)                               //
//                 6: abort/go to last step                                   //
//                 7: acknowledge error/fault                                 //
// SQ_MODE         Sequencer Auto/Manual input inherited from object block    //
//                 1: manual                                                  //
//                 2: auto                                                    //
//                                                                            //
// INPUT/OUTPUTS                                                              //
// =============                                                              //
// SQ_JUMP_MAN     Allows manual jumping from one step to the next step. The  //
//                 manual jump flag is ORed with the transition process       //
//                 condition and so can be used to bypass the condition if the//
//                 sequence will not progress.                                //
//                 This input can also be used to jump to any step even       //
//                 when no transition -> step linkage exists. This is only    //
//                 possible when the SQ_MODE is in manual and SQ is in the    //
//                 idle step. The step to jump to is specified in             //
//                 SQ_man_jump_to_step (not accesseble by this FB in/out      //
//                 interface but a separate DB memory location).              //
//                                                                            //
// OUTPUTS                                                                    //
// =======                                                                    //
// SQ_STATE        The calculated state of the sequence                       //
//                 0: off/idle                                                //
//                 1: start/initiated                                         //
//                 2: paused                                                  //
//                 3: resumed                                                 //
//                 4: reserved (wrong Mode)                                   //
//                 5: reserved (Wrong commad)                                 //
//                 6: aborted/go to last step                                 //
//                 7: acknowledged error/fault                                //
// CURSTEP         Current step being proccessed.                             //
// S_ACTIVE        If current step is active                                  //
// NXT_STEP        Next step to jump to if transition condition is true       //
// ERR_FAULT       True if any error/ or fault present                        //
// PAUSED          True if step is paused                                     //
// OFF_IDLE        Sequence is not running but ready for next SQ (in step=0)  //
//----------------------------------------------------------------------------//
// Define variables:                                                          //
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "fbUO_SY_SETUP"
TITLE = UO : SY_SETUP
{ S7_Optimized_Access := 'TRUE' }
NAME : MUSET
AUTHOR : REO
VERSION : 2.0

VAR_IN_OUT
    _emx_drain_state :INT ;	//Sy drain line state
    _emx_smfldrn_state :INT ;	//SMFL drain line state
    _emv_inlet_state :INT ;	//Vessel inlet state
    _vessel_sy :INT ;	//Storage vessel selection S1 or S2
    _fill_flz :INT ;	//Filling line selection FL1 or Fl2
    _vessel_mx :INT ;	//Manufacturing vessel selection M1 or M2
    _emc_gas_pi_vessel_pv :REAL ;	//Vessel pressure
    _emx_smfl_state :INT ;	//Device State of emx_smfl
    _vacuum_hold_test :BOOL ;	//Vacuum hold test enquiry
    _emc_water_sy_state :INT ;	//Device State of emc_water
    _emv_vessel_state :INT ;	//Device State of emv_vessel
    _emg_filter_state :INT ;	//Device State of emg_filter
    _emx_transfer_state :INT ;	//Device State of emx_transfer
    _emc_gas_state :INT ;	//Device State of emc_gas

    _emc_gas_setpoint :REAL ;	//Gas pressure setpoint
    _emx_drain_cmd :INT ;	//Sy drain line command
    _emx_drain_subs :INT ;	//Sy drain line substate
    _emx_smfldrn_subs :INT ;	//SMFL drain line substate
    _emx_smfldrn_cmd :INT ;	//SMFL drain line command
    _emv_inlet_subs :INT ;	//Vessel inlet substate
    _emv_inlet_cmd :INT ;	//Vessel inlet command
    _emx_smfl_cmd :INT ;	//Command to emx_smfl
    _emx_smfl_subs :INT ;	//Substate selection to emx_smfl
    _emc_gas_medium_gas :INT ;	//Medium selection for emc_gas
    _emc_water_sy_cmd :INT ;	//Command to emc_water
    _emc_water_sy_subs :INT ;	//Substate selection to emc_water
    _emc_water_sy_medium_liquid :INT ;	//Medium selection for emc_water
    _emv_vessel_subs :INT ;	//Substate selection to emv_vessel
    _emv_vessel_cmd :INT ;	//Command to emv_vessel
    _emx_transfer_cmd :INT ;	//Command to emx_transfer
    _emg_filter_cmd :INT ;	//Command to emg_filter
    _emx_transfer_subs :INT ;	//Substate selection to EXxy07
    _emg_filter_subs :INT ;	//Substate selection to emg_filter
    _emc_gas_cmd :INT ;	//Command to emc_gas
    _emc_gas_subs :INT ;	//Substate selection to emc_gas


    dummy : bool;            // Dummy placeholder for call without comma
END_VAR

VAR
    smc : "udtModeCommandSFC";         // SFC mode and command
    sqStepTimer : "TON";
    sqRunTimer : "fbRunTimer";
    sqSequencer : "udtSFCSequence32";
    SQ_TIMER: "TON";
    SQ_TIMER2: "TON";
    SQ_TIMER3: "TON";
    sqSeqTimerStart : Bool;
    sqSeqTimerStart2 : Bool;
    sqSeqTimerStart3 : Bool;
    sqSeqTimerElapsed : Time;
    sqSeqTimerElapsed2 : Time;
    sqSeqTimerElapsed3 : Time;
    sqSeqTimerExpired : Bool;
    sqSeqTimerExpired2 : Bool;
    sqSeqTimerExpired3 : Bool;
    sqStepTimerElapsed : Time;
    sqStepTimerExpired : Bool;
    _r_pres_gas_empty :REAL ;	//Air pressure to empty vessel
    _prompt_vessel_empty_confirm_yes :BOOL ;	//UO_SY_SETUP Operator confirm vessel drained confirmed yes
    _prompt_vessel_empty :BOOL ;	//UO_SY_SETUP Operator to confirm vessel and lines fully drained
    _real_not_held :REAL ;	//UO_SY_SETUP Vacuum hold pressure test failed
    _real_vacuum_fail :REAL ;	//UO_MX_SETUP Vacuum failed pressure after vacuum timer expired
    _real_pressure_sy :REAL ;	//US_SY_SETUP Vessel pressure
    _log_real_pressure_sy :BOOL ;	//US_SY_SETUP Vessel pressure
    _log_real_not_held :BOOL ;	//UO_SY_SETUP Vacuum hold pressure test failed
    _vacuum_held_begin_time :TOD ;	//vacuum hold begin time
    _vacuum_held_end_time :TOD ;	//vacuum hold end time
    _time_act_vacuum_held :TIME ;	//UO_SY_SETUP Vacuum held time
    _log_time_act_vacuum_held :BOOL ;	//UO_SY_SETUP Vacuum held time
    _prompt_not_held :BOOL ;	//UO_SY_SETUP Operator to confirm to retry as vacuum pressure not held
    _prompt_not_held_confirm_yes :BOOL ;	//UO_SY_SETUP Operator confirmed to retry as vacuum pressure not held
    _prompt_not_held_confirm_no :BOOL ;	//UO_SY_SETUP Operator confirmed to abort as vacuum pressure not held
    _log_msg_not_held_repeat :BOOL ;	//UO_SY_SETUP Operator confirmed to retry as vacuum pressure not held
    _log_msg_not_held_abort :BOOL ;	//UO_SY_SETUP Operator confirmed to abort as vacuum pressure not held
    _prompt_not_reach :BOOL ;	//UO_SY_SETUP Operator to confirm to retry as vacuum pressure not reached
    _prompt_not_reach_confirm_yes :BOOL ;	//UO_SY_SETUP Operator confirmed to retry as vacuum pressure not reached
    _prompt_not_reach_confirm_no :BOOL ;	//UO_SY_SETUP Operator confirmed to abort as vacuum pressure not reached
    _log_msg_not_reach_repeat :BOOL ;	//UO_SY_SETUP Operator confirmed to retry as vacuum pressure not reached
    _log_msg_not_reach_abort :BOOL ;	//UO_SY_SETUP Operator confirmed to abort as vacuum pressure not reached
    _log_real_vacuum_fail :BOOL ;	//UO_SY_SETUP Vacuum failed after vacuum timer expired
    _log_msg_vacuum_begin :BOOL ;	//UO_SY_SETUP Vacuum begin time
    _log_msg_setup_end :BOOL ;	//UO_SY_SETUP end time
    _log_msg_setup_begin :BOOL ;	//UO_SY_SETUP begin time
    _r_pres_vac_fail :REAL ;	//SY SETUP Pressure reached when vacuum hold test fails
    _r_pres_stm_pos :REAL ;	//SY SETUP Positive steam pressure threshold setpoint
    _r_pres_vac :REAL ;	//SY SETUP Vacuum pressure setpoint
    _r_time_vac_hold :TIME ;	//SY SETUP Time for vacuum hold test
    _r_time_eject :TIME ;	//SY SETUP Time fo vacuum system to run before timeout
    _log_confirmation :TOD ;	//UO_SY_SETUP Logging operator confirmation
    _prompt_connect_ok_confirm_yes :BOOL ;	//UO_SY_SETUP Operator confirmed all vessel connections are properly made
    _prompt_connect_ok :BOOL ;	//UO_SY_SETUP Operator to confirm all vessel connections are properly made

END_VAR

BEGIN
NETWORK
TITLE =Call Mode checking function
    L     #smc.MODE;
    T     #sqSequencer.MODE.current;
    CALL "fcSFCMode"
    (   Mode                 := #sqSequencer.MODE
    );

NETWORK
TITLE =Call Command checking function
    L     #smc.SQ_CMD;
    T     #sqSequencer.CMD.New;
    CALL "fcSFCCommand"
    (   Comand               := #sqSequencer.CMD
    );

NETWORK
TITLE =Sequencer Mode function

      A     #sqSequencer.MODE.changed;
      JC    MDCH; // if Mode changed,jump to mode change function
      A     #sqSequencer.MODE.manual;
      JC    MANU;
      A     #sqSequencer.MODE.auto;
      JC    AUTO;
      A     #sqSequencer.MODE.oos;
      JC    OOS;
      A     #sqSequencer.MODE.wrong;
      JC    WRMD;
      JU    EMOD;

NETWORK
TITLE =Mode change function
//----------------------------------------------------------------------------//
// On positive edge of mode change , this will execute once, only one cycle   //
// before going to execute the selected mode function below:                  //
//----------------------------------------------------------------------------//
MDCH: NOP   0;
      SET   ;
      R     #sqStepTimer.IN;
      L     #sqSequencer.STEP.NumberCurrent;
      T     #smc.STEPNO_JUMP;
      JU    EMOD;

NETWORK
TITLE =Manual Mode function
//----------------------------------------------------------------------------//
// #TRN_AND_JUMP=can set/reset                                                //
// #sqSequencer.STEP.JumpCtrl=Can set/reset by #MAN_JUMP                      //
// #NO_VERIFIC=Can set/ Reset                                                 //
//----------------------------------------------------------------------------//
MANU: NOP   0; //Manual mode selected



      A     #smc.MAN_JUMP;
      =     #sqSequencer.STEP.JumpCtrl;
      A     #smc.MAN_JUMP;
      JCN   EMOD;

      L     #smc.STEPNO_JUMP;
      T     #sqSequencer.STEP.NumberNext;
      T     #sqSequencer.STEP.NumberCurrent;
      R     #smc.MAN_JUMP; //Reset MAN_JUMP after loading user destination Step number
      R     #sqSequencer.STEP.Finished; //Reset finish flag, to execute next step action
      JU    EMOD;

NETWORK
TITLE =Auto Mode function
//----------------------------------------------------------------------------//
// #TRN_AND_JUMP=always set                                                   //
// #sqSequencer.STEP.JumpCtrl=Always set                                      //
// #NO_VERIFIC=Alwasy Reset                                                   //
//----------------------------------------------------------------------------//
AUTO: NOP   0; //Auto mode selected



      R     #smc.MAN_JUMP;
      S     #smc.TRN_AND_JUMP;
      R     #smc.NO_VERIFIC;
      S     #sqSequencer.STEP.JumpCtrl; //Always Set in auto mode

      L     #sqSequencer.STEP.NumberCurrent;
      T     #smc.STEPNO_JUMP;
      JU    EMOD;
NETWORK
TITLE =OOS mode function

OOS:  NOP   0; // Out of service
      JU    EMOD;
WRMD: NOP   0; //Wrong mode selected
      S     #sqSequencer.Error_Fault;
      L     "dbCONST".SEQ.STATE.WRMODE;
      T     #smc.SQ_STATE;

      JU    EMOD;

NETWORK
TITLE =Mode not changedd

      NOP   0;

NETWORK
TITLE =End Mode function

EMOD: NOP   0;

NETWORK
TITLE =An error will Pause the Sequencer,Operator must Resume SQ to run

      A     #sqSequencer.Error_Fault;
      AN    #sqSequencer.CMD.Changed;
      JC    PAUS;

NETWORK
TITLE =Command Action function

      A     #sqSequencer.CMD.Changed;
      JCN   CNCH; // if Command not changed,jump to end function
      R     #sqStepTimer.IN;

      A     #sqSequencer.CMD.Start;
      JC    STRT;

      A     #sqSequencer.CMD.Stop;
      JC    STOP;

      A     #sqSequencer.CMD.Pause;
      JC    PAUS;

      A     #sqSequencer.CMD.Resume;
      JC    RESM;

      A     #sqSequencer.CMD.Abort;
      JC    _abrt_begin;

      A     #sqSequencer.CMD.Ack;
      JC    ACKN;

      A     #sqSequencer.CMD.wrong;
      JC    WCMD;

      JU    ECMD; //Wrong command/not specified command
//End Comand function

NETWORK
TITLE =Comand -Start/Initiate action function

STRT: NOP   0;
      R     #smc.OFF_IDLE;
      R     #smc.ABORTED;
      R     #smc.PAUSED;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;
      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.TimerExpired;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqStepTimer.IN;

//      S     #sqRunTimer.RESET;

//----------------------------------------------------------------------------//
// Load Initial step Number:                                                  //
//----------------------------------------------------------------------------//
      L     1;
      T     #sqSequencer.STEP.Initial;
      L     #sqSequencer.STEP.Initial;
      T     #sqSequencer.STEP.NumberCurrent;
      T     #sqSequencer.STEP.NumberNext;

      L     "dbCONST".SEQ.STATE.STARTED;
      T     #smc.SQ_STATE;

NETWORK
TITLE = Reset sequence Done bits
    //------------------------------------------------------------------------//
    // Reset Step done bits:                                                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 32 ,
        OUT                  := #sqSequencer.STEP.Done[1]
    );

NETWORK
TITLE = Reset sequence Error bits
    //------------------------------------------------------------------------//
    // Reset Step error bits:                                                 //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 32 ,
        OUT                  := #sqSequencer.STEP.WithError[1]
    );

    JU    ECMD; //End Function

NETWORK
TITLE =Comand -Stop action function

STOP: NOP   0;
      S     #smc.OFF_IDLE;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;
      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.TimerExpired;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.Error_Fault;
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqRunTimer.ENABLE;
      R     #sqStepTimer.IN;
      R     #sqSeqTimerStart;
      R     #sqSeqTimerStart2;
      R     #sqSeqTimerStart3;
      R     #smc.PAUSED;
      R     #smc.ABORTED;


//Go to last step
      L     19;
      T     #sqSequencer.FinalStep;
      T     #sqSequencer.STEP.NumberNext;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Pause action function

PAUS: NOP   0;
      S     #smc.PAUSED;
      R     #smc.S_ACTIVE;
      S     #sqRunTimer.PAUSE;
      L     #sqSequencer.STEP.NumberCurrent;
      T     #smc.STEPNO_JUMP;
      L     "dbCONST".SEQ.STATE.PAUSED;
      T     #smc.SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Resume action function

RESM: NOP   0;
      R     #smc.PAUSED;
      R     #sqRunTimer.PAUSE;
      R     #sqStepTimer.IN; //Reset Step timer
      L     "dbCONST".SEQ.STATE.RESUMED;
      T     #smc.SQ_STATE;

      A     #smc.SQ_FINISHED;
      JC    ECMD;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Abort action function

_abrt_begin: NOP   0;

      S     #smc.ABORTED;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;
      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.TimerExpired;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.Error_Fault;
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqRunTimer.ENABLE;
      R     #sqStepTimer.IN;
      R     #sqSeqTimerStart;
      R     #sqSeqTimerStart2;
      R     #sqSeqTimerStart3;
      R     #smc.PAUSED;
      R     #smc.OFF_IDLE;


//Go to last step
      L     19;
      T     #sqSequencer.FinalStep;
      T     #sqSequencer.STEP.NumberNext;

      JU    ECMD;

NETWORK
TITLE =Comand -Acknowledge action function

ACKN: NOP   0;
      R     #smc.ERR_FAULT;
      R     #sqSequencer.Error_Fault;
      L     "dbCONST".SEQ.STATE.ACKNOWLEDGED;
      T     #smc.SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -wrong/unavailable

WCMD: NOP   0;

      S     #sqSequencer.Error_Fault;
      L     "dbCONST".SEQ.STATE.WRCMD;
      T     #smc.SQ_STATE;

      JU    ECMD;
NETWORK
TITLE =Comand -not changedd

CNCH: NOP   0; // Command not changed

NETWORK
TITLE =End command Function

ECMD: NOP   0;

NETWORK
TITLE =Sequencer Step Jump distrubution list
    //------------------------------------------------------------------------//
    // Sequencer step jump list. Load the step number to execute the step:    //
    //------------------------------------------------------------------------//
    L     #sqSequencer.STEP.NumberCurrent;
    JL    SQER; // If Sequencer Step number invalid or greater than available number of step
    JU    S000; // Exceptional Error Handling
    JU    S001; // STEP-001:
JU    S002; // STEP-002:
JU    S003; // STEP-003:
JU    S004; // STEP-004:
JU    S005; // STEP-005:
JU    S006; // STEP-006:
JU    S007; // STEP-007:
JU    S008; // STEP-008:
JU    S009; // STEP-009:
JU    S010; // STEP-010:
JU    S011; // STEP-011:
JU    S012; // STEP-012:
JU    S013; // STEP-013:
JU    S014; // STEP-014:
JU    S015; // STEP-015:
JU    S016; // STEP-016:
JU    S017; // STEP-017:
JU    S018; // STEP-018:
JU    S019; // STEP-019:


    //------------------------------------------------------------------------//
    // If Step number is Invalid or Out of Range:                             //
    //------------------------------------------------------------------------//
SQER: NOP   0;
    A     "alwaysLow";
    S     #sqSequencer.Error_Fault;
    JU    COMM; // Jump to Common Sequencer code handling function

NETWORK
TITLE =STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP
    //------------------------------------------------------------------------//
    // STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP //
    //------------------------------------------------------------------------//

NETWORK
TITLE =S000: STEP0::If Paused exit

S000: NOP   0;
      JU    COMM;






NETWORK
TITLE =S001: STEP-01::UO_SY_SETUP : Setup Unit Operation Commenced
    //================================ STEP HEADER ===========================//
    // STEP001 STEP001 STEP001 STEP001
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP001 STEP001 STEP001 STEP001
    //------------------------------------------------------------------------//
    // Log Sy SETUP operation begin.
    // Prompt operator to confirm that all vessel connections, including the permanent flexible connections are properly made.
    // 
    // Set Sy equipments to SAFE state.
    //------------------------------------------------------------------------//
S001: NOP   0;

      SET;
      R     #sqSequencer.STEP.jumpDone[01];
      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S001:STEP-01:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A001; // Exit Action code, Jump to A001 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L001; // Action number loaded, Jump to L001--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L001: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r001; //Wrong Action number
      JU    _001; //Action error handling
       JU    aa01; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r001: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k001; //Exit
_001: NOP   0; // Action error handling
      JU    k001; // Exit






NETWORK
TITLE =S001:: STEP-001:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Log Sy SETUP operation begin.
    // //Prompt operator to confirm correct vessel connections.
    // //
    // //Set Sy equipments to SAFE state.
    aa01: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Log Sy SETUP operation begin.
SET;
S #_log_msg_setup_begin;

SET;
S #_prompt_connect_ok;

//Set Sy equipments to SAFE state.
L "dbCONST".BLK.CMD.STOP;
T  #_emc_gas_cmd;
T  #_emv_vessel_cmd;
T  #_emc_water_sy_cmd;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A(;
L #_emc_gas_state;
L "dbCONST".BLK.STATE.STOPPED;
==I;
);
A(;
L #_emv_vessel_state;
L "dbCONST".BLK.STATE.STOPPED;
==I;
);
A(;
L #_emc_water_sy_state;
L "dbCONST".BLK.STATE.STOPPED;
==I;
);
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k001;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[01];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k001;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k001: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[01]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S001:STEP-001::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A001: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S001::STEP 001:TRAN 001: Empty Transition
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Jump
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A #_prompt_connect_ok_confirm_yes;






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[01];

NETWORK
TITLE =S001:t001::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x001;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     02;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step02.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x001: NOP   0;






NETWORK
TITLE =S001::STEP-001:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S002: STEP-02::UO_SY_SETUP : Setup manual flowpath devices
    //================================ STEP HEADER ===========================//
    // STEP002 STEP002 STEP002 STEP002
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP002 STEP002 STEP002 STEP002
    //------------------------------------------------------------------------//
    // Setup the following paths:
    // Spool piece SPx2 SMFLx to ZSCx111
    // Flowplate FP31 Mx to Sy/FLz ZSCn11y
    // Flowplate FP33 Sy to FLzZSC-zzyyy
    //------------------------------------------------------------------------//
S002: NOP   0;

      SET;
      R     #sqSequencer.STEP.jumpDone[02];
      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S002:STEP-02:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A002; // Exit Action code, Jump to A002 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L002; // Action number loaded, Jump to L002--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L002: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r002; //Wrong Action number
      JU    _002; //Action error handling
       JU    aa02; //ACTION-01
JU    ab02; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r002: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k002; //Exit
_002: NOP   0; // Action error handling
      JU    k002; // Exit






NETWORK
TITLE =S002:: STEP-002:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Reset Ems
    aa02: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.CMD.STOP;
T #_emx_smfl_cmd;
T #_emx_transfer_cmd;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A(;
L   #_emx_smfl_state;
L   "dbCONST".BLK.STATE.STOPPED;
==I;
);
A(;
L   #_emx_transfer_state;
L   "dbCONST".BLK.STATE.STOPPED;
==I;
);
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= ACT FOOTER ===============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k002;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // Load Next Step Action number:                                          //
    //------------------------------------------------------------------------//
    L     02; //Load next Action
    T     #sqSequencer.STEP.ActionNumber;






NETWORK
TITLE =S002:: STEP-002:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Setup the following path:
    // //Spool piece SPx2 SMFLx to ZSCx111
    // //Flowplate FP31 Mx to Sy/FLz ZSCn11y
    // //Flowplate FP33 Sy to FLzZSC-zzyyy
    ab02: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    // Start CIP_SETUP.
L "dbCONST".BLK.CMD.START;
T #_emx_smfl_cmd;
L "dbCONST".BLK.EMX6.SUBS.SETUP_CIP;
T #_emx_smfl_subs;

//Start EMX2 SETUP.
L "dbCONST".BLK.CMD.START;
T #_emx_transfer_cmd;
L "dbCONST".BLK.EMX2.SUBS.SETUP;
T #_emx_transfer_subs;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A(;
L #_emx_smfl_subs;
L "dbCONST".BLK.EMX6.SUBS.SETUP_CIP;
==I;
);
A(;
L #_emx_transfer_subs;
L "dbCONST".BLK.EMX2.SUBS.SETUP;
==I;
);
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k002;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[02];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k002;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k002: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[02]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S002:STEP-002::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A002: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S002::STEP 002:TRAN 002: Setup
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Continue if setup completed
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A(;
L   #_emx_smfl_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);
A(;
L   #_emx_transfer_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[02];

NETWORK
TITLE =S002:t002::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x002;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     03;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step03.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x002: NOP   0;






NETWORK
TITLE =S002::STEP-002:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S003: STEP-03::UO_SY_SETUP : Connect PW line
    //================================ STEP HEADER ===========================//
    // STEP003 STEP003 STEP003 STEP003
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP003 STEP003 STEP003 STEP003
    //------------------------------------------------------------------------//
    // Connect PW inlet line to Sy. Set emc_water to substate SETUP and MEDIUM=PW.
    // Set emv_vessel to substate DISCHARGE.
    //------------------------------------------------------------------------//
S003: NOP   0;

      SET;
      R     #sqSequencer.STEP.jumpDone[03];
      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S003:STEP-03:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A003; // Exit Action code, Jump to A003 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L003; // Action number loaded, Jump to L003--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L003: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r003; //Wrong Action number
      JU    _003; //Action error handling
       JU    aa03; //ACTION-01
JU    ab03; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r003: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k003; //Exit
_003: NOP   0; // Action error handling
      JU    k003; // Exit






NETWORK
TITLE =S003:: STEP-003:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Reset EMs
    aa03: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.CMD.STOP;
T #_emc_water_sy_cmd;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A(;
L   #_emc_water_sy_state;
L   "dbCONST".BLK.STATE.STOPPED;
==I;
);
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= ACT FOOTER ===============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k003;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // Load Next Step Action number:                                          //
    //------------------------------------------------------------------------//
    L     02; //Load next Action
    T     #sqSequencer.STEP.ActionNumber;






NETWORK
TITLE =S003:: STEP-003:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Set Sy equipment to requested states.
    // //Connect PW inlet line to Sy. Set emc_water to substate SETUP and MEDIUM=PW.
    // //
    // //Set emv_vessel to substate DISCHARGE.
    ab03: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    // Connect PW inlet line to Sy.
L "dbCONST".SEL.LIQUID.PW;
T #_emc_water_sy_medium_liquid;
L "dbCONST".BLK.EMC3.SUBS.SETUP;
T #_emc_water_sy_subs;
L "dbCONST".BLK.CMD.START;
T #_emc_water_sy_cmd;

// Set emv_vessel to substate DISCHARGE.
L "dbCONST".BLK.EMV1.SUBS.DISCHARGE;
T #_emv_vessel_subs;
L "dbCONST".BLK.CMD.START;
T #_emv_vessel_cmd;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A(;
L   #_emc_water_sy_subs;
L   "dbCONST".BLK.EMC3.SUBS.SETUP;
==I;
);
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k003;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[03];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k003;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k003: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[03]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S003:STEP-003::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A003: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S003::STEP 003:TRAN 003: SETUP Complete?
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Cointinue if SETUP completed
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A(;
L   #_emc_water_sy_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);
A(;
L   #_emv_vessel_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[03];

NETWORK
TITLE =S003:t003::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x003;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     04;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step04.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x003: NOP   0;






NETWORK
TITLE =S003::STEP-003:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S004: STEP-04::UO_SY_SETUP : Open valves to drain vessel
    //================================ STEP HEADER ===========================//
    // STEP004 STEP004 STEP004 STEP004
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP004 STEP004 STEP004 STEP004
    //------------------------------------------------------------------------//
    // Open Sy outlet line valves.
    //------------------------------------------------------------------------//
S004: NOP   0;

      SET;
      R     #sqSequencer.STEP.jumpDone[04];
      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S004:STEP-04:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A004; // Exit Action code, Jump to A004 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L004; // Action number loaded, Jump to L004--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L004: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r004; //Wrong Action number
      JU    _004; //Action error handling
       JU    aa04; //ACTION-01
JU    ab04; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r004: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k004; //Exit
_004: NOP   0; // Action error handling
      JU    k004; // Exit






NETWORK
TITLE =S004:: STEP-004:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Reset EMs
    aa04: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.CMD.STOP;
T #_emc_gas_cmd;
T #_emv_inlet_cmd;
T #_emv_vessel_cmd;
T #_emx_smfl_cmd;
T #_emx_smfldrn_cmd;
T #_emx_drain_cmd;
T #_emx_transfer_cmd;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A(;
L   #_emc_gas_state;
L   "dbCONST".BLK.STATE.STOPPED;
==I;
);
A(;
L   #_emv_inlet_state;
L   "dbCONST".BLK.STATE.STOPPED;
==I;
);
A(;
L   #_emv_vessel_state;
L   "dbCONST".BLK.STATE.STOPPED;
==I;
);
A(;
L   #_emx_smfl_state;
L   "dbCONST".BLK.STATE.STOPPED;
==I;
);
A(;
L   #_emx_smfldrn_state;
L   "dbCONST".BLK.STATE.STOPPED;
==I;
);
A(;
L   #_emx_drain_state;
L   "dbCONST".BLK.STATE.STOPPED;
==I;
);
A(;
L   #_emx_transfer_state;
L   "dbCONST".BLK.STATE.STOPPED;
==I;
);
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= ACT FOOTER ===============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k004;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // Load Next Step Action number:                                          //
    //------------------------------------------------------------------------//
    L     02; //Load next Action
    T     #sqSequencer.STEP.ActionNumber;






NETWORK
TITLE =S004:: STEP-004:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Open valves on Mx to drain flow path to drain the vesse with HPCA air pressurel.
    // //Clear used flags.
    ab04: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Open Sy inlet valve.
L "dbCONST".BLK.EMV2.SUBS.CHARGE;
T #_emv_inlet_subs;
L "dbCONST".BLK.CMD.START;
T #_emv_inlet_cmd;

//Open Sy outlet valve.
L "dbCONST".BLK.EMV1.SUBS.DISCHARGE;
T #_emv_vessel_subs;
L "dbCONST".BLK.CMD.START;
T #_emv_vessel_cmd;

//Open transfer line valves.
L "dbCONST".BLK.EMX2.SUBS.SIP;
T #_emx_transfer_subs;
L "dbCONST".BLK.CMD.START;
T #_emx_transfer_cmd;

//Open SMFL valves.
L "dbCONST".BLK.EMX6.SUBS.SIP;
T #_emx_smfl_subs;
L "dbCONST".BLK.CMD.START;
T #_emx_smfl_cmd;

//Open SMFL drain valves.
L "dbCONST".BLK.EMX4.SUBS.CIP;
T #_emx_smfldrn_subs;
L "dbCONST".BLK.CMD.START;
T #_emx_smfldrn_cmd;

//Open CIP drain valve.
L "dbCONST".BLK.EMX4.SUBS.CIP;
T #_emx_drain_subs;
L "dbCONST".BLK.CMD.START;
T #_emx_drain_cmd;

//Enable HPCA.
L "dbCONST".SEL.GAS.HPCA;
T #_emc_gas_medium_gas;
L #_r_pres_gas_empty;
T #_emc_gas_setpoint;
L "dbCONST".BLK.EMC1.SUBS.PRESSURE;
T #_emc_gas_subs;
L "dbCONST".BLK.CMD.START;
T #_emc_gas_cmd;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A(;
L #_emv_inlet_subs;
L "dbCONST".BLK.EMV2.SUBS.CHARGE;
==I;
);
A(;
L #_emv_vessel_subs;
L "dbCONST".BLK.EMV1.SUBS.DISCHARGE;
==I;
);
A(;
L #_emx_transfer_subs;
L "dbCONST".BLK.EMX2.SUBS.SIP;
==I;
);
A(;
L #_emx_smfl_subs;
L "dbCONST".BLK.EMX6.SUBS.SIP;
==I;
);
A(;
L #_emx_smfldrn_subs;
L "dbCONST".BLK.EMX4.SUBS.CIP;
==I;
);
A(;
L #_emx_drain_subs;
L "dbCONST".BLK.EMX4.SUBS.CIP;
==I;
);
A(;
L #_emc_gas_subs;
L "dbCONST".BLK.EMC1.SUBS.PRESSURE;
==I;
);
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k004;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[04];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k004;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k004: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[04]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S004:STEP-004::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A004: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S004::STEP 004:TRAN 004: Drain valves opened
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Drain path valves are opened.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A(;
L   #_emv_inlet_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);
A(;
L   #_emv_vessel_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);
A(;
L   #_emx_smfl_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);
A(;
L   #_emx_smfldrn_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);
A(;
L   #_emx_drain_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);
A(;
L   #_emx_transfer_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);
A(;
L   #_emc_gas_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[04];

NETWORK
TITLE =S004:t004::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x004;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     05;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step05.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x004: NOP   0;






NETWORK
TITLE =S004::STEP-004:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S005: STEP-05::UO_SY_SETUP : Wait for operator to confirm vessel empty
    //================================ STEP HEADER ===========================//
    // STEP005 STEP005 STEP005 STEP005
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP005 STEP005 STEP005 STEP005
    //------------------------------------------------------------------------//
    // Prompt operator to confirm vessel empty
    //------------------------------------------------------------------------//
S005: NOP   0;

      SET;
      R     #sqSequencer.STEP.jumpDone[05];
      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S005:STEP-05:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A005; // Exit Action code, Jump to A005 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L005; // Action number loaded, Jump to L005--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L005: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r005; //Wrong Action number
      JU    _005; //Action error handling
       JU    aa05; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r005: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k005; //Exit
_005: NOP   0; // Action error handling
      JU    k005; // Exit






NETWORK
TITLE =S005:: STEP-005:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Prompt operator to confirm vessel empty
    aa05: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    SET;
S #_prompt_vessel_empty;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k005;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[05];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k005;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k005: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[05]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S005:STEP-005::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A005: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S005::STEP 005:TRAN 005: Wait for vesse confirmedl empty
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Jump when operator confirms vessel and lines fully drained
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A #_prompt_vessel_empty_confirm_yes;






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[05];

NETWORK
TITLE =S005:t005::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x005;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     06;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step06.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x005: NOP   0;






NETWORK
TITLE =S005::STEP-005:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S006: STEP-06::UO_SY_SETUP : Close drain valve
    //================================ STEP HEADER ===========================//
    // STEP006 STEP006 STEP006 STEP006
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP006 STEP006 STEP006 STEP006
    //------------------------------------------------------------------------//
    // Close outlet line drain valve.
    //------------------------------------------------------------------------//
S006: NOP   0;

      SET;
      R     #sqSequencer.STEP.jumpDone[06];
      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S006:STEP-06:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A006; // Exit Action code, Jump to A006 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L006; // Action number loaded, Jump to L006--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L006: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r006; //Wrong Action number
      JU    _006; //Action error handling
       JU    aa06; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r006: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k006; //Exit
_006: NOP   0; // Action error handling
      JU    k006; // Exit






NETWORK
TITLE =S006:: STEP-006:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Reset EMs
    aa06: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.CMD.STOP;
T #_emc_gas_cmd;
T #_emx_smfldrn_cmd;
T #_emx_drain_cmd;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A(;
L   #_emx_smfldrn_state;
L   "dbCONST".BLK.STATE.STOPPED;
==I;
);
A(;
L   #_emx_drain_state;
L   "dbCONST".BLK.STATE.STOPPED;
==I;
);
A(;
L   #_emc_gas_state;
L   "dbCONST".BLK.STATE.STOPPED;
==I;
);
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k006;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[06];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k006;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k006: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[06]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S006:STEP-006::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A006: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S006::STEP 006:TRAN 006: Empty transition
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Unconditional jump
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A "uncondJump";






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[06];

NETWORK
TITLE =S006:t006::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x006;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     07;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step07.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x006: NOP   0;






NETWORK
TITLE =S006::STEP-006:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S007: STEP-07::UO_SY_SETUP : Start Vacuum
    //================================ STEP HEADER ===========================//
    // STEP007 STEP007 STEP007 STEP007
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP007 STEP007 STEP007 STEP007
    //------------------------------------------------------------------------//
    // Enable vacuum. 
    // Start vacuum timer(TIME_EJECT). 
    // Log Vacuum begin time
    //------------------------------------------------------------------------//
S007: NOP   0;

      SET;
      R     #sqSequencer.STEP.jumpDone[07];
      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S007:STEP-07:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A007; // Exit Action code, Jump to A007 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L007; // Action number loaded, Jump to L007--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L007: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r007; //Wrong Action number
      JU    _007; //Action error handling
       JU    aa07; //ACTION-01
JU    ab07; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r007: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k007; //Exit
_007: NOP   0; // Action error handling
      JU    k007; // Exit






NETWORK
TITLE =S007:: STEP-007:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Reset gas EM
    aa07: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.CMD.STOP;
T #_emc_gas_cmd;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A(;
L   #_emc_gas_state;
L   "dbCONST".BLK.STATE.STOPPED;
==I;
);
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= ACT FOOTER ===============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k007;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // Load Next Step Action number:                                          //
    //------------------------------------------------------------------------//
    L     02; //Load next Action
    T     #sqSequencer.STEP.ActionNumber;






NETWORK
TITLE =S007:: STEP-007:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Enable vacuum.
    // //Reset timer.
    // //
    ab07: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Enable vacuum.
L "dbCONST".SEL.GAS.VACUUM;
T #_emc_gas_medium_gas;
L "dbCONST".BLK.EMC1.SUBS.VALVE;
T #_emc_gas_subs;
L "dbCONST".BLK.CMD.START;
T #_emc_gas_cmd;

//Start Timer for vacuum timeout
A #SQ_TIMER.Q;
R #sqSeqTimerStart;

AN #SQ_TIMER.Q;
S #sqSeqTimerStart;
L #_r_time_eject;
L 1000;
*I;
T #SQ_TIMER.PT;

//Log vacuum begin time
SET;
S #_log_msg_vacuum_begin;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A #sqSeqTimerStart;
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k007;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[07];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k007;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k007: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[07]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S007:STEP-007::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A007: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S007::STEP 007:TRAN 007: Timer expired?
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Vacuum timer expired.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A #SQ_TIMER.Q;






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[07];

NETWORK
TITLE =S007:t007::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x007;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     08;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step08.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x007: NOP   0;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S007::STEP 007:TRAN 008: Pressure below setpoint?
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Pressure reduced below PRES_VAC.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A(;
L #_emc_gas_pi_vessel_pv;
L #_r_pres_vac;
<R;
);






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[07];

NETWORK
TITLE =S007:t008::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x008;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     09;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step09.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x008: NOP   0;






NETWORK
TITLE =S007::STEP-007:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S008: STEP-08::UO_SY_SETUP : Vacuum hold evacuation failed
    //================================ STEP HEADER ===========================//
    // STEP008 STEP008 STEP008 STEP008
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP008 STEP008 STEP008 STEP008
    //------------------------------------------------------------------------//
    // Raise vacuum failed message.
    // Log vacuum ejector time failed.
    // Prompt operator to confirm to try again.
    //------------------------------------------------------------------------//
S008: NOP   0;

      SET;
      R     #sqSequencer.STEP.jumpDone[08];
      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S008:STEP-08:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A008; // Exit Action code, Jump to A008 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L008; // Action number loaded, Jump to L008--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L008: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r008; //Wrong Action number
      JU    _008; //Action error handling
       JU    aa08; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r008: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k008; //Exit
_008: NOP   0; // Action error handling
      JU    k008; // Exit






NETWORK
TITLE =S008:: STEP-008:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Raise vacuum failed message.
    // //Log vacuum time failed.
    // //Prompt operator to confirm to try again.
    aa08: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Set flag to raise vacuum failed message
SET;
S #_log_real_vacuum_fail;
S #_prompt_not_reach;

//Log pressure after vacuum timer expired(TIME_EJECT failed).
L #_emc_gas_pi_vessel_pv;
T #_real_vacuum_fail;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A "uncondJump";
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k008;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[08];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k008;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k008: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[08]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S008:STEP-008::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A008: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S008::STEP 008:TRAN 009: Try again?
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Operator want to try again.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A #_prompt_not_reach_confirm_yes;






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[08];

NETWORK
TITLE =S008:t009::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x009;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     10;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step10.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x009: NOP   0;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S008::STEP 008:TRAN 010: No try?
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Operator don't want to try again.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A #_prompt_not_reach_confirm_no;






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[08];

NETWORK
TITLE =S008:t010::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x010;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     11;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step11.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x010: NOP   0;






NETWORK
TITLE =S008::STEP-008:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S009: STEP-09::UO_SY_SETUP : Start Vacuum Hold Timer
    //================================ STEP HEADER ===========================//
    // STEP009 STEP009 STEP009 STEP009
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP009 STEP009 STEP009 STEP009
    //------------------------------------------------------------------------//
    // Close Mx vent line vacuum valves.
    // Start Vacuum  Hold Timer.
    // Store Vacuum Hold test begin time.
    //------------------------------------------------------------------------//
S009: NOP   0;

      SET;
      R     #sqSequencer.STEP.jumpDone[09];
      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S009:STEP-09:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A009; // Exit Action code, Jump to A009 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L009; // Action number loaded, Jump to L009--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L009: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r009; //Wrong Action number
      JU    _009; //Action error handling
       JU    aa09; //ACTION-01
JU    ab09; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r009: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k009; //Exit
_009: NOP   0; // Action error handling
      JU    k009; // Exit






NETWORK
TITLE =S009:: STEP-009:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Close vacuum valve.
    aa09: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Close vacuum valve.
L "dbCONST".SEL.GAS.NONE;
T #_emc_gas_medium_gas;
L "dbCONST".BLK.CMD.RESTART;
T #_emc_gas_cmd;

//Start Timer for vacuum hold
A #SQ_TIMER.Q;
R #sqSeqTimerStart;

AN #SQ_TIMER.Q;
S #sqSeqTimerStart;
L #_r_time_vac_hold;
L 1000;
*I;
T #SQ_TIMER.PT;


//Store Vacuum Hold test begin time.
L "dbCONST".CHRONO.CPU_TIME;
T #_vacuum_held_begin_time;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A #sqSeqTimerStart;
A(;
L   #_emc_gas_state;
L   "dbCONST".BLK.STATE.STOPPED;
>I;
);
A(;
L   #_emc_gas_state;
L   "dbCONST".BLK.STATE.INTERLOCKED;
<I;
);
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= ACT FOOTER ===============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k009;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // Load Next Step Action number:                                          //
    //------------------------------------------------------------------------//
    L     02; //Load next Action
    T     #sqSequencer.STEP.ActionNumber;






NETWORK
TITLE =S009:: STEP-009:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Start Vacuum Hold Timer.
    // //Store Vacuum Hold test begin time.
    ab09: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.CMD.START;
T #_emc_gas_cmd;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k009;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[09];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k009;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k009: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[09]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S009:STEP-009::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A009: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S009::STEP 009:TRAN 011: Jump when gas command completed
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Jump when all gas valves closed
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A(;
L   #_emc_gas_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[09];

NETWORK
TITLE =S009:t011::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x011;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     12;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step12.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x011: NOP   0;






NETWORK
TITLE =S009::STEP-009:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S010: STEP-10::UO_SY_SETUP : Log operator repeat
    //================================ STEP HEADER ===========================//
    // STEP010 STEP010 STEP010 STEP010
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP010 STEP010 STEP010 STEP010
    //------------------------------------------------------------------------//
    // Log operator repeat.
    //------------------------------------------------------------------------//
S010: NOP   0;

      SET;
      R     #sqSequencer.STEP.jumpDone[10];
      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S010:STEP-10:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A010; // Exit Action code, Jump to A010 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L010; // Action number loaded, Jump to L010--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L010: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r010; //Wrong Action number
      JU    _010; //Action error handling
       JU    aa10; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r010: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k010; //Exit
_010: NOP   0; // Action error handling
      JU    k010; // Exit






NETWORK
TITLE =S010:: STEP-010:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Log operator repeat.
    aa10: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Log operator repeat.
SET;
S #_log_msg_not_reach_repeat;
R #_prompt_not_held_confirm_yes;
R #sqSeqTimerStart;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A "uncondJump";
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k010;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[10];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k010;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k010: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[10]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S010:STEP-010::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A010: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S010::STEP 010:TRAN 012: Empty Transition
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Empty Transition
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A "uncondJump";






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[10];

NETWORK
TITLE =S010:t012::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x012;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     07;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step07.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x012: NOP   0;






NETWORK
TITLE =S010::STEP-010:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S011: STEP-11::UO_SY_SETUP : Log operator abort
    //================================ STEP HEADER ===========================//
    // STEP011 STEP011 STEP011 STEP011
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP011 STEP011 STEP011 STEP011
    //------------------------------------------------------------------------//
    // Log operator abort.
    //------------------------------------------------------------------------//
S011: NOP   0;

      SET;
      R     #sqSequencer.STEP.jumpDone[11];
      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S011:STEP-11:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A011; // Exit Action code, Jump to A011 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L011; // Action number loaded, Jump to L011--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L011: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r011; //Wrong Action number
      JU    _011; //Action error handling
       JU    aa11; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r011: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k011; //Exit
_011: NOP   0; // Action error handling
      JU    k011; // Exit






NETWORK
TITLE =S011:: STEP-011:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Log operator abort.
    aa11: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Log operator abort.
SET;
S #_log_msg_not_reach_abort;
R #_prompt_not_reach_confirm_no;
R #sqSeqTimerStart;
S #smc.ABORTED;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A "uncondJump";
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k011;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[11];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k011;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k011: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[11]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S011:STEP-011::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A011: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S011::STEP 011:TRAN 013: Empty Transition
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Empty Transition
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A "uncondJump";






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[11];

NETWORK
TITLE =S011:t013::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x013;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     18;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step18.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x013: NOP   0;






NETWORK
TITLE =S011::STEP-011:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S012: STEP-12::UO_MX_SETUP : Vacuum hold test
    //================================ STEP HEADER ===========================//
    // STEP012 STEP012 STEP012 STEP012
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP012 STEP012 STEP012 STEP012
    //------------------------------------------------------------------------//
    // Step required for loop reentry
    //------------------------------------------------------------------------//
S012: NOP   0;

      SET;
      R     #sqSequencer.STEP.jumpDone[12];
      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S012:STEP-12:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A012; // Exit Action code, Jump to A012 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L012; // Action number loaded, Jump to L012--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L012: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r012; //Wrong Action number
      JU    _012; //Action error handling
       JU    aa12; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r012: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k012; //Exit
_012: NOP   0; // Action error handling
      JU    k012; // Exit






NETWORK
TITLE =S012:: STEP-012:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //
    aa12: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k012;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[12];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k012;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k012: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[12]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S012:STEP-012::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A012: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S012::STEP 012:TRAN 014: Empty transition
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// 
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A "uncondJump";






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[12];

NETWORK
TITLE =S012:t014::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x014;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     13;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step13.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x014: NOP   0;






NETWORK
TITLE =S012::STEP-012:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S013: STEP-13::UO_SY_SETUP : Pressure logging
    //================================ STEP HEADER ===========================//
    // STEP013 STEP013 STEP013 STEP013
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP013 STEP013 STEP013 STEP013
    //------------------------------------------------------------------------//
    // Log vessel pressure at 30 second intervals.
    //------------------------------------------------------------------------//
S013: NOP   0;

      SET;
      R     #sqSequencer.STEP.jumpDone[13];
      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S013:STEP-13:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A013; // Exit Action code, Jump to A013 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L013; // Action number loaded, Jump to L013--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L013: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r013; //Wrong Action number
      JU    _013; //Action error handling
       JU    aa13; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r013: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k013; //Exit
_013: NOP   0; // Action error handling
      JU    k013; // Exit






NETWORK
TITLE =S013:: STEP-013:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Set flags to log Sy vessel pressure.
    aa13: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    // Clear gas EM restart command
L "dbCONST".BLK.CMD.START;
T #_emc_gas_cmd;

//Log Sy vessel pressure.
L #_emc_gas_pi_vessel_pv;
T #_real_pressure_sy;

A #SQ_TIMER2.Q;
R #sqSeqTimerStart2;
R #_log_real_pressure_sy;

AN #SQ_TIMER2.Q;
S #sqSeqTimerStart2;
S #_log_real_pressure_sy;
L T#30S;
T #SQ_TIMER2.PT;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A "uncondJump";
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k013;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[13];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k013;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k013: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[13]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S013:STEP-013::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A013: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S013::STEP 013:TRAN 015: Timer Expired
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// TIME_VAC_HOLD expired
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A #SQ_TIMER.Q;






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[13];

NETWORK
TITLE =S013:t015::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x015;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     17;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step17.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x015: NOP   0;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S013::STEP 013:TRAN 016: Pressure above setpoint
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Pressure increased above PRES_VAC_FAIL
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
O(;
L #_emc_gas_pi_vessel_pv;
L #_r_pres_vac_fail;
>R;
);






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[13];

NETWORK
TITLE =S013:t016::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x016;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     14;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step14.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x016: NOP   0;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S013::STEP 013:TRAN 017: Pressure logging timer expired
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// 30 seconds expired
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A #SQ_TIMER2.Q;






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[13];

NETWORK
TITLE =S013:t017::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x017;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     12;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step12.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x017: NOP   0;






NETWORK
TITLE =S013::STEP-013:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S014: STEP-14::UO_SY_SETUP : Vacuum Hold failed
    //================================ STEP HEADER ===========================//
    // STEP014 STEP014 STEP014 STEP014
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP014 STEP014 STEP014 STEP014
    //------------------------------------------------------------------------//
    // Set flag to raise vacuum failed message and prompt operator.
    // Log Sy vessel pressure.
    //------------------------------------------------------------------------//
S014: NOP   0;

      SET;
      R     #sqSequencer.STEP.jumpDone[14];
      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S014:STEP-14:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A014; // Exit Action code, Jump to A014 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L014; // Action number loaded, Jump to L014--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L014: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r014; //Wrong Action number
      JU    _014; //Action error handling
       JU    aa14; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r014: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k014; //Exit
_014: NOP   0; // Action error handling
      JU    k014; // Exit






NETWORK
TITLE =S014:: STEP-014:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Set flag to raise vacuum failed message and prompt operator.
    // //Log Sy vessel pressure.
    aa14: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Set flag to raise vacuum failed message and prompt operator.
SET;
S #_log_real_not_held;
S #_prompt_not_held;


// Stop timer
SET;
R #sqSeqTimerStart;
R #sqSeqTimerStart2;

//Log Sy vessel pressure.
L #_emc_gas_pi_vessel_pv;
T #_real_not_held;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A "uncondJump";
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k014;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[14];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k014;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k014: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[14]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S014:STEP-014::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A014: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S014::STEP 014:TRAN 018: No try?
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Operator don't want to try again.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A #_prompt_not_held_confirm_no;






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[14];

NETWORK
TITLE =S014:t018::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x018;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     15;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step15.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x018: NOP   0;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S014::STEP 014:TRAN 019: Try again?
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Operator want to try again.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A #_prompt_not_held_confirm_yes;






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[14];

NETWORK
TITLE =S014:t019::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x019;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     16;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step16.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x019: NOP   0;






NETWORK
TITLE =S014::STEP-014:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S015: STEP-15::UO_SY_SETUP : Log operator abort
    //================================ STEP HEADER ===========================//
    // STEP015 STEP015 STEP015 STEP015
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP015 STEP015 STEP015 STEP015
    //------------------------------------------------------------------------//
    // Log operator abort.
    //------------------------------------------------------------------------//
S015: NOP   0;

      SET;
      R     #sqSequencer.STEP.jumpDone[15];
      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S015:STEP-15:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A015; // Exit Action code, Jump to A015 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L015; // Action number loaded, Jump to L015--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L015: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r015; //Wrong Action number
      JU    _015; //Action error handling
       JU    aa15; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r015: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k015; //Exit
_015: NOP   0; // Action error handling
      JU    k015; // Exit






NETWORK
TITLE =S015:: STEP-015:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Log operator abort.
    aa15: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Log operator abort.
SET;
S #_log_msg_not_held_abort;
R #_prompt_not_held_confirm_no;
S #smc.ABORTED;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A "uncondJump";
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k015;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[15];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k015;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k015: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[15]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S015:STEP-015::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A015: NOP   0;
    R     #sqStepTimer.IN;






NETWORK
TITLE =S015::STEP-015:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S016: STEP-16::UO_SY_SETUP : Log operator repeat
    //================================ STEP HEADER ===========================//
    // STEP016 STEP016 STEP016 STEP016
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP016 STEP016 STEP016 STEP016
    //------------------------------------------------------------------------//
    // Log operator repeat
    //------------------------------------------------------------------------//
S016: NOP   0;

      SET;
      R     #sqSequencer.STEP.jumpDone[16];
      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S016:STEP-16:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A016; // Exit Action code, Jump to A016 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L016; // Action number loaded, Jump to L016--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L016: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r016; //Wrong Action number
      JU    _016; //Action error handling
       JU    aa16; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r016: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k016; //Exit
_016: NOP   0; // Action error handling
      JU    k016; // Exit






NETWORK
TITLE =S016:: STEP-016:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Log operator repeat
    aa16: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Log operator repeat.
SET;
S #_log_msg_not_held_repeat;
R #_prompt_not_held_confirm_yes;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A "uncondJump";
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k016;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[16];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k016;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k016: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[16]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S016:STEP-016::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A016: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S016::STEP 016:TRAN 021: Empty Transition
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Empty Transition
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A "uncondJump";






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[16];

NETWORK
TITLE =S016:t021::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x021;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     07;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step07.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x021: NOP   0;






NETWORK
TITLE =S016::STEP-016:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S017: STEP-17::UO_SY_SETUP : Log actual time vacuum held.
    //================================ STEP HEADER ===========================//
    // STEP017 STEP017 STEP017 STEP017
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP017 STEP017 STEP017 STEP017
    //------------------------------------------------------------------------//
    // Log actual time vacuum held.
    // Log Sy vessel pressure.
    //------------------------------------------------------------------------//
S017: NOP   0;

      SET;
      R     #sqSequencer.STEP.jumpDone[17];
      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S017:STEP-17:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A017; // Exit Action code, Jump to A017 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L017; // Action number loaded, Jump to L017--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L017: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r017; //Wrong Action number
      JU    _017; //Action error handling
       JU    aa17; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r017: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k017; //Exit
_017: NOP   0; // Action error handling
      JU    k017; // Exit






NETWORK
TITLE =S017:: STEP-017:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Log actual time vacuum held.
    // //Log Sy vessel pressure.
    aa17: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Store Vacuum Hold test end time.
L "dbCONST".CHRONO.CPU_TIME;
T #_vacuum_held_end_time;

//Log actual time vacuum held.
CALL T_DIFF
{date_type := 'Time_Of_Day', time_type := 'Time'}
(  IN1                         := #_vacuum_held_end_time ,
   IN2                         := #_vacuum_held_begin_time ,
  OUT                         := #_time_act_vacuum_held
);
SET;
S #_log_time_act_vacuum_held;
R #sqSeqTimerStart2;

//Log Sy vessel pressure.
L #_emc_gas_pi_vessel_pv;
T #_real_pressure_sy;

SET;
S #_log_real_pressure_sy;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A "uncondJump";
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k017;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[17];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k017;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k017: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[17]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S017:STEP-017::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A017: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S017::STEP 017:TRAN 022: Empty Transition
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Empty Transition
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A "uncondJump";






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[17];

NETWORK
TITLE =S017:t022::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x022;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     18;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step18.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x022: NOP   0;






NETWORK
TITLE =S017::STEP-017:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S018: STEP-18::UO_SY_SETUP : Break vacuum
    //================================ STEP HEADER ===========================//
    // STEP018 STEP018 STEP018 STEP018
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP018 STEP018 STEP018 STEP018
    //------------------------------------------------------------------------//
    // Open HPCA supply valve to break the vacuum.
    //------------------------------------------------------------------------//
S018: NOP   0;

      SET;
      R     #sqSequencer.STEP.jumpDone[18];
      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S018:STEP-18:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A018; // Exit Action code, Jump to A018 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L018; // Action number loaded, Jump to L018--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L018: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r018; //Wrong Action number
      JU    _018; //Action error handling
       JU    aa18; //ACTION-01
JU    ab18; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r018: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k018; //Exit
_018: NOP   0; // Action error handling
      JU    k018; // Exit






NETWORK
TITLE =S018:: STEP-018:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Open HPCA valve to break the vacuum
    aa18: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    L "dbCONST".SEL.GAS.HPCA;
T #_emc_gas_medium_gas;
L "dbCONST".BLK.CMD.RESTART;
T #_emc_gas_cmd;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A(;
L   #_emc_gas_state;
L   "dbCONST".BLK.STATE.STOPPED;
>I;
);
A(;
L   #_emc_gas_state;
L   "dbCONST".BLK.STATE.INTERLOCKED;
<I;
);
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= ACT FOOTER ===============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k018;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // Load Next Step Action number:                                          //
    //------------------------------------------------------------------------//
    L     02; //Load next Action
    T     #sqSequencer.STEP.ActionNumber;






NETWORK
TITLE =S018:: STEP-018:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Clear gas EM restart command
    ab18: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.CMD.START;
T #_emc_gas_cmd;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k018;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[18];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k018;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k018: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[18]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S018:STEP-018::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A018: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S018::STEP 018:TRAN 023: Pressure at zero
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Pressure increased to 0
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
O(;
L #_emc_gas_pi_vessel_pv;
L 0.0;
>R;
);






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;
    S     #sqSequencer.STEP.jumpDone[18];

NETWORK
TITLE =S018:t023::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x023;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     19;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step19.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x023: NOP   0;






NETWORK
TITLE =S018::STEP-018:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S019: STEP-19::UO_SY_SETUP : Setup Unit Operation Completed
    //================================ STEP HEADER ===========================//
    // STEP019 STEP019 STEP019 STEP019
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP019 STEP019 STEP019 STEP019
    //------------------------------------------------------------------------//
    // Clear used flags.
    // Log Sy SETUP operation end time.
    //------------------------------------------------------------------------//
S019: NOP   0;

      SET;
      R     #sqSequencer.STEP.jumpDone[19];
      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S019:STEP-19:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A019; // Exit Action code, Jump to A019 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L019; // Action number loaded, Jump to L019--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L019: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r019; //Wrong Action number
      JU    _019; //Action error handling
       JU    aa19; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r019: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k019; //Exit
_019: NOP   0; // Action error handling
      JU    k019; // Exit






NETWORK
TITLE =S019:: STEP-019:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Clear used flags.
    // //Log Sy SETUP operation end time.
    aa19: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Log SETUP operation end time.
SET;
S #_log_msg_setup_end;
R #_prompt_connect_ok_confirm_yes;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A "uncondJump";
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k019;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[19];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k019;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k019: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[19]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S019:STEP-019::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A019: NOP   0;
    R     #sqStepTimer.IN;






NETWORK
TITLE =S019::STEP-019:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =Sequencer Common Code, Execute in Each Scan
    //============================ SEQ FOOTER ================================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Common code to execute each scan:                                      //
    //------------------------------------------------------------------------//
    COMM: NOP   0;

NETWORK
TITLE =Retentive/Non Retentive Selectable Run timer
    CALL #sqRunTimer (
        TIME_H               := #sqRunTimer.TIME_H,
        TIME_M               := #sqRunTimer.TIME_M,
        TIME_S               := #sqRunTimer.TIME_S,
        ENABLE               := #sqRunTimer.ENABLE,
        RESET                := #sqRunTimer.RESET,
        PAUSE                := #sqRunTimer.PAUSE,
        NON_RET              := #sqRunTimer.NON_RET,
        RMNG_H               := #sqRunTimer.RMNG_H,
        RMNG_M               := #sqRunTimer.RMNG_M,
        RMNG_S               := #sqRunTimer.RMNG_S,
        TIME_EXPIRED         := #sqRunTimer.TIME_EXPIRED,
        TMR_RUNNG            := #sqRunTimer.TMR_RUNNG
    );

NETWORK
TITLE =Sequencer Step Timer
    CALL #sqStepTimer (
        IN                   := #sqStepTimer.IN,
        PT                   := "dbCONST".SEQ.STEP_TIME,
        Q                    := #sqStepTimerExpired,
        ET                   := #sqStepTimerElapsed
    );

NETWORK
TITLE =Sequencer Timer
    CALL #SQ_TIMER (
        IN                   := #sqSeqTimerStart,
        PT                   := #SQ_TIMER.PT,
        Q                    := #sqSeqTimerExpired,
        ET                   := #sqSeqTimerElapsed
    );

    CALL #SQ_TIMER2 (
        IN                   := #sqSeqTimerStart2,
        PT                   := #SQ_TIMER2.PT,
        Q                    := #sqSeqTimerExpired2,
        ET                   := #sqSeqTimerElapsed2
    );

NETWORK
TITLE =Sequencer Timer
    CALL #SQ_TIMER3 (
        IN                   := #sqSeqTimerStart3,
        PT                   := #SQ_TIMER3.PT,
        Q                    := #sqSeqTimerExpired3,
        ET                   := #sqSeqTimerElapsed3
    );

NETWORK
TITLE =General Assignments

    L     #sqSequencer.STEP.NumberNext;
    T     #smc.NXT_STEP;
    T     #sqSequencer.STEP.NumberCurrent;
    T     #smc.CURSTEP;

    A     #sqSequencer.STEP.Active;
    =     #smc.S_ACTIVE;

    A     #sqSequencer.Error_Fault;
    =     #smc.ERR_FAULT;

NETWORK
TITLE = Stop command completion
    A    #smc.OFF_IDLE;
    A    #sqSequencer.STEP.Done[19];
    AN   #sqSequencer.STEP.WithError[19];
    JCN NotStopCmd;
    R    #smc.PAUSED;
    R    #sqSequencer.STEP.Error_Fault;
    R    #sqSequencer.Error_Fault;
    L    "dbCONST".SEQ.STATE.OFF_IDLE;
    T    #smc.SQ_STATE;
NotStopCmd:   NOP 0;

    A    #smc.OFF_IDLE;
    AN    #sqSequencer.STEP.Done[19];
    AN    #sqSequencer.STEP.WithError[19];
    JCN   _stopAction;
    R     #sqSequencer.STEP.Finished;
    R     #smc.PAUSED;
    R     #sqSequencer.STEP.Error_Fault;
    R     #sqSequencer.Error_Fault;
_stopAction:   NOP 0;

NETWORK
TITLE =Sequencer Finished

    AN    #smc.OFF_IDLE;
    AN    #smc.PAUSED;
    A     #sqSequencer.STEP.Done[19];
    =     #sqSequencer.Finished;
    =     #smc.SQ_FINISHED;
    JCN   fnsd;
    L     "dbCONST".SEQ.STATE.COMPLETED;
    T     #smc.SQ_STATE;
    R     #smc.PAUSED;
    R     #sqSequencer.STEP.Error_Fault;
    R     #sqSequencer.Error_Fault;
fnsd: NOP   0;

    //------------------------------------------------------------------------//
    // Reset Finished flag if SQ OFF for Last step to scan:                   //
    //------------------------------------------------------------------------//
    A     #smc.ABORTED;
    AN    #sqSequencer.STEP.Done[19];
    AN    #sqSequencer.STEP.WithError[19];
    JCN   _abrt_end;
    R     #sqSequencer.STEP.Finished;
    R     #smc.PAUSED;
    R     #sqSequencer.STEP.Error_Fault;
    R     #sqSequencer.Error_Fault;
    L     "dbCONST".SEQ.STATE.ABORTED;
    T     #smc.SQ_STATE;
_abrt_end: NOP   0;

    //------------------------------------------------------------------------//
    // Visio Common Code Begin:                                               //
    //------------------------------------------------------------------------//
    

//----------------------------------------------------------------------------//
// End of Sequencer:                                                          //
//----------------------------------------------------------------------------//
END_FUNCTION_BLOCK

