//****************************************************************************************************
// Code generated by SFC Generator V1.13 on 07/04/18 11:23:49 by  David Paspa from File F:\Business\Synertec\MPI.SMS\automation\code\Visio SFC\Snippet_Code\SEQ_HDR.txt
//****************************************************************************************************
//****************************************************************************************************

//================================ SEQ HEADER ================================//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Title: UO_SY_FILL :Sy Transfer to Filling                                                       //
//                                                                            //
// Description:                                                               //
// Sequence for Transfer from Storage Vessel Sy to Filling (Vial or Ampoule)                                                        //
//                                                                            //
// // SFC Revision History:
// Rev By               Date        CC         Note
// 0.2 Srinivas Nimmala 28-Dec-2009 09/073     Added Ampoule and Vial 
//                                             pause buttons to stop filling
// 0.1 Gerald Kontriner 14-Sep-2009            SFC structural design                                                       //
//----------------------------------------------------------------------------//
// Sequencer Revision History:                                                //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      05-Jan-2018 NA        Reboot for S7-1500.             //
// 1.6 Khairul Basar    19-Nov-2009 NA        Reset #sqSequencer.STEP.Active  //
//                                            when STEP Finished.             //
// 1.5 Khairul Basar    15-Oct-2009 NA        Placeholder inserted:           //
//                                            "udtSQ_UO";          //
// 1.4 Khairul Basar    06-Oct-2009 NA        R #PAUSE;                       //
// 1.3 Khairul Basar    30-Sep-2009 NA        SEQ_HDR change STEP-0 code      //
//                                            deleted.                        //
// 1.2 Khairul Basar    26-Sep-2009 NA        Refer R4.                       //
// 1.1 Khairul Basar    23-Sep-2009 NA        Refer R3.                       //
// 1.0 Khairul Basar    20-Sep-2009 NA        STEP.Finished flag reset by     //
//                                            JUMP_MAN.                       //
// 0.9 Khairul Basar    11-Sep-2009 NA        SQ_TIMER added as VAR, declared //
//                                            in SEQ_FTR.                     //
// 0.8 Khairul Basar    09-Sep-2009 NA        SqSequencer.Err_Fault is reset  //
//                                            on Stop cmd, Step-0 dead code   //
//                                            deleted from ACT & Verify.      //
//                                            STP_FTR Step_withErr flag       //
//                                            STEP_NUM place holder           //
//                                            configured.                     //
// 0.7 Khairul Basar    28-Aug-2009 NA        SQ_FINISHED OUT added again.    //
//                                            Deleted during major mod R3.    //
// 0.6 Khairul Basar    23-Aug-2009 NA        Refer R2.                       //
// 0.5 Khairul Basar    23-Aug-2009 NA        Refer R1.                       //
// 0.4 Khairul Basar    18-Aug-2009 NA        Reset Step done with/out error  //
//                                            bits using FC:RSET.             //
// 0.3 David Paspa      16-Aug-2009 NA        Added placeholders for header   //
//                                            name and version and revision   //
//                                            history.                        //
// 0.2 Khairul Basar    11-Aug-2009 NA        Retired external udt file for   //
//                                            Static type parameters. All     //
//                                            parameters now IN, OUT or       //
//                                            IN_OUT.                         //
// 0.1 Khairul Basar    12-Jun-2009 NA        Initial design.                 //
//----------------------------------------------------------------------------//
// R4:                                                                        //
// 1.If SQ not finished Resume command will start Step timer, and redo the    //
// last action, verify the feedback.                                          //
// 2."STEP.finished" flag is ANDed with "TRN_AND_JUMP" in the snippet file    //
// TRN_HDR.This is to avoid checking of transition logic if STEP is not       //
// finished yet.                                                              //
// 3.MDCH, Load & transfer typo corrected.                                    //
//                                                                            //
// R3:                                                                        //
// 1.SqStepTimer.IN is reset in STEP_FTR instead of resetting it in TRN_HDR.  //
// This is because TRN_HDTR is not included in the Last step and StepTimer    //
// must reset in the last step.                                               //
// 2.Reset all the timers when SQ stops.Reset done in SEQ_HDR.                //
// Also STEP-finished flag reset when SQ is OFF to                            //
// scan last step.                                                            //
//                                                                            //
// R2:                                                                        //
// 1.Any step error will send the Sequencer into Pause state.Code added in    //
// SEQ_HDR.Snippet Place holder for Bool-array 8 is   //
// deleted.                                                                   //
//                                                                            //
// R1:                                                                        //
// 1.sqStepTimer:All Verification Code must satisfy the condition finish step //
// action within STEP_DELAY time(40s).If step actions not finished within the //
// time period the error flag will raise High signal.Else timer will reset.   //
// 2.sqRunTimer Added therefore can be used as retentive & non retentive.     //
// 3.sqSequencer: This is re-structured UDT which is redefined the symbol     //
// names as well as it gives more clearity.                                   //
// 4.fcMODE and fcCMD functions are added to handle the mode & command        //
// independently regardless of other logic.Two separate UDT udtMODE & udt     //
// CMD assigned to Mode & command function respectively.                      //
// 5.MAN_JUMP programed for manual mode jump operation with or without        //
// Transition code satisfied.TRN_AND_JUMP & NO_VERIFC are the parameters      //
// which will define whether verification code & transition code need to be   //
// checked to perform jump operation.                                         //
// 6.Auto to Manual switchover will be bumpless & will not affect step        //
// operation.Manual to auto switchover can be used to resume Step action at   //
// defined.                                                                   //
// Step number entered in STEPNO_JUMP.                                        //
//                                                                            //
// Parameters:                                                                //
// INPUTS                                                                     //
// ======                                                                     //
// SQ_CMD          Sequence command input inherited from object block         //
//                 0: off/idle                                                //
//                 1: start/initiate                                          //
//                 2: pause                                                   //
//                 3: resume                                                  //
//                 4: reserved (not programmed)                               //
//                 5: reserved (not programmed)                               //
//                 6: abort/go to last step                                   //
//                 7: acknowledge error/fault                                 //
// SQ_MODE         Sequencer Auto/Manual input inherited from object block    //
//                 1: manual                                                  //
//                 2: auto                                                    //
//                                                                            //
// INPUT/OUTPUTS                                                              //
// =============                                                              //
// SQ_JUMP_MAN     Allows manual jumping from one step to the next step. The  //
//                 manual jump flag is ORed with the transition process       //
//                 condition and so can be used to bypass the condition if the//
//                 sequence will not progress.                                //
//                 This input can also be used to jump to any step even       //
//                 when no transition -> step linkage exists. This is only    //
//                 possible when the SQ_MODE is in manual and SQ is in the    //
//                 idle step. The step to jump to is specified in             //
//                 SQ_man_jump_to_step (not accesseble by this FB in/out      //
//                 interface but a separate DB memory location).              //
//                                                                            //
// OUTPUTS                                                                    //
// =======                                                                    //
// SQ_STATE        The calculated state of the sequence                       //
//                 0: off/idle                                                //
//                 1: start/initiated                                         //
//                 2: paused                                                  //
//                 3: resumed                                                 //
//                 4: reserved (wrong Mode)                                   //
//                 5: reserved (Wrong commad)                                 //
//                 6: aborted/go to last step                                 //
//                 7: acknowledged error/fault                                //
// CURSTEP         Current step being proccessed.                             //
// S_ACTIVE        If current step is active                                  //
// NXT_STEP        Next step to jump to if transition condition is true       //
// ERR_FAULT       True if any error/ or fault present                        //
// PAUSED          True if step is paused                                     //
// OFF_IDLE        Sequence is not running but ready for next SQ (in step=0)  //
//----------------------------------------------------------------------------//
// Define variables:                                                          //
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "fbUO_SY_FILL"
TITLE = UO : SY_FILL
NAME : SUFILL
AUTHOR : REO
VERSION : 0.2

VAR_INPUT
  MODE : INT :=2;
  SQ_CMD : INT :=0;
    _fill_proceed :BOOL ;	//Parent synchronisation flag to proceed with filling operation
    _PAUSE_Button :BOOL ;	//Filling Pause Button
    _FZ :INT ;	//Filling Line Selection
    _DEV_STATE_ECxy02 :INT ;	//Device State of ECxy02
    _DEV_STATE_ECxy01 :INT ;	//Device State of ECxy01
    _DEV_STATE_EGxy05 :INT ;	//Device State of EGxy05
    _DEV_STATE_EJxy03 :INT ;	//Device State of EJxy03
    _DEV_STATE_EVxy04 :INT ;	//Device State of EVxy04
    _DEV_STATE_EXxy07 :INT ;	//Device State of EXxy07
    _SY :INT ;	//Storage Vessel Selection
    _PRES_N2_FILL :REAL ;	//HPN2 setpoint for filling after filter has been bled

END_VAR
VAR_OUTPUT
  SQ_STATE : INT ;
  CURSTEP : INT ;
  NXT_STEP : INT ;
  S_ACTIVE : BOOL ;
  ERR_FAULT : BOOL ;
  PAUSED : BOOL ;
  OFF_IDLE : BOOL ;
  SQ_FINISHED : BOOL ;
    _VALVE_ECxy01 :INT ;	//Valve selection ECxy01
    _SETPOINT_ECxy01 :REAL ;	//Pressure setpoint ECxy01 
    _AUXDRAIN_ECxy01 :BOOL ;	//DRAIN valve selection
    _CMD_ECxy02 :INT ;	//Command to ECxy02
    _AUXVENT_ECxy01 :BOOL ;	//VENT valve selection
    _SUB_ECxy02 :INT ;	//Substate selection to ECxy02
    _CMD_EGxy05 :INT ;	//Command to EGxy05
    _SUB_EGxy05 :INT ;	//Substate selection to EGxy05
    _SUB_ECxy01 :INT ;	//Substate selection to ECxy01
    _CMD_EJxy03 :INT ;	//Command to EJxy03
    _SUB_EJxy03 :INT ;	//Substate selection to EJxy03
    _CMD_ECxy01 :INT ;	//Command to ECxy01
    _CMD_EXxy07 :INT ;	//Command to EXxy07
    _SUB_EVxy04 :INT ;	//Substate selection to EVxy04
    _FILL_A_EXxy07 :BOOL ;	//Filling Line Selection to EXxy07
    _S_FIRST_EXxy07 :BOOL ;	//Storage Vessel Selection to EXxy07
    _SUB_EXxy07 :INT ;	//Substate selection to EXxy07
    _CMD_EVxy04 :INT ;	//Command to EVxy04
    _path_ready :BOOL ;	//Filling path ready parent synchronisation flag

END_VAR
VAR_IN_OUT
  STEPNO_JUMP : INT ;
  MAN_JUMP : BOOL ;
  NO_VERIFIC : BOOL ;
  TRN_AND_JUMP : BOOL ;
    _SHARE_BY_ECxy02 :INT ;	//Equipment arbitration ECxy02

END_VAR
VAR
  sqStepTimer : "TON";
  sqRunTimer : "fbRunTimer";
  sqSequencer : "udtSFCSequencer";
  SQ_TIMER: "TON";
    _prompt_TransferComp :BOOL ;	//Prompt operator to confirm when transfer is complete
    _confirm_Abort :BOOL ;	//Operator confirmed to ABORT filling
    _confirm_TransferComp :BOOL ;	//Operator confirmed completion
    _confirm_FilterBled :BOOL ;	//Operator confirmed Filling machine filter has been bled.
    _prompt_FilterBled :BOOL ;	//Prompt operator to confirm that filling machine sterile filter has been bled
    _log_FLready :TOD ;	//Logging time operator confirmation Filling Line ready.
    _log_FilterBled :TOD ;	//Logging time operator confirmed filter has been bled.
    _confirm_Resume :BOOL ;	//Operator confirmed to RESUME filling
    _prompt_ResumeAbort :BOOL ;	//Prompt operator to RESET Filling Paused button else ABORT the sequence
    _prompt_StartFilling :BOOL ;	//Prompt operator to confirm to start Filling
    _confirm_StartFilling :BOOL ;	//Operator confirms to Start Filling
    _log_ConfStartFill :TOD ;	//Logging FILL begin time
    _log_HPN2Begin :TOD ;	//Logging HPN2 begin time
    _log_FillBegin :TOD ;	//Logging FILL begin time
    _log_FillEnd :TOD ;	//Logging FILL end time
    _confirm_FLready :BOOL ;	//Operator confirms Filling Line is ready
    _prompt_FLready :BOOL ;	//Prompt operator when Filling Line is ready
    _normal_completion :BOOL ;	//Indicates normal completion

END_VAR
BEGIN
NETWORK
TITLE =Call Mode checking function

      L     #MODE;
      T     #sqSequencer.MODE.current;
      CALL "fcSFCMode" (
           Mode                     := #sqSequencer.MODE);

NETWORK
TITLE =Call Command checking function

      L     #SQ_CMD;
      T     #sqSequencer.CMD.New;

      CALL "fcSFCCommand" (
           Comand                   := #sqSequencer.CMD);

NETWORK
TITLE =Sequencer Mode function

      A     #sqSequencer.MODE.changed;
      JC    MDCH; // if Mode changed,jump to mode change function
      A     #sqSequencer.MODE.manual;
      JC    MANU;
      A     #sqSequencer.MODE.auto;
      JC    AUTO;
      A     #sqSequencer.MODE.oos;
      JC    OOS;
      A     #sqSequencer.MODE.wrong;
      JC    WRMD;
      JU    EMOD;

NETWORK
//----------------------------------------------------------------------------//
// On positive edge of mode change , this will execute once, only one cycle   //
// before going to execute the selected mode function below:                  //
//----------------------------------------------------------------------------//
TITLE =Mode change function
MDCH: NOP   0;
      SET   ;
      R     #sqStepTimer.IN;
      L     #sqSequencer.STEP.NumberCurrent;
      T     #STEPNO_JUMP;
      JU    EMOD;

NETWORK
//----------------------------------------------------------------------------//
// #TRN_AND_JUMP=can set/reset                                                //
// #sqSequencer.STEP.JumpCtrl=Can set/reset by #MAN_JUMP                      //
// #NO_VERIFIC=Can set/ Reset                                                 //
//----------------------------------------------------------------------------//
TITLE =Manual Mode function
MANU: NOP   0; //Manual mode selected



      A     #MAN_JUMP;
      =     #sqSequencer.STEP.JumpCtrl;
      A     #MAN_JUMP;
      JCN   EMOD;

      L     #STEPNO_JUMP;
      T     #sqSequencer.STEP.NumberNext;
      T     #sqSequencer.STEP.NumberCurrent;
      R     #MAN_JUMP; //Reset MAN_JUMP after loading user destination Step number
      R     #sqSequencer.STEP.Finished; //Reset finish flag, to execute next step action
      JU    EMOD;

NETWORK
//----------------------------------------------------------------------------//
// #TRN_AND_JUMP=always set                                                   //
// #sqSequencer.STEP.JumpCtrl=Always set                                      //
// #NO_VERIFIC=Alwasy Reset                                                   //
//----------------------------------------------------------------------------//
TITLE =Auto Mode function
AUTO: NOP   0; //Auto mode selected



      R     #MAN_JUMP;
      S     #TRN_AND_JUMP;
      R     #NO_VERIFIC;
      S     #sqSequencer.STEP.JumpCtrl; //Always Set in auto mode

      L     #sqSequencer.STEP.NumberCurrent;
      T     #STEPNO_JUMP;
      JU    EMOD;
NETWORK
TITLE =OOS mode function

OOS:  NOP   0; // Out of service
      JU    EMOD;
WRMD: NOP   0; //Wrong mode selected
      S     #sqSequencer.Error_Fault;
      L     "dbCONST_VAL".SQ_STATE.WRMODE;
      T     #SQ_STATE;

      JU    EMOD;

NETWORK
TITLE =Mode not changedd

      NOP   0;

NETWORK
TITLE =End Mode function

EMOD: NOP   0;

NETWORK
TITLE =An error will Pause the Sequencer,Operator must Resume SQ to run

      A     #sqSequencer.Error_Fault;
      AN    #sqSequencer.CMD.Changed;
      JC    PAUS;

NETWORK
TITLE =Command Action function

      A     #sqSequencer.CMD.Changed;
      JCN   CNCH; // if Command not changed,jump to end function
      R     #sqStepTimer.IN;


      A     #sqSequencer.CMD.Start;
      JC    STRT;

      A     #sqSequencer.CMD.Stop;
      JC    STOP;


      A     #sqSequencer.CMD.Pause;
      JC    PAUS;

      A     #sqSequencer.CMD.Resume;
      JC    RESM;

      A     #sqSequencer.CMD.Abort;
      JC    ABRT;

      A     #sqSequencer.CMD.Ack;
      JC    ACKN;

      A     #sqSequencer.CMD.wrong;
      JC    WCMD;

      JU    ECMD; //Wrong command/not specified command
//End Comand function

NETWORK
TITLE =Comand -Start/Initiate action function

STRT: NOP   0;
      R     #OFF_IDLE;
      R     #PAUSED;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;
      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.TimerExpired;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqStepTimer.IN;

      S     #sqRunTimer.RESET;

//----------------------------------------------------------------------------//
// Load Initial step Number:                                                  //
//----------------------------------------------------------------------------//
      L     1;
      T     #sqSequencer.STEP.Initial;
      L     #sqSequencer.STEP.Initial;
      T     #sqSequencer.STEP.NumberCurrent;
      T     #sqSequencer.STEP.NumberNext;




      L     "dbCONST_VAL".SQ_STATE.STARTED;
      T     #SQ_STATE;

//----------------------------------------------------------------------------//
// Reset Step done without error bits:                                        //
//----------------------------------------------------------------------------//
      CALL "RSET" (
           S_BIT                    := #sqSequencer.STEP.Done[1],
           N                        := 8);//Upto final step


//----------------------------------------------------------------------------//
// Reset Step done with error bits:                                           //
//----------------------------------------------------------------------------//
      CALL "RSET" (
           S_BIT                    := #sqSequencer.STEP.WithError[1],
           N                        := 8);//Upto final step

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Stop action function

STOP: NOP   0;
      S     #OFF_IDLE;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;
      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.TimerExpired;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.Error_Fault;
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqRunTimer.ENABLE;
      R     #sqStepTimer.IN;
      R     #SQ_TIMER.IN;
      R     #PAUSED;


//Go to last step
      L     8;
      T     #sqSequencer.FinalStep;
      L     #sqSequencer.FinalStep;
      T     #sqSequencer.STEP.NumberNext;
      L     "dbCONST_VAL".SQ_STATE.OFF_IDLE;
      T     #SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Pause action function

PAUS: NOP   0;
      S     #PAUSED;
      R     #S_ACTIVE;
      S     #sqRunTimer.PAUSE;
      L     #sqSequencer.STEP.NumberCurrent;
      T     #STEPNO_JUMP;
      L     "dbCONST_VAL".SQ_STATE.PAUSED;
      T     #SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Resume action function

RESM: NOP   0;
      R     #PAUSED;
      R     #sqRunTimer.PAUSE;
      R     #sqStepTimer.IN; //Reset Step timer
      L     "dbCONST_VAL".SQ_STATE.RESUMED;
      T     #SQ_STATE;

      A     #SQ_FINISHED;
      JC    ECMD;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Abort action function

ABRT: NOP   0;
      L     "dbCONST_VAL".SQ_STATE.ABORTED;
      T     #SQ_STATE;

      JC    STOP; //Stop & Abort same
      JU    ECMD;

NETWORK
TITLE =Comand -Acknowledge action function

ACKN: NOP   0;
      R     #ERR_FAULT;
      R     #sqSequencer.Error_Fault;
      L     "dbCONST_VAL".SQ_STATE.ACKNOWLEDGED;
      T     #SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -wrong/unavailable

WCMD: NOP   0;

      S     #sqSequencer.Error_Fault;
      L     "dbCONST_VAL".SQ_STATE.WRCMD;
      T     #SQ_STATE;

      JU    ECMD;
NETWORK
TITLE =Comand -not changedd

CNCH: NOP   0; // Command not changed

NETWORK
TITLE =End command Function

ECMD: NOP   0;

NETWORK
//----------------------------------------------------------------------------//
// Sequencer step jump list. Load the step number to execute the step:        //
//----------------------------------------------------------------------------//
TITLE =Sequencer Step Jump distrubution list
      L     #sqSequencer.STEP.NumberCurrent;
      JL    SQER; // If Sequencer Step number invalid or greater than available number of step
      JU    S000; // Exceptional Error Handling
      JU    S001; // STEP-001:
JU    S002; // STEP-002:
JU    S003; // STEP-003:
JU    S004; // STEP-004:
JU    S005; // STEP-005:
JU    S006; // STEP-006:
JU    S007; // STEP-007:
JU    S008; // STEP-008:


//----------------------------------------------------------------------------//
// If Step number is Invalid or Out of Range:                                 //
//----------------------------------------------------------------------------//
SQER: NOP   0;
      S     #sqSequencer.Error_Fault;
      JU    COMM; // Jump to Common Sequencer code handling function

NETWORK
//----------------------------------------------------------------------------//
// STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 ST //
// STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 ST //
// STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 ST //
//----------------------------------------------------------------------------//
TITLE =STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP

NETWORK
TITLE =S000: STEP0::If Paused exit

S000: NOP   0;

      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP001 STEP001 STEP001 STEP001 ST //
// STEP001 STEP001 STEP001 STEP001 ST //
// STEP001 STEP001 STEP001 STEP001 ST //
//----------------------------------------------------------------------------//
// Set all Sy equipment to SAFE state with Sy LPCA control enabled and VENT closed.

EVy004 (STATE=STOPPED)
ECy001 (STATE= PRESSURE_CONTROL; VALVE selection= LPN2; AUXVENT = FALSE and AUXDRAIN = FALSE)
ECy002 (STATE=STOPPED)
EGy005 (STATE=STOPPED)

filtration transfer line:
EXy007 (STATE=SY_FILL)

Prompt operator to confirm when Filling Line is ready.
//----------------------------------------------------------------------------//
TITLE =S001: STEP-01::UO_SY_FILL : Filling Unit Operation Commenced

S001: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S001:STEP-01:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A001; // Exit Action code, Jump to A001 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L001; // Action number loaded, Jump to L001--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L001: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r001; //Wrong Action number
      JU    _001; //Action error handling
       JU    aa01; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r001: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k001; //Exit
_001: NOP   0; // Action error handling
      JU    k001; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Set all Sy equipment to SAFE state with Sy LPN2 control enabled and VENT closed.
//
//EVxy04 (STATE=STOPPED)
//ECxy01 (STATE= PRESSURE_CONTROL; VALVE selection= LPN2; AUXVENT = FALSE and AUXDRAIN = FALSE)
//ECxy02 (STATE=STOPPED)
//EJxy03 (STATE=STOPPED)
//EGxy05 (STATE=STOPPED)
//
//filtration transfer line:
//EXxy07 (STATE=STOPPED)
//
//Prompt operator to confirm when Filling Line is ready.
TITLE =S001:: STEP-001:: : ACTION CODE
aa01: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Start LPN2 valve pressure control and VENT valve closed
L "dbCONST_VAL".EM.EMC1.VALVE.LPN2;
T #_VALVE_ECxy01;
SET;
R #_AUXDRAIN_ECxy01;
R #_AUXVENT_ECxy01;

L "dbCONST_VAL".EM.EMC1.SUBS.PRESSURE_CONTROL;
T #_SUB_ECxy01;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECxy01;


// Set remaining Sy equipment to SAFE state:

L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECxy02;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECxy02;

L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_EGxy05;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_EGxy05;

L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_EJxy03;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_EJxy03;

L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_EVxy04;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_EVxy04;

L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_EXxy07;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_EXxy07;



// Prompt operator to confirm when Filling Line is ready.
SET;
S #_prompt_FLready;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_ECxy01;
L "dbCONST_VAL".EM.EMC1.SUBS.PRESSURE_CONTROL;
==I;
);
A(;
L #_DEV_STATE_ECxy02;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
A(;
L #_DEV_STATE_EGxy05;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
A(;
L #_DEV_STATE_EJxy03;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
A(;
L #_DEV_STATE_EVxy04;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
A(;
L #_DEV_STATE_EXxy07;
L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k001;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[01];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k001;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k001: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[01]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S001:STEP-001::Begin Transition

A001: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Operator confirms Filling Line is ready
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S001::STEP 001:TRAN 001: Filling Line is ready?
A #_confirm_FLready;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S001:t001::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x001;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     02; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step02.

      JU    COMM; // Transition satisfied, Exit, go to next step
x001: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S001::STEP-001:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP002 STEP002 STEP002 STEP002 ST //
// STEP002 STEP002 STEP002 STEP002 ST //
// STEP002 STEP002 STEP002 STEP002 ST //
//----------------------------------------------------------------------------//
// Log operator confirmation Filling Line ready.

Prompt operator to confirm to start Filling.
//----------------------------------------------------------------------------//
TITLE =S002: STEP-02::SY_UO_FILL : Wait for OPER to confirm start FILLING

S002: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S002:STEP-02:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A002; // Exit Action code, Jump to A002 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L002; // Action number loaded, Jump to L002--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L002: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r002; //Wrong Action number
      JU    _002; //Action error handling
       JU    aa02; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r002: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k002; //Exit
_002: NOP   0; // Action error handling
      JU    k002; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log operator confirmation Filling Line ready.
//
//Prompt operator to confirm to start Filling.
TITLE =S002:: STEP-002:: : ACTION CODE
aa02: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Log time operator confirmed Filling Line is ready.
L "dbCONST_VAL".CPU_TIME;
T #_log_FLready;

// Prompt operator to confirm start Filling.
SET;
R #_prompt_FLready;
R #_confirm_FLready;
S #_prompt_StartFilling;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1; //Always High flag
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k002;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[02];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k002;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k002: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[02]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S002:STEP-002::Begin Transition

A002: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Operator confirms to Start Filling
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S002::STEP 002:TRAN 002: Start Filling?
A #_confirm_StartFilling;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S002:t002::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x002;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     03; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step03.

      JU    COMM; // Transition satisfied, Exit, go to next step
x002: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S002::STEP-002:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP003 STEP003 STEP003 STEP003 ST //
// STEP003 STEP003 STEP003 STEP003 ST //
// STEP003 STEP003 STEP003 STEP003 ST //
//----------------------------------------------------------------------------//
// Log operator confirmed ready to start Filling.

Set EXy007 transfer line to STATE=FILL with S_FIRST and FILL_A parameters set for Sy and FLz.

Flag parent path ready to start filling operation by setting flag path_ready.
//----------------------------------------------------------------------------//
TITLE =S003: STEP-03::SY_UO_FILL : Set path and wait for ready to start

S003: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S003:STEP-03:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A003; // Exit Action code, Jump to A003 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L003; // Action number loaded, Jump to L003--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L003: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r003; //Wrong Action number
      JU    _003; //Action error handling
       JU    aa03; //ACTION-01
JU    ab03; //ACTION-02
JU    ac03; //ACTION-03
JU    ad03; //ACTION-04
JU    ae03; //ACTION-05


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r003: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k003; //Exit
_003: NOP   0; // Action error handling
      JU    k003; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log time operator confirmed ready to start Filling.
TITLE =S003:: STEP-003:: : ACTION CODE
aa03: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      L "dbCONST_VAL".CPU_TIME;
T #_log_ConfStartFill;

SET;
R #_prompt_StartFilling;
R #_confirm_StartFilling;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k003;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //
TITLE =S003:: STEP-003:: : ACTION CODE
ab03: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      A(;
L 	"dbCONST_VAL".UNIT.OWNER.S1;
L 	#_SY;
==I;
);
O;
A(;
L 	"dbCONST_VAL".UNIT.OWNER.S3;
L 	#_SY;
==I;
);
JCN S301;
SET;
S #_S_FIRST_EXxy07;
JU end0;

S301: NOP 0;
A(;
L 	"dbCONST_VAL".UNIT.OWNER.S2;
L 	#_SY;
==I;
);
O;
A(;
L 	"dbCONST_VAL".UNIT.OWNER.S4;
L 	#_SY;
==I;
);
R #_S_FIRST_EXxy07;

end0: NOP 0;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k003;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     03; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Set Ampoule Filling Line
TITLE =S003:: STEP-003:: : ACTION CODE
ac03: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      A(;
L 1;
L #_FZ;
==I;
);
JCN S302;
SET;
S #_FILL_A_EXxy07;
JU end1;

S302: NOP 0;
A(;
L 2;
L #_FZ;
==I;
);
R #_FILL_A_EXxy07;

end1: NOP 0;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k003;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     04; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Set EXxy07 transfer line to STATE=FILL with S_FIRST and FILL_A parameters set for Sy and Fz.
TITLE =S003:: STEP-003:: : ACTION CODE
ad03: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      L "dbCONST_VAL".EM.EMX2.SUBS.FILL;
T #_SUB_EXxy07;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_EXxy07;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_EXxy07;
L "dbCONST_VAL".EM.EMX2.SUBS.FILL;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k003;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     05; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Flag parent path ready to start filling operation by setting flag path_ready.
TITLE =S003:: STEP-003:: : ACTION CODE
ae03: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Flag parent path ready to start filling operation
SET;
S #_path_ready;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k003;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[03];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k003;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k003: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[03]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S003:STEP-003::Begin Transition

A003: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Parent indicates ready to proceed by setting synchronisation flag fill_proceed.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S003::STEP 003:TRAN 003: Path ready?
A #_fill_proceed;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S003:t003::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x003;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     04; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step04.

      JU    COMM; // Transition satisfied, Exit, go to next step
x003: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S003::STEP-003:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP004 STEP004 STEP004 STEP004 ST //
// STEP004 STEP004 STEP004 STEP004 ST //
// STEP004 STEP004 STEP004 STEP004 ST //
//----------------------------------------------------------------------------//
// Log Fill begin time.

Open Sy Outlet valve EVy004 STATE=DISCHARGE

Set Sy LPCA valve fully opened ECy001 (STATE=VALVE_OPENED, VALVE=LPCA, AUXVENT= false, AUXDRAIN=false)

Prompt operator to confirm that filling machine sterile filter has been bled.
//----------------------------------------------------------------------------//
TITLE =S004: STEP-04::SY_UO_FILL : Wait for OPER to confirm filling machine bled

S004: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S004:STEP-04:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A004; // Exit Action code, Jump to A004 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L004; // Action number loaded, Jump to L004--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L004: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r004; //Wrong Action number
      JU    _004; //Action error handling
       JU    aa04; //ACTION-01
JU    ab04; //ACTION-02
JU    ac04; //ACTION-03


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r004: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k004; //Exit
_004: NOP   0; // Action error handling
      JU    k004; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log FILL begin time. Open Sy outlet valve by setting EVxy04.
TITLE =S004:: STEP-004:: : ACTION CODE
aa04: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Log FILL begin time.
L "dbCONST_VAL".CPU_TIME;
T #_log_FillBegin;


// Open Sy outlet valve by setting EVxy04
L "dbCONST_VAL".EM.EMV1.SUBS.DISCHARGE;
T #_SUB_EVxy04;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_EVxy04;

SET;
R #_path_ready;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_EVxy04;
L "dbCONST_VAL".EM.EMV1.SUBS.DISCHARGE; 
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k004;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Set Sy LPN2 valve fully open
TITLE =S004:: STEP-004:: : ACTION CODE
ab04: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Set Sy LPN2 valve fully open
L "dbCONST_VAL".EM.EMC1.VALVE.LPN2;
T #_VALVE_ECxy01;
SET;
R #_AUXDRAIN_ECxy01;
R #_AUXVENT_ECxy01;

L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED;
T #_SUB_ECxy01;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECxy01;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L #_DEV_STATE_ECxy01;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED; 
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k004;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     03; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Prompt operator to confirm that filling machine sterile filter has been bled.
TITLE =S004:: STEP-004:: : ACTION CODE
ac04: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Prompt operator to confirm that filling machine sterile filter has been bled
SET;
S #_prompt_FilterBled;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1; //Always High flag
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k004;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[04];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k004;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k004: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[04]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S004:STEP-004::Begin Transition

A004: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Operator confimed Filling machine filter has been bled.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S004::STEP 004:TRAN 004: Filling machine has been bled?
A #_confirm_FilterBled;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S004:t004::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x004;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     05; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step05.

      JU    COMM; // Transition satisfied, Exit, go to next step
x004: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S004::STEP-004:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP005 STEP005 STEP005 STEP005 ST //
// STEP005 STEP005 STEP005 STEP005 ST //
// STEP005 STEP005 STEP005 STEP005 ST //
//----------------------------------------------------------------------------//
// Log operator confirmation filter has been bled.

Enable HPCA pressure control.
ECy001 (STATE=PRESSURE_CONTROL, VALVE=HPCA, AUXVENT= false, AUXDRAIN=false, SETPOINT=PRES_HPCA_FILL)

Log HPCA begin time.

Prompt operator to confirm when TRANSFER is complete.
//----------------------------------------------------------------------------//
TITLE =S005: STEP-05::SY_UO_FILL : Start HPCA and wait for OPER confirm filling complete

S005: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S005:STEP-05:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A005; // Exit Action code, Jump to A005 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L005; // Action number loaded, Jump to L005--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L005: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r005; //Wrong Action number
      JU    _005; //Action error handling
       JU    aa05; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r005: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k005; //Exit
_005: NOP   0; // Action error handling
      JU    k005; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log operator confirmation filter has been bled.
//
//Enable HPN2 pressure control.
//ECxy01 (STATE=PRESSURE_CONTROL, VALVE=HPN2, AUXVENT= false, AUXDRAIN=false, SETPOINT=PRES_N2_FILL)
//
//Log HPN2 begin time.
//
//Prompt operator to confirm when TRANSFER is complete.
TITLE =S005:: STEP-005:: : ACTION CODE
aa05: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Log time operator confirmed filter has been bled.
L "dbCONST_VAL".CPU_TIME;
T #_log_FilterBled;

A #_confirm_Resume;
AN #_PAUSE_Button;
JCN C03;
SET;

// Open Sy outlet valve by setting EVxy04
L "dbCONST_VAL".EM.EMV1.SUBS.DISCHARGE;
T #_SUB_EVxy04;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_EVxy04;

// Open Filling Line
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_EXxy07;
L  "dbCONST_VAL".EM.EMX2.SUBS.FILL;
T #_SUB_EXxy07;

C03:NOP 0;
// Enable HPN2 pressure control
L #_PRES_N2_FILL;
T #_SETPOINT_ECxy01;
L "dbCONST_VAL".EM.EMC1.VALVE.HPN2;
T #_VALVE_ECxy01;
SET;
R #_AUXDRAIN_ECxy01;
R #_AUXVENT_ECxy01;

L "dbCONST_VAL".EM.EMC1.SUBS.PRESSURE_CONTROL;
T #_SUB_ECxy01;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECxy01;


// Log HPN2 begin time
L "dbCONST_VAL".CPU_TIME;
T #_log_HPN2Begin;


// Prompt operator to confirm when TRANSFER is complete
SET;
R #_prompt_FilterBled;
R #_confirm_FilterBled;
R #_confirm_Abort;
R #_confirm_Resume;
R #_prompt_ResumeAbort;
S #_prompt_TransferComp;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_EVxy04;
L "dbCONST_VAL".EM.EMV1.SUBS.DISCHARGE; 
==I;
);
A(;
L #_DEV_STATE_ECxy01;
L "dbCONST_VAL".EM.EMC1.SUBS.PRESSURE_CONTROL;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k005;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[05];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k005;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k005: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[05]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S005:STEP-005::Begin Transition

A005: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Operator confirmed completion
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S005::STEP 005:TRAN 005: Completion confirmed?
A #_confirm_TransferComp;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S005:t005::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x005;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     07; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step07.

      JU    COMM; // Transition satisfied, Exit, go to next step
x005: NOP   0;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Filling Pause Button is pressed.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S005::STEP 005:TRAN 006: Filling Pause Button is pressed.
A #_PAUSE_Button;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S005:t006::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x006;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     06; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step06.

      JU    COMM; // Transition satisfied, Exit, go to next step
x006: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S005::STEP-005:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP006 STEP006 STEP006 STEP006 ST //
// STEP006 STEP006 STEP006 STEP006 ST //
// STEP006 STEP006 STEP006 STEP006 ST //
//----------------------------------------------------------------------------//
// Prompt Operator to RESET Filling Paused Button else ABORT the sequence.
//----------------------------------------------------------------------------//
TITLE =S006: STEP-06::SY_UO_FILL : Wait for OPER to RESUME or ABORT

S006: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S006:STEP-06:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A006; // Exit Action code, Jump to A006 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L006; // Action number loaded, Jump to L006--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L006: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r006; //Wrong Action number
      JU    _006; //Action error handling
       JU    aa06; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r006: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k006; //Exit
_006: NOP   0; // Action error handling
      JU    k006; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Prompt Operator to RESET Filling Paused Button else ABORT the sequence.
//
//Close Sy outlet valve by setting EVxy04
//Close Filling Line
TITLE =S006:: STEP-006:: : ACTION CODE
aa06: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Prompt Operator to RESET Filling Paused Button else ABORT the sequence.
SET;
S #_prompt_ResumeAbort;
R #_prompt_TransferComp;

// Close Sy outlet valve by setting EVxy04
L 0;
T #_SUB_EVxy04;
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_EVxy04;

// Close Filling Line
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_EXxy07;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_EXxy07;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1; //Always High flag
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k006;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[06];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k006;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k006: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[06]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S006:STEP-006::Begin Transition

A006: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Operator confirmed to ABORT filling.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S006::STEP 006:TRAN 007: ABORT Filling?
A #_confirm_Abort;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S006:t007::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x007;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     08; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step08.

      JU    COMM; // Transition satisfied, Exit, go to next step
x007: NOP   0;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Operator confirmed to RESUME & Filling Pause Button is NOT pressed (RESET).
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S006::STEP 006:TRAN 008: Resume confirmed and NO pause button
A #_confirm_Resume;
AN #_PAUSE_Button;






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S006:t008::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x008;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     05; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step05.

      JU    COMM; // Transition satisfied, Exit, go to next step
x008: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S006::STEP-006:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP007 STEP007 STEP007 STEP007 ST //
// STEP007 STEP007 STEP007 STEP007 ST //
// STEP007 STEP007 STEP007 STEP007 ST //
//----------------------------------------------------------------------------//
// Disable Sy HPCA control and open VENT valve.
ECy001 (STATE=VALVE_OPENED, VALVE=VENT, AUXVENT= false, AUXDRAIN=false)

Set the normal_completion flag.
//----------------------------------------------------------------------------//
TITLE =S007: STEP-07::SY_UO_FILL : Disable HPCA control and open VENT

S007: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S007:STEP-07:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A007; // Exit Action code, Jump to A007 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L007; // Action number loaded, Jump to L007--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L007: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r007; //Wrong Action number
      JU    _007; //Action error handling
       JU    aa07; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r007: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k007; //Exit
_007: NOP   0; // Action error handling
      JU    k007; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Disable Sy HPN2 control and open VENT valve.
//ECxy01 (STATE=VALVE_OPENED, VALVE=VENT, AUXVENT= false, AUXDRAIN=false)
//
//Set the normal_completion flag.
TITLE =S007:: STEP-007:: : ACTION CODE
aa07: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      // Open VENT valve
L "dbCONST_VAL".EM.EMC1.VALVE.VENT;
T #_VALVE_ECxy01;
SET;
R #_AUXDRAIN_ECxy01;
R #_AUXVENT_ECxy01;

L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED;
T #_SUB_ECxy01;
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_ECxy01;

// Set flag for normal completion
SET;
R #_confirm_TransferComp;
R #_prompt_TransferComp;
S #_normal_completion;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A(;
L 	#_DEV_STATE_ECxy01;
L "dbCONST_VAL".EM.EMC1.SUBS.VALVE_OPENED;
==I;
);
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k007;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[07];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k007;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k007: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[07]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S007:STEP-007::Begin Transition

A007: NOP   0;
     R     #sqStepTimer.IN;






      //============================= TRAN HEADER ============================//
      // Bypass transition if manual jump:
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Finished;
      A     #TRN_AND_JUMP; //Manual jump is set Transition as bypassed
      JCN   COMM; //exit

NETWORK
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Jump
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
TITLE =S007::STEP 007:TRAN 009: Empty Transition
A M1.1; //Always High flag






      //============================= TRAN FOOTER ============================//
      // Transition jump control:                                             //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.JumpCtrl;
      S     #sqSequencer.STEP.Jump;

NETWORK
//----------------------------------------------------------------------------//
// Check the jump flag and jump to the next step if the transition condition  //
// is true and has set the jump flag:                                         //
//----------------------------------------------------------------------------//
TITLE =S007:t009::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
      A     #sqSequencer.STEP.Jump;
      JCN   x009;

      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.Finished;

      L     08; // Load next STEPNO to jump to if transition satisfied
      T     #sqSequencer.STEP.NumberNext; //Next Step08.

      JU    COMM; // Transition satisfied, Exit, go to next step
x009: NOP   0;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S007::STEP-007:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ STEP HEADER ===============================//
// STEP008 STEP008 STEP008 STEP008 ST //
// STEP008 STEP008 STEP008 STEP008 ST //
// STEP008 STEP008 STEP008 STEP008 ST //
//----------------------------------------------------------------------------//
// Set Sy product to safe state if not normal completion...

EVy004 (STATE=STOPPED)
EXy007 (STATE=STOPPED)

If normal completion then finished with Sy. Leave it venting with everything off...
ECy001 (STATE=STOPPED) vent valve open
EXy007 (STATE=STOPPED)
EXzz02 (STATE=STOPPED)

 Log FILLING operation end time.
//----------------------------------------------------------------------------//
TITLE =S008: STEP-08::SY_UO_FILL : Filling Unit Operation Completed

S008: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S008:STEP-08:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A008; // Exit Action code, Jump to A008 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L008; // Action number loaded, Jump to L008--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L008: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r008; //Wrong Action number
      JU    _008; //Action error handling
       JU    aa08; //ACTION-01
JU    ab08; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r008: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k008; //Exit
_008: NOP   0; // Action error handling
      JU    k008; // Exit






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Set Sy product to safe state if not normal completion...
//
//EVxy04 (STATE=STOPPED)
//EXxy07 (STATE=STOPPED)
//EGxy05 (STATE=FILTER)
//
//If normal completion then finished with Sy. Leave it venting with everything off...
//ECxy02 (STATE=STOPPED)
//EJxy03 (STATE=STOPPED)
TITLE =S008:: STEP-008:: : ACTION CODE
aa08: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      A #_normal_completion;
JC LAST;

//Close vessel outlet valve
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_EVxy04;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_EVxy04;

LAST:NOP 0;

// Set remaining Sy equipment to SAFE state:

L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_ECxy02;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_ECxy02;

L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_EJxy03;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_EJxy03;

// EGxy05 (STATE=FILTER)
L "dbCONST_VAL".EM.CMD.START;
T #_CMD_EGxy05;
L "dbCONST_VAL".EM.EMG1.SUBS.FILTER;
T #_SUB_EGxy05;

//Close vessel outlet valve
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_EVxy04;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_EVxy04;

// Close Filling Line
L "dbCONST_VAL".EM.CMD.STOP;
T #_CMD_EXxy07;
L "dbCONST_VAL".EM.SUBSTATE.ZERO;
T #_SUB_EXxy07;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= ACT FOOTER =============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k008;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // Load Next Step Action number:                                        //
      //----------------------------------------------------------------------//
      L     02; //Load next Action
      T     #sqSequencer.STEP.ActionNumber;






NETWORK
//================================ ACT HEADER ================================//
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
// ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTI //
//----------------------------------------------------------------------------//
// //Log FILLING operation end time if normal completion.
TITLE =S008:: STEP-008:: : ACTION CODE
ab08: NOP   0;

      //----------------------------------------------------------------------//
      // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT  //
      //----------------------------------------------------------------------//
      //Clear used flags
SET;
R #_prompt_TransferComp;
R #_confirm_Abort;
R #_confirm_TransferComp;
R #_confirm_FilterBled;
R #_prompt_FilterBled;
R #_confirm_Resume;
R #_prompt_ResumeAbort;
R #_prompt_StartFilling;
R #_confirm_StartFilling;
R #_confirm_FLready;
R #_prompt_FLready;
R #_path_ready;


A #_normal_completion;
// Log FILLING operation end time.
L "dbCONST_VAL".CPU_TIME;
T #_log_FillEnd;

SET;
R #_normal_completion;

//----------------------------------------------------------------------------//
// VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VER //
//----------------------------------------------------------------------------//
A M1.1;
      S     #sqSequencer.STEP.ActionVerified; //Action verified

      //----------------------------------------------------------------------//
      // Action done:                                                         //
      //----------------------------------------------------------------------//
      O     #sqSequencer.STEP.ActionVerified;
      O     #NO_VERIFIC; //No verification , bypass verification code
      S     #sqSequencer.STEP.ActionFinished;






      //============================= STEP FOOTER ============================//
      // Get Ready after action finished:                                     //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.ActionFinished;
      JCN   k008;

      //----------------------------------------------------------------------//
      // Reset Action finished flag, ready for next step action:              //
      //----------------------------------------------------------------------//
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqSequencer.STEP.ActionFinished;

      //----------------------------------------------------------------------//
      // If ALL actions are finished:                                         //
      //----------------------------------------------------------------------//
      SET   ;
      S     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.Active;
      S     #sqSequencer.STEP.Done[08];

      //----------------------------------------------------------------------//
      // End Step action(s):                                                  //
      //----------------------------------------------------------------------//
      JU    k008;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k008: NOP   0;

      A     #sqStepTimer.Q;
      S     #sqSequencer.STEP.WithError[08]; // Step error flag
      S     #sqSequencer.Error_Fault;
      R     #sqStepTimer.IN;
NETWORK
TITLE =S008:STEP-008::Begin Transition

A008: NOP   0;
     R     #sqStepTimer.IN;






NETWORK
//============================== STEP TRANSFER ===============================//
// Jump to the common step progression code:                                  //
//----------------------------------------------------------------------------//
TITLE =S008::STEP-008:EXIT TRANSITION:
      JU    COMM;






NETWORK
//================================ SEQ FOOTER ================================//
// Common code to execute each scan:                                          //
//----------------------------------------------------------------------------//
TITLE =Sequencer Common Code, Execute in Each Scan

COMM: NOP   0;

NETWORK
TITLE =Retentive/Non Retentive Selectable Run timer

      CALL #sqRunTimer (
           TIME_H                   := #sqRunTimer.TIME_H,
           TIME_M                   := #sqRunTimer.TIME_M,
           TIME_S                   := #sqRunTimer.TIME_S,
           ENABLE                   := #sqRunTimer.ENABLE,
           RESET                    := #sqRunTimer.RESET,
           PAUSE                    := #sqRunTimer.PAUSE,
           NON_RET                  := #sqRunTimer.NON_RET,
           RMNG_H                   := #sqRunTimer.RMNG_H,
           RMNG_M                   := #sqRunTimer.RMNG_M,
           RMNG_S                   := #sqRunTimer.RMNG_S,
           TIME_EXPIRED             := #sqRunTimer.TIME_EXPIRED,
           TMR_RUNNG                := #sqRunTimer.TMR_RUNNG);

NETWORK
TITLE =Sequencer Step Timer

      CALL #sqStepTimer (
           IN                       := #sqStepTimer.IN,
           PT                       := "dbCONST_VAL".SQ_STEP_TIME,
           Q                        := #sqStepTimer.Q,
           ET                       := #sqStepTimer.ET);

NETWORK
TITLE =Sequencer Timer

 CALL #SQ_TIMER (
           IN                       := #SQ_TIMER.IN,
           PT                       := #SQ_TIMER.PT,
           Q                        := #SQ_TIMER.Q,
           ET                       := #SQ_TIMER.ET);

NETWORK
TITLE =General Assignments

      L     #sqSequencer.STEP.NumberNext;
      T     #NXT_STEP;
      T     #sqSequencer.STEP.NumberCurrent;
      T     #CURSTEP;

      A     #sqSequencer.STEP.Active;
      =     #S_ACTIVE;

      A     #sqSequencer.Error_Fault;
      =     #ERR_FAULT;

NETWORK
TITLE =Sequencer Finished

      AN    #OFF_IDLE;
      AN    #PAUSED;
      A     #sqSequencer.STEP.Done[8];
      =     #sqSequencer.Finished;
      =     #SQ_FINISHED;
      JCN   fnsd;
      L     "dbCONST_VAL".SQ_STATE.COMPLETE;
      T     #SQ_STATE;
      R     #PAUSED;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.Error_Fault;
fnsd: NOP   0;

      //----------------------------------------------------------------------//
      // Reset Finished flag if SQ OFF for Last step to scan:                 //
      //----------------------------------------------------------------------//
      A     #OFF_IDLE;
      AN    #sqSequencer.STEP.Done[8];
      AN    #sqSequencer.STEP.WithError[8];
      JCN   abrt;
      R     #sqSequencer.STEP.Finished;
      L     "dbCONST_VAL".SQ_STATE.ABORTED;
      T     #SQ_STATE;
      S     #OFF_IDLE;
      R     #PAUSED;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.Error_Fault;
      R     #PAUSED;
abrt: NOP   0;

//----------------------------------------------------------------------------//
// Visio Common Code Begin:                                                   //
//----------------------------------------------------------------------------//


//----------------------------------------------------------------------------//
// End of Sequencer:                                                          //
//----------------------------------------------------------------------------//
END_FUNCTION_BLOCK

