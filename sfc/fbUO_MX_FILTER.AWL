//****************************************************************************************************
// Code generated by SFC Generator V1.13 on 02/07/18 14:20:51 by  David Paspa from File G:\Business\Synertec\MPI.SMS\automation\code\awlMaster\stencil\seq_hdr.awl
//****************************************************************************************************
//****************************************************************************************************

//================================ SEQ HEADER ================================//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Title: UO_MX_FILTER                                                       //
//                                                                            //
// Description:                                                               //
// Manufacturing Vessel Mx filtration to Storage Vessel Sy. Sequence for Filtration from Manufacturing Vessel Mx to Storage Vessel Sy.                                                        //
//                                                                            //
// // SFC Revision History:
// Rev By               Date        CC         Note
// 0.1 Gerald Kontriner 10-Sep-2009            SFC structural design                                                       //
//----------------------------------------------------------------------------//
// Sequencer Revision History:                                                //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      05-Jan-2018 NA        Reboot for S7-1500.             //
// 1.6 Khairul Basar    19-Nov-2009 NA        Reset #sqSequencer.STEP.Active  //
//                                            when STEP Finished.             //
// 1.5 Khairul Basar    15-Oct-2009 NA        Placeholder inserted:           //
//                                            "udtSQ_UO";          //
// 1.4 Khairul Basar    06-Oct-2009 NA        R #PAUSE;                       //
// 1.3 Khairul Basar    30-Sep-2009 NA        SEQ_HDR change STEP-0 code      //
//                                            deleted.                        //
// 1.2 Khairul Basar    26-Sep-2009 NA        Refer R4.                       //
// 1.1 Khairul Basar    23-Sep-2009 NA        Refer R3.                       //
// 1.0 Khairul Basar    20-Sep-2009 NA        STEP.Finished flag reset by     //
//                                            JUMP_MAN.                       //
// 0.9 Khairul Basar    11-Sep-2009 NA        SQ_TIMER added as VAR, declared //
//                                            in SEQ_FTR.                     //
// 0.8 Khairul Basar    09-Sep-2009 NA        SqSequencer.Err_Fault is reset  //
//                                            on Stop cmd, Step-0 dead code   //
//                                            deleted from ACT & Verify.      //
//                                            STP_FTR Step_withErr flag       //
//                                            STEP_NUM place holder           //
//                                            configured.                     //
// 0.7 Khairul Basar    28-Aug-2009 NA        SQ_FINISHED OUT added again.    //
//                                            Deleted during major mod R3.    //
// 0.6 Khairul Basar    23-Aug-2009 NA        Refer R2.                       //
// 0.5 Khairul Basar    23-Aug-2009 NA        Refer R1.                       //
// 0.4 Khairul Basar    18-Aug-2009 NA        Reset Step done with/out error  //
//                                            bits using FC:RSET.             //
// 0.3 David Paspa      16-Aug-2009 NA        Added placeholders for header   //
//                                            name and version and revision   //
//                                            history.                        //
// 0.2 Khairul Basar    11-Aug-2009 NA        Retired external udt file for   //
//                                            Static type parameters. All     //
//                                            parameters now IN, OUT or       //
//                                            IN_OUT.                         //
// 0.1 Khairul Basar    12-Jun-2009 NA        Initial design.                 //
//----------------------------------------------------------------------------//
// R4:                                                                        //
// 1.If SQ not finished Resume command will start Step timer, and redo the    //
// last action, verify the feedback.                                          //
// 2."STEP.finished" flag is ANDed with "TRN_AND_JUMP" in the snippet file    //
// TRN_HDR.This is to avoid checking of transition logic if STEP is not       //
// finished yet.                                                              //
// 3.MDCH, Load & transfer typo corrected.                                    //
//                                                                            //
// R3:                                                                        //
// 1.SqStepTimer.IN is reset in STEP_FTR instead of resetting it in TRN_HDR.  //
// This is because TRN_HDTR is not included in the Last step and StepTimer    //
// must reset in the last step.                                               //
// 2.Reset all the timers when SQ stops.Reset done in SEQ_HDR.                //
// Also STEP-finished flag reset when SQ is OFF to                            //
// scan last step.                                                            //
//                                                                            //
// R2:                                                                        //
// 1.Any step error will send the Sequencer into Pause state.Code added in    //
// SEQ_HDR.Snippet Place holder for Bool-array 16 is   //
// deleted.                                                                   //
//                                                                            //
// R1:                                                                        //
// 1.sqStepTimer:All Verification Code must satisfy the condition finish step //
// action within STEP_DELAY time(40s).If step actions not finished within the //
// time period the error flag will raise High signal.Else timer will reset.   //
// 2.sqRunTimer Added therefore can be used as retentive & non retentive.     //
// 3.sqSequencer: This is re-structured UDT which is redefined the symbol     //
// names as well as it gives more clearity.                                   //
// 4.fcMODE and fcCMD functions are added to handle the mode & command        //
// independently regardless of other logic.Two separate UDT udtMODE & udt     //
// CMD assigned to Mode & command function respectively.                      //
// 5.MAN_JUMP programed for manual mode jump operation with or without        //
// Transition code satisfied.TRN_AND_JUMP & NO_VERIFC are the parameters      //
// which will define whether verification code & transition code need to be   //
// checked to perform jump operation.                                         //
// 6.Auto to Manual switchover will be bumpless & will not affect step        //
// operation.Manual to auto switchover can be used to resume Step action at   //
// defined.                                                                   //
// Step number entered in STEPNO_JUMP.                                        //
//                                                                            //
// Parameters:                                                                //
// INPUTS                                                                     //
// ======                                                                     //
// SQ_CMD          Sequence command input inherited from object block         //
//                 0: off/idle                                                //
//                 1: start/initiate                                          //
//                 2: pause                                                   //
//                 3: resume                                                  //
//                 4: reserved (not programmed)                               //
//                 5: reserved (not programmed)                               //
//                 6: abort/go to last step                                   //
//                 7: acknowledge error/fault                                 //
// SQ_MODE         Sequencer Auto/Manual input inherited from object block    //
//                 1: manual                                                  //
//                 2: auto                                                    //
//                                                                            //
// INPUT/OUTPUTS                                                              //
// =============                                                              //
// SQ_JUMP_MAN     Allows manual jumping from one step to the next step. The  //
//                 manual jump flag is ORed with the transition process       //
//                 condition and so can be used to bypass the condition if the//
//                 sequence will not progress.                                //
//                 This input can also be used to jump to any step even       //
//                 when no transition -> step linkage exists. This is only    //
//                 possible when the SQ_MODE is in manual and SQ is in the    //
//                 idle step. The step to jump to is specified in             //
//                 SQ_man_jump_to_step (not accesseble by this FB in/out      //
//                 interface but a separate DB memory location).              //
//                                                                            //
// OUTPUTS                                                                    //
// =======                                                                    //
// SQ_STATE        The calculated state of the sequence                       //
//                 0: off/idle                                                //
//                 1: start/initiated                                         //
//                 2: paused                                                  //
//                 3: resumed                                                 //
//                 4: reserved (wrong Mode)                                   //
//                 5: reserved (Wrong commad)                                 //
//                 6: aborted/go to last step                                 //
//                 7: acknowledged error/fault                                //
// CURSTEP         Current step being proccessed.                             //
// S_ACTIVE        If current step is active                                  //
// NXT_STEP        Next step to jump to if transition condition is true       //
// ERR_FAULT       True if any error/ or fault present                        //
// PAUSED          True if step is paused                                     //
// OFF_IDLE        Sequence is not running but ready for next SQ (in step=0)  //
//----------------------------------------------------------------------------//
// Define variables:                                                          //
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "fbUO_MX_FILTER"
TITLE = UO : MX_FILTER
{ S7_Optimized_Access := 'TRUE' }
NAME : MUFILT
AUTHOR : REO
VERSION : 0.1

VAR_IN_OUT
    _vessel_mx :INT ;	//Manufacturing vessel selection M1 or M2
    _vessel_sy :INT ;	//Storage vessel selection S1 or S2
    _r_mass_expect_reduced :REAL ;	//Expected Mass value to be reduced 
    _emv_vessel_ti_vessel_pv :REAL ;	//Mx temperature indicator
    _r_temp_limit_h :REAL ;	//Vessel temperature High limit setpoint
    _r_temp_limit_hh :REAL ;	//Vessel temperature High High limit setpoint
    _r_time_mass_reduce :TIME ;	//Time for mass reduce
    _emm_vessel_mass_nett :REAL ;	//Mx mass indicator
    _emv_vessel_state :INT ;	//Device State of emv_vessel
    _emt_hex_state :INT ;	//Device State of emt_hex
    _temp_filt :REAL ;	//Filter temperature setpoint
    _emx_smfl_state :INT ;	//Device State of emx_smfl
    _emx_transfer_state :INT ;	//Device State of emx_transfer
    _r_mass_throttle_mx :REAL ;	//Mass nearing the end of transfer
    _r_pres_hpca_filt2 :REAL ;	//HCPA Pressure control setpoint 2
    _start_hpca :BOOL ;	//Synchronisation flag to start HPN2 supply
    _emc_gas_state :INT ;	//Device State of emc_gas
    _emc_water_state :INT ;	//Device state of emc_water
    _emx_mmfl_state :INT ;	//Device State of emx_mmfl
    _ema_vessel_state :INT ;	//Device State of ema_vessel
    _filtration_complete :BOOL ;	//Synchronisation flag to start transfer
    _r_pres_hpca_filt :REAL ;	//HCPA Pressure control setpoint 1

    _emt_hex_setpoint :REAL ;	//Heat exchanger temperature controller temperature setpoint
    _emv_vessel_subs :INT ;	//Substate selection of emv_vessel
    _emv_vessel_cmd :INT ;	//Command to emv_vessel
    _emt_hex_subs :INT ;	//Substate selection of emt_hex
    _emt_hex_cmd :INT ;	//Command to emt_hex
    _emx_smfl_cmd :INT ;	//Command to emx_smfl
    _emx_smfl_subs :INT ;	//Substate selection of emx_smfl
    _emx_transfer_cmd :INT ;	//Command to emx_transfer
    _emx_transfer_subs :INT ;	//Substate selection of emx_transfer
    _emx_mmfl_cmd :INT ;	//Command emx_mmfl
    _emx_mmfl_subs :INT ;	//Substate selection of emx_mmfl
    _emc_gas_subs :INT ;	//Substate selection to emc_gas
    _emc_water_subs :INT ;	//Substate selection to emc_water
    _emc_gas_setpoint :REAL ;	//emc_gas_setpoint
    _emc_water_cmd :INT ;	//Command to emc_water
    _emc_gas_cmd :INT ;	//Command to emc_gas
    _emc_gas_medium_gas :INT ;	//emc_gas_medium
    _ema_vessel_subs :INT ;	//Substate selection to ema_vessel
    _ema_vessel_cmd :INT ;	//ema_vessel_cmd
    _ready_hpca :BOOL ;	//Synchronisation flag ready to start HPN2 supply


    dummy : bool;            // Dummy placeholder for call without comma
END_VAR

VAR
    smc : "udtModeCommandSFC";         // SFC mode and command
    sqStepTimer : "TON";
    sqRunTimer : "fbRunTimer";
    sqSequencer : "udtSFCSequence16";
    SQ_TIMER: "TON";
    sqSeqTimerStart : Bool;
    _log_msg_temperature_abort :BOOL ;	//Operation aborted due to HiHi temperature
    _log_msg_hihi_temperature :BOOL ;	//HMI message: Vessel temperature reached High High setpoint
    _vessel_mass_alarm :BOOL ;	//Internal vessel mass alarm flag
    _hi_temperature_alarm :BOOL ;	//Internal vessel temperature alarm flag
    _FL_TIMER :"TON" ;	//Timer for TIME_FILTER
    _mass_initial :REAL ;	//Initial Mx vessel mass
    _log_msg_vessel_mass :BOOL ;	//HMI message: Vessel mass not reduced enough in spec. time
    _log_msg_hi_temperature :BOOL ;	//HMI message: Vessel temperature reached High setpoint
    _log_time_filtration_end :BOOL ;	//Flags the HMI that filtration operation ended
    _time_filter_end :TIME ;	//Flags the HMI that Mx filter operation ended
    _log_time_filter_end :BOOL ;	//Logging Mx filter operation end time
    _time_filter_begin :TIME ;	//Logging Mx filter operation start time
    _log_time_filter_begin :BOOL ;	//Flags the HMI that Mx filter started
    _prompt_filtration :BOOL ;	//Prompt operator to start filtration
    _prompt_filtration_confirm_yes :BOOL ;	//operator confirms to start filtration
    _log_msg_filtration_complete :BOOL ;	//Logging operator confirmation transfer complete 
    _confirm_complete :BOOL ;	//Operator confirms filtration is complete
    _time_filtration_end :TOD ;	//Logging filtration operation end time

END_VAR

VAR_TEMP
    sqSeqTimerExpired : Bool;
    sqStepTimerExpired : Bool;
    sqSeqTimerElapsed : Time;
    sqStepTimerElapsed : Time;
END_VAR

BEGIN
NETWORK
TITLE =Call Mode checking function
    L     #smc.MODE;
    T     #sqSequencer.MODE.current;
    CALL "fcSFCMode"
    (   Mode                 := #sqSequencer.MODE
    );

NETWORK
TITLE =Call Command checking function
    L     #smc.SQ_CMD;
    T     #sqSequencer.CMD.New;
    CALL "fcSFCCommand"
    (   Comand               := #sqSequencer.CMD
    );

NETWORK
TITLE =Sequencer Mode function

      A     #sqSequencer.MODE.changed;
      JC    MDCH; // if Mode changed,jump to mode change function
      A     #sqSequencer.MODE.manual;
      JC    MANU;
      A     #sqSequencer.MODE.auto;
      JC    AUTO;
      A     #sqSequencer.MODE.oos;
      JC    OOS;
      A     #sqSequencer.MODE.wrong;
      JC    WRMD;
      JU    EMOD;

NETWORK
TITLE =Mode change function
//----------------------------------------------------------------------------//
// On positive edge of mode change , this will execute once, only one cycle   //
// before going to execute the selected mode function below:                  //
//----------------------------------------------------------------------------//
MDCH: NOP   0;
      SET   ;
      R     #sqStepTimer.IN;
      L     #sqSequencer.STEP.NumberCurrent;
      T     #smc.STEPNO_JUMP;
      JU    EMOD;

NETWORK
TITLE =Manual Mode function
//----------------------------------------------------------------------------//
// #TRN_AND_JUMP=can set/reset                                                //
// #sqSequencer.STEP.JumpCtrl=Can set/reset by #MAN_JUMP                      //
// #NO_VERIFIC=Can set/ Reset                                                 //
//----------------------------------------------------------------------------//
MANU: NOP   0; //Manual mode selected



      A     #smc.MAN_JUMP;
      =     #sqSequencer.STEP.JumpCtrl;
      A     #smc.MAN_JUMP;
      JCN   EMOD;

      L     #smc.STEPNO_JUMP;
      T     #sqSequencer.STEP.NumberNext;
      T     #sqSequencer.STEP.NumberCurrent;
      R     #smc.MAN_JUMP; //Reset MAN_JUMP after loading user destination Step number
      R     #sqSequencer.STEP.Finished; //Reset finish flag, to execute next step action
      JU    EMOD;

NETWORK
TITLE =Auto Mode function
//----------------------------------------------------------------------------//
// #TRN_AND_JUMP=always set                                                   //
// #sqSequencer.STEP.JumpCtrl=Always set                                      //
// #NO_VERIFIC=Alwasy Reset                                                   //
//----------------------------------------------------------------------------//
AUTO: NOP   0; //Auto mode selected



      R     #smc.MAN_JUMP;
      S     #smc.TRN_AND_JUMP;
      R     #smc.NO_VERIFIC;
      S     #sqSequencer.STEP.JumpCtrl; //Always Set in auto mode

      L     #sqSequencer.STEP.NumberCurrent;
      T     #smc.STEPNO_JUMP;
      JU    EMOD;
NETWORK
TITLE =OOS mode function

OOS:  NOP   0; // Out of service
      JU    EMOD;
WRMD: NOP   0; //Wrong mode selected
      S     #sqSequencer.Error_Fault;
      L     "dbCONST".SEQ.STATE.WRMODE;
      T     #smc.SQ_STATE;

      JU    EMOD;

NETWORK
TITLE =Mode not changedd

      NOP   0;

NETWORK
TITLE =End Mode function

EMOD: NOP   0;

NETWORK
TITLE =An error will Pause the Sequencer,Operator must Resume SQ to run

      A     #sqSequencer.Error_Fault;
      AN    #sqSequencer.CMD.Changed;
      JC    PAUS;

NETWORK
TITLE =Command Action function

      A     #sqSequencer.CMD.Changed;
      JCN   CNCH; // if Command not changed,jump to end function
      R     #sqStepTimer.IN;

      A     #sqSequencer.CMD.Start;
      JC    STRT;

      A     #sqSequencer.CMD.Stop;
      JC    STOP;

      A     #sqSequencer.CMD.Pause;
      JC    PAUS;

      A     #sqSequencer.CMD.Resume;
      JC    RESM;

      A     #sqSequencer.CMD.Abort;
      JC    _abrt_begin;

      A     #sqSequencer.CMD.Ack;
      JC    ACKN;

      A     #sqSequencer.CMD.wrong;
      JC    WCMD;

      JU    ECMD; //Wrong command/not specified command
//End Comand function

NETWORK
TITLE =Comand -Start/Initiate action function

STRT: NOP   0;
      R     #smc.OFF_IDLE;
      R     #smc.PAUSED;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;
      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.TimerExpired;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqStepTimer.IN;

//      S     #sqRunTimer.RESET;

//----------------------------------------------------------------------------//
// Load Initial step Number:                                                  //
//----------------------------------------------------------------------------//
      L     1;
      T     #sqSequencer.STEP.Initial;
      L     #sqSequencer.STEP.Initial;
      T     #sqSequencer.STEP.NumberCurrent;
      T     #sqSequencer.STEP.NumberNext;

      L     "dbCONST".SEQ.STATE.STARTED;
      T     #smc.SQ_STATE;

NETWORK
TITLE = Reset sequence Done bits
    //------------------------------------------------------------------------//
    // Reset Step done bits:                                                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 16 ,
        OUT                  := #sqSequencer.STEP.Done[1]
    );

NETWORK
TITLE = Reset sequence Error bits
    //------------------------------------------------------------------------//
    // Reset Step error bits:                                                 //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 16 ,
        OUT                  := #sqSequencer.STEP.WithError[1]
    );

    JU    ECMD; //End Function

NETWORK
TITLE =Comand -Stop action function

STOP: NOP   0;
      S     #smc.OFF_IDLE;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;
      R     #sqSequencer.STEP.Jump;
      R     #sqSequencer.STEP.TimerExpired;
      R     #sqSequencer.STEP.Error_Fault;
      R     #sqSequencer.Error_Fault;
      R     #sqSequencer.STEP.ActionVerified;
      R     #sqRunTimer.ENABLE;
      R     #sqStepTimer.IN;
      R     #sqSeqTimerStart;
      R     #smc.PAUSED;


//Go to last step
      L     12;
      T     #sqSequencer.FinalStep;
      L     #sqSequencer.FinalStep;
      T     #sqSequencer.STEP.NumberNext;
      L     "dbCONST".SEQ.STATE.OFF_IDLE;
      T     #smc.SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Pause action function

PAUS: NOP   0;
      S     #smc.PAUSED;
      R     #smc.S_ACTIVE;
      S     #sqRunTimer.PAUSE;
      L     #sqSequencer.STEP.NumberCurrent;
      T     #smc.STEPNO_JUMP;
      L     "dbCONST".SEQ.STATE.PAUSED;
      T     #smc.SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Resume action function

RESM: NOP   0;
      R     #smc.PAUSED;
      R     #sqRunTimer.PAUSE;
      R     #sqStepTimer.IN; //Reset Step timer
      L     "dbCONST".SEQ.STATE.RESUMED;
      T     #smc.SQ_STATE;

      A     #smc.SQ_FINISHED;
      JC    ECMD;
      R     #sqSequencer.STEP.Active;
      R     #sqSequencer.STEP.Finished;
      R     #sqSequencer.STEP.ActionFinished;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -Abort action function

_abrt_begin: NOP   0;
      L     "dbCONST".SEQ.STATE.ABORTED;
      T     #smc.SQ_STATE;

      JC    STOP; //Stop & Abort same
      JU    ECMD;

NETWORK
TITLE =Comand -Acknowledge action function

ACKN: NOP   0;
      R     #smc.ERR_FAULT;
      R     #sqSequencer.Error_Fault;
      L     "dbCONST".SEQ.STATE.ACKNOWLEDGED;
      T     #smc.SQ_STATE;

      JU    ECMD; //End Function

NETWORK
TITLE =Comand -wrong/unavailable

WCMD: NOP   0;

      S     #sqSequencer.Error_Fault;
      L     "dbCONST".SEQ.STATE.WRCMD;
      T     #smc.SQ_STATE;

      JU    ECMD;
NETWORK
TITLE =Comand -not changedd

CNCH: NOP   0; // Command not changed

NETWORK
TITLE =End command Function

ECMD: NOP   0;

NETWORK
TITLE =Sequencer Step Jump distrubution list
    //------------------------------------------------------------------------//
    // Sequencer step jump list. Load the step number to execute the step:    //
    //------------------------------------------------------------------------//
    L     #sqSequencer.STEP.NumberCurrent;
    JL    SQER; // If Sequencer Step number invalid or greater than available number of step
    JU    S000; // Exceptional Error Handling
    JU    S001; // STEP-001:
JU    S002; // STEP-002:
JU    S003; // STEP-003:
JU    S004; // STEP-004:
JU    S005; // STEP-005:
JU    S006; // STEP-006:
JU    S007; // STEP-007:
JU    S008; // STEP-008:
JU    S009; // STEP-009:
JU    S010; // STEP-010:
JU    S011; // STEP-011:
JU    S012; // STEP-012:


    //------------------------------------------------------------------------//
    // If Step number is Invalid or Out of Range:                             //
    //------------------------------------------------------------------------//
SQER: NOP   0;
    A     "alwaysLow";
    S     #sqSequencer.Error_Fault;
    JU    COMM; // Jump to Common Sequencer code handling function

NETWORK
TITLE =STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP
    //------------------------------------------------------------------------//
    // STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP0 STEP //
    //------------------------------------------------------------------------//

NETWORK
TITLE =S000: STEP0::If Paused exit

S000: NOP   0;
      JU    COMM;






NETWORK
TITLE =S001: STEP-01::UO_MX_SIP : Filtration Unit Operation Commenced
    //================================ STEP HEADER ===========================//
    // STEP001 STEP001 STEP001 STEP001
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP001 STEP001 STEP001 STEP001
    //------------------------------------------------------------------------//
    // Log Mx Filter operation begin time.
    // Connect Pre Filter to to Flow Plate FPx1.
    //------------------------------------------------------------------------//
S001: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S001:STEP-01:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A001; // Exit Action code, Jump to A001 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L001; // Action number loaded, Jump to L001--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L001: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r001; //Wrong Action number
      JU    _001; //Action error handling
       JU    aa01; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r001: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k001; //Exit
_001: NOP   0; // Action error handling
      JU    k001; // Exit






NETWORK
TITLE =S001:: STEP-001:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Log Mx Filter operation begin time.
    // //Propt operator to cinfirm Pre-Filter is connected to FPn1 ZSCn113 by starting EMX1_SETUP_FILTER.
    aa01: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Log Mx Filter operation begin time.
L "dbCONST".CHRONO.CPU_TIME;
T #_time_filter_begin;

SET;
S #_log_time_filter_begin;

//Start EMX1_SETUP_FILTER.
L "dbCONST".BLK.EMX1.SUBS.SETUP_FILTER;
T #_emx_mmfl_subs;
L "dbCONST".BLK.CMD.START;
T #_emx_mmfl_cmd;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A(;
L #_emx_mmfl_state;
L "dbCONST".BLK.EMX1.SUBS.SETUP_FILTER;
==I;
);
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k001;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[01];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k001;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k001: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[01]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S001:STEP-001::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A001: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S001::STEP 001:TRAN 001: Confirmation Received
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Confirmation from the Operator Received
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
//EMX1 Filter Setup completed.
A(;
L  #_emx_mmfl_state;
L  "dbCONST".BLK.STATE.COMPLETED;
==I;
);






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;

NETWORK
TITLE =S001:t001::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x001;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     02;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step02.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x001: NOP   0;






NETWORK
TITLE =S001::STEP-001:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S002: STEP-02::UO_MX_FILTER : Start filtration.
    //================================ STEP HEADER ===========================//
    // STEP002 STEP002 STEP002 STEP002
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP002 STEP002 STEP002 STEP002
    //------------------------------------------------------------------------//
    // Set all Mx equipment to safe state with Mx LPCA control enabled and vent valve closed.
    // 
    // Store current vessel mass.
    // Prompt operator to start filtration.
    //------------------------------------------------------------------------//
S002: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S002:STEP-02:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A002; // Exit Action code, Jump to A002 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L002; // Action number loaded, Jump to L002--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L002: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r002; //Wrong Action number
      JU    _002; //Action error handling
       JU    aa02; //ACTION-01
JU    ab02; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r002: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k002; //Exit
_002: NOP   0; // Action error handling
      JU    k002; // Exit






NETWORK
TITLE =S002:: STEP-002:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Set all Mx equipment to safe state with Mx LCPA control enabled and vent valve closed.
    // //
    aa02: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    // Enable Mx LPCA pressure control.
L "dbCONST".SEL.GAS.LPCA;
T #_emc_gas_medium_gas;
L "dbCONST".BLK.EMC1.SUBS.PRESSURE;
T #_emc_gas_subs;
L  "dbCONST".BLK.CMD.START;
T #_emc_gas_cmd;

//Set all Mx equipment to safe state.
L "dbCONST".BLK.CMD.STOP;
T  #_ema_vessel_cmd;
L "dbCONST".BLK.SAFE.CMD;
T  #_ema_vessel_subs;

L "dbCONST".BLK.CMD.STOP;
T  #_emc_water_cmd;
L "dbCONST".BLK.SAFE.CMD;
T  #_emc_water_subs;

L "dbCONST".BLK.CMD.STOP;
T  #_emv_vessel_cmd;
L "dbCONST".BLK.SAFE.CMD;
T  #_emv_vessel_subs;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A(;
L #_emc_gas_state;
L "dbCONST".BLK.EMC1.SUBS.PRESSURE;  
==I;
);
A(;
L #_emc_water_state;
L "dbCONST".BLK.STATE.STOPPED;
==I;
);
A(;
L #_emv_vessel_state;
L "dbCONST".BLK.STATE.STOPPED;
==I;
);

    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= ACT FOOTER ===============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k002;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // Load Next Step Action number:                                          //
    //------------------------------------------------------------------------//
    L     02; //Load next Action
    T     #sqSequencer.STEP.ActionNumber;






NETWORK
TITLE =S002:: STEP-002:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Fetch the current vessel mass and store in mass_initial.
    // //Prompt operator to start filtration and reset flags.
    // //Start TIME_MASS_REDUCE.
    ab02: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Clear out mass_initial.
L     0.000000e+000; 
T     #_mass_initial; 

SET;
S #_prompt_filtration;
R #_ready_hpca;
R #_vessel_mass_alarm;
R #_hi_temperature_alarm;

//Store current mass to initial mass.
L     #_emm_vessel_mass_nett;
T     #_mass_initial; 

//Start Timer for TIME_MASS_REDUCE .
A #_FL_TIMER.Q;
R #_FL_TIMER.IN;

AN #_FL_TIMER.Q;
S #_FL_TIMER.IN;
L #_r_time_mass_reduce;
T #_FL_TIMER.PT;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A "uncondJump";
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k002;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[02];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k002;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k002: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[02]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S002:STEP-002::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A002: NOP   0;
    R     #sqStepTimer.IN;






NETWORK
TITLE =S002::STEP-002:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S003: STEP-03::UO_MX_FILTER : Filtration Unit Operation Commenced
    //================================ STEP HEADER ===========================//
    // STEP003 STEP003 STEP003 STEP003
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP003 STEP003 STEP003 STEP003
    //------------------------------------------------------------------------//
    // Enable HEX Temperature control with TEMP_FILT setpoint.
    // 
    // Set Mx LPCA valve fully open.
    // Set Mx Outlet valve open (DISCHARGE).
    // Open MMFLx and SMFLx transfer path to Sy. (FILTER & FILTER_BLEED)
    //------------------------------------------------------------------------//
S003: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S003:STEP-03:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A003; // Exit Action code, Jump to A003 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L003; // Action number loaded, Jump to L003--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L003: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r003; //Wrong Action number
      JU    _003; //Action error handling
       JU    aa03; //ACTION-01
JU    ab03; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r003: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k003; //Exit
_003: NOP   0; // Action error handling
      JU    k003; // Exit






NETWORK
TITLE =S003:: STEP-003:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Enable HEX Temperature control with TEMP_FILT setpoint.
    aa03: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    L  #_temp_filt;
T  #_emt_hex_setpoint;

//Start EMT_PREEMPT.
L  "dbCONST".BLK.EMT1.SUBS.PREEMPT;
T  #_emt_hex_subs;
L  "dbCONST".BLK.CMD.START;
T  #_emt_hex_cmd;

SET;
R #_prompt_filtration_confirm_yes;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    //Verify if emt_hex changed to substate PREEMPT.
A(;
L #_emt_hex_state;
L  "dbCONST".BLK.EMT1.SUBS.PREEMPT;
==I;
);
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= ACT FOOTER ===============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k003;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // Load Next Step Action number:                                          //
    //------------------------------------------------------------------------//
    L     02; //Load next Action
    T     #sqSequencer.STEP.ActionNumber;






NETWORK
TITLE =S003:: STEP-003:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Open Mx outlet valve (STATE=DISCHARGE) and fully open LPCA valve.
    // //Open MMFLx and SMFLx transfer path to Sy.
    ab03: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Open Mx outlet valve.
L "dbCONST".BLK.EMV1.SUBS.DISCHARGE;
T #_emv_vessel_subs;
L "dbCONST".BLK.CMD.START;
T #_emv_vessel_cmd;

//Fully open LPCA valve 
L "dbCONST".SEL.GAS.LPCA;
T #_emc_gas_medium_gas;
L "dbCONST".BLK.EMC1.SUBS.VALVE;
T #_emc_gas_subs;
L  "dbCONST".BLK.CMD.START;
T #_emc_gas_cmd;

//Start FILTER.
L "dbCONST".BLK.EMX1.SUBS.FILTER; 
T #_emx_mmfl_subs;
L "dbCONST".BLK.CMD.START;
T #_emx_mmfl_cmd;

L "dbCONST".BLK.EMX2.SUBS.FILTER; 
T #_emx_transfer_subs;
L "dbCONST".BLK.CMD.START;
T #_emx_transfer_cmd;

L "dbCONST".BLK.EMX6.SUBS.FILTER_BLEED; 
T #_emx_smfl_subs;
L "dbCONST".BLK.CMD.START;
T #_emx_smfl_cmd;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A(;
L #_emv_vessel_state;
L "dbCONST".BLK.EMV1.SUBS.DISCHARGE;
==I;
);
A(;
L #_emc_gas_state;
L "dbCONST".BLK.EMC1.SUBS.VALVE;
==I;
);
A(;
L #_emx_mmfl_state;
L  "dbCONST".BLK.EMX1.SUBS.FILTER;
==I;
);
A(;
L #_emx_transfer_state;
L  "dbCONST".BLK.EMX2.SUBS.FILTER;
==I;
);
A(;
L #_emx_smfl_state;
L  "dbCONST".BLK.EMX6.SUBS.FILTER_BLEED;
==I;
);
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k003;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[03];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k003;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k003: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[03]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S003:STEP-003::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A003: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S003::STEP 003:TRAN 003: Emx_smfl completed.
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Emx_smfl completed.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A(;
L   #_emx_smfl_state;
L   "dbCONST".BLK.STATE.COMPLETED;
==I;
);






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;

NETWORK
TITLE =S003:t003::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x003;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     04;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step04.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x003: NOP   0;






NETWORK
TITLE =S003::STEP-003:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S004: STEP-04::UO_MX_FILTER : Open filter outlet valve.
    //================================ STEP HEADER ===========================//
    // STEP004 STEP004 STEP004 STEP004
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP004 STEP004 STEP004 STEP004
    //------------------------------------------------------------------------//
    // Open filter outlet valve.
    // 
    // Set flag ready_HPCA indicating ready to start HPCA supply.
    //------------------------------------------------------------------------//
S004: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S004:STEP-04:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A004; // Exit Action code, Jump to A004 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L004; // Action number loaded, Jump to L004--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L004: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r004; //Wrong Action number
      JU    _004; //Action error handling
       JU    aa04; //ACTION-01
JU    ab04; //ACTION-02


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r004: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k004; //Exit
_004: NOP   0; // Action error handling
      JU    k004; // Exit






NETWORK
TITLE =S004:: STEP-004:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Open filter outlet valve, DVx137.
    aa04: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Set emx_smfl to substate FILTER.
L  "dbCONST".BLK.EMX6.SUBS.FILTER;
T  #_emx_smfl_subs;
L  "dbCONST".BLK.CMD.START;
T  #_emx_smfl_cmd;

//Set emt_hex to substate COOL.
L  "dbCONST".BLK.EMT1.SUBS.COOL;
T  #_emt_hex_subs;
L  "dbCONST".BLK.CMD.START;
T  #_emt_hex_cmd;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    //Verify if Emx_smfl changed to substate FILTER.
A(;
L  #_emx_smfl_state;
L  "dbCONST".BLK.EMX6.SUBS.FILTER;
==I;
);
//Verify if emt_hex changed to substate COOL
A(;
L  #_emt_hex_state;
L  "dbCONST".BLK.EMT1.SUBS.COOL;
==I;
);
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= ACT FOOTER ===============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k004;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // Load Next Step Action number:                                          //
    //------------------------------------------------------------------------//
    L     02; //Load next Action
    T     #sqSequencer.STEP.ActionNumber;






NETWORK
TITLE =S004:: STEP-004:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Set flag ready_HPCA
    ab04: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    SET;
S #_ready_hpca;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A "uncondJump";
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k004;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[04];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k004;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k004: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[04]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S004:STEP-004::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A004: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S004::STEP 004:TRAN 004: Parent set start flag?
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Wait for parent to indicate ready for HPCA.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A #_start_hpca;






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;

NETWORK
TITLE =S004:t004::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x004;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     05;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step05.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x004: NOP   0;






NETWORK
TITLE =S004::STEP-004:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S005: STEP-05::UO_MX_FILTER : Enable HPCA pressure control and wait for complete
    //================================ STEP HEADER ===========================//
    // STEP005 STEP005 STEP005 STEP005
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP005 STEP005 STEP005 STEP005
    //------------------------------------------------------------------------//
    // Set Mx HPCA pressure control at setpoint PRES_HPCA_FILT.
    //------------------------------------------------------------------------//
S005: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S005:STEP-05:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A005; // Exit Action code, Jump to A005 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L005; // Action number loaded, Jump to L005--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L005: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r005; //Wrong Action number
      JU    _005; //Action error handling
       JU    aa05; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r005: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k005; //Exit
_005: NOP   0; // Action error handling
      JU    k005; // Exit






NETWORK
TITLE =S005:: STEP-005:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //HPCA pressure control at setpoint PRES_HPCA_FILT.
    aa05: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    // Enable Mx HPCA pressure control at setpoint PRES_HPCA_FILT.
L  #_r_pres_hpca_filt;
T  #_emc_gas_setpoint;
L  "dbCONST".SEL.GAS.HPCA;
T  #_emc_gas_medium_gas;
L  "dbCONST".BLK.EMC1.SUBS.PRESSURE;
T  #_emc_gas_subs;
L  "dbCONST".BLK.CMD.START;
T  #_emc_gas_cmd;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A(;
L #_emc_gas_state;
L "dbCONST".BLK.EMC1.SUBS.PRESSURE;
==I;
);
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k005;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[05];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k005;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k005: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[05]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S005:STEP-005::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A005: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S005::STEP 005:TRAN 005: Mx temperature exceeds HiHi limit setpoint
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Mx temperature exceeds HiHi limit setpoint
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A(;
L #_emv_vessel_ti_vessel_pv;
L #_r_temp_limit_hh;
>R;
);






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;

NETWORK
TITLE =S005:t005::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x005;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     06;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step06.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x005: NOP   0;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S005::STEP 005:TRAN 006: Mass of Vessel has reach throttled mass
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Jump if Mass_Throttle_Mx has reach set point.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A(;
L #_emm_vessel_mass_nett;
L #_r_mass_throttle_mx;
<=R;
);






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;

NETWORK
TITLE =S005:t006::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x006;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     09;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step09.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x006: NOP   0;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S005::STEP 005:TRAN 007: Wait for mass endpoint
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Jump if mass difference is less than mass setpoint after TIME_MASS_REDUCE timer expired
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A #_FL_TIMER.Q;
AN #_vessel_mass_alarm;
A(;
L #_mass_initial;
L #_emm_vessel_mass_nett;
-R;
L #_r_mass_expect_reduced;
<R;
);






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;

NETWORK
TITLE =S005:t007::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x007;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     07;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step07.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x007: NOP   0;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S005::STEP 005:TRAN 008: Mx temperature exceeds Hi limit setpoint
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Mx temperature exceeds Hi limit setpoint
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
AN #_hi_temperature_alarm;
A(;
L #_emv_vessel_ti_vessel_pv;
L #_r_temp_limit_h;
>R;
);






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;

NETWORK
TITLE =S005:t008::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x008;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     08;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step08.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x008: NOP   0;






NETWORK
TITLE =S005::STEP-005:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S006: STEP-06::UO_MX_FILTER : Automatic abort
    //================================ STEP HEADER ===========================//
    // STEP006 STEP006 STEP006 STEP006
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP006 STEP006 STEP006 STEP006
    //------------------------------------------------------------------------//
    // Raise High High temperature alarm message.
    // Log automatic ABORT.
    //------------------------------------------------------------------------//
S006: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S006:STEP-06:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A006; // Exit Action code, Jump to A006 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L006; // Action number loaded, Jump to L006--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L006: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r006; //Wrong Action number
      JU    _006; //Action error handling
       JU    aa06; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r006: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k006; //Exit
_006: NOP   0; // Action error handling
      JU    k006; // Exit






NETWORK
TITLE =S006:: STEP-006:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Raise High High temperature alarm message.
    // //Log automatic ABORT.
    aa06: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    SET;
S #_log_msg_hihi_temperature;
S #_log_msg_temperature_abort;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A "uncondJump";
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k006;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[06];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k006;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k006: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[06]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S006:STEP-006::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A006: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S006::STEP 006:TRAN 011: Always High
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Always High
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A "uncondJump";






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;

NETWORK
TITLE =S006:t011::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x011;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     11;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step11.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x011: NOP   0;






NETWORK
TITLE =S006::STEP-006:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S007: STEP-07::UO_MX_FILTER : Mass reduced slow
    //================================ STEP HEADER ===========================//
    // STEP007 STEP007 STEP007 STEP007
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP007 STEP007 STEP007 STEP007
    //------------------------------------------------------------------------//
    // Raise vessel mass alarm message.
    //------------------------------------------------------------------------//
S007: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S007:STEP-07:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A007; // Exit Action code, Jump to A007 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L007; // Action number loaded, Jump to L007--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L007: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r007; //Wrong Action number
      JU    _007; //Action error handling
       JU    aa07; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r007: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k007; //Exit
_007: NOP   0; // Action error handling
      JU    k007; // Exit






NETWORK
TITLE =S007:: STEP-007:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Raise vessel mass alarm message.
    aa07: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Raise vessel mass alarm message.
SET;
S #_log_msg_vessel_mass;
S #_vessel_mass_alarm;


    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A "uncondJump";
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k007;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[07];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k007;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k007: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[07]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S007:STEP-007::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A007: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S007::STEP 007:TRAN 009: Always High
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Always High
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A "uncondJump";






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;

NETWORK
TITLE =S007:t009::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x009;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     05;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step05.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x009: NOP   0;






NETWORK
TITLE =S007::STEP-007:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S008: STEP-08::UO_MX_FILTER : High temperature
    //================================ STEP HEADER ===========================//
    // STEP008 STEP008 STEP008 STEP008
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP008 STEP008 STEP008 STEP008
    //------------------------------------------------------------------------//
    // Raise High temperature alarm message.
    //------------------------------------------------------------------------//
S008: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S008:STEP-08:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A008; // Exit Action code, Jump to A008 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L008; // Action number loaded, Jump to L008--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L008: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r008; //Wrong Action number
      JU    _008; //Action error handling
       JU    aa08; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r008: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k008; //Exit
_008: NOP   0; // Action error handling
      JU    k008; // Exit






NETWORK
TITLE =S008:: STEP-008:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Raise High temperature alarm message.
    aa08: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    // Raise High temperature alarm message.
SET;
S #_log_msg_hi_temperature;
S #_hi_temperature_alarm;


    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A "uncondJump";
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k008;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[08];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k008;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k008: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[08]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S008:STEP-008::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A008: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S008::STEP 008:TRAN 010: Always High
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Always High
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A "uncondJump";






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;

NETWORK
TITLE =S008:t010::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x010;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     05;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step05.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x010: NOP   0;






NETWORK
TITLE =S008::STEP-008:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S009: STEP-09::UO_MX_FILTER : Enable HPCA pressure control for new set point.
    //================================ STEP HEADER ===========================//
    // STEP009 STEP009 STEP009 STEP009
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP009 STEP009 STEP009 STEP009
    //------------------------------------------------------------------------//
    // Set Mx HPCA pressure control at setpoint PRES_HPCA_FILT set point 2.
    //------------------------------------------------------------------------//
S009: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S009:STEP-09:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A009; // Exit Action code, Jump to A009 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L009; // Action number loaded, Jump to L009--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L009: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r009; //Wrong Action number
      JU    _009; //Action error handling
       JU    aa09; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r009: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k009; //Exit
_009: NOP   0; // Action error handling
      JU    k009; // Exit






NETWORK
TITLE =S009:: STEP-009:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //HPCA pressure control at setpoint 2, PRES_HPCA_FILT2.
    aa09: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    // Set HPCA valve pressure control at setpoint 2
L #_r_pres_hpca_filt2;
T #_emc_gas_setpoint;


SET;
R #_ready_HPCA;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A "uncondJump";
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k009;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[09];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k009;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k009: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[09]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S009:STEP-009::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A009: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S009::STEP 009:TRAN 012: Filtration complete?
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Wait for operator to confirm filtration is complete.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A #_confirm_complete;






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;

NETWORK
TITLE =S009:t012::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x012;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     10;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step10.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x012: NOP   0;






NETWORK
TITLE =S009::STEP-009:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S010: STEP-10::UO_MX_FILTER : Filtration completed.
    //================================ STEP HEADER ===========================//
    // STEP010 STEP010 STEP010 STEP010
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP010 STEP010 STEP010 STEP010
    //------------------------------------------------------------------------//
    // Log operator confirmation transfer complete and filtration operation end time.
    //------------------------------------------------------------------------//
S010: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S010:STEP-10:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A010; // Exit Action code, Jump to A010 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L010; // Action number loaded, Jump to L010--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L010: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r010; //Wrong Action number
      JU    _010; //Action error handling
       JU    aa10; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r010: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k010; //Exit
_010: NOP   0; // Action error handling
      JU    k010; // Exit






NETWORK
TITLE =S010:: STEP-010:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Log operator confirmation transfer complete and filtration operation end time.
    aa10: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Log operator confirmation transfer complete 
SET;
S #_log_msg_filtration_complete;

//Log FILTRATION operation end time
L "dbCONST".CHRONO.CPU_TIME;
T #_time_filtration_end;

SET;
S #_log_time_filtration_end;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A "uncondJump";
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k010;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[10];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k010;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k010: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[10]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S010:STEP-010::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A010: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S010::STEP 010:TRAN 013: Transfer is complete?
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Wait for parent to indicate transfer is complete when flag filtration_complete is set by the parent.
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A #_filtration_complete;






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;

NETWORK
TITLE =S010:t013::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x013;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     11;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step11.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x013: NOP   0;






NETWORK
TITLE =S010::STEP-010:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S011: STEP-11::UO_MX_FILTER : Disable HPCA control
    //================================ STEP HEADER ===========================//
    // STEP011 STEP011 STEP011 STEP011
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP011 STEP011 STEP011 STEP011
    //------------------------------------------------------------------------//
    // Disable HEX Temperature control and Mx HPCA control.
    // 
    // Close sterile filter outlet valve and path sequentially up to including Sy outlet valve.
    //------------------------------------------------------------------------//
S011: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S011:STEP-11:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A011; // Exit Action code, Jump to A011 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L011; // Action number loaded, Jump to L011--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L011: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r011; //Wrong Action number
      JU    _011; //Action error handling
       JU    aa11; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r011: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k011; //Exit
_011: NOP   0; // Action error handling
      JU    k011; // Exit






NETWORK
TITLE =S011:: STEP-011:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Disable HEX temperature control, HPCA control and stop filter.
    aa11: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Stop EMT_PREEMPT.
L "dbCONST".BLK.SAFE.CMD;
T  #_emt_hex_subs;
L "dbCONST".BLK.CMD.STOP;
T  #_emt_hex_cmd;

//Disable HPCA control.
L "dbCONST".BLK.SAFE.CMD;
T  #_emc_gas_subs;
L "dbCONST".BLK.CMD.STOP;
T  #_emc_gas_cmd;

//Stop FILTER.
L "dbCONST".BLK.SAFE.CMD;
T #_emx_mmfl_subs;
L "dbCONST".BLK.CMD.STOP;
T #_emx_mmfl_cmd;

L "dbCONST".BLK.SAFE.CMD;
T #_emx_transfer_subs;
L "dbCONST".BLK.CMD.STOP;
T #_emx_transfer_cmd;

L "dbCONST".BLK.SAFE.CMD;
T #_emx_smfl_subs;
L "dbCONST".BLK.CMD.STOP;
T #_emx_smfl_cmd;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A(;
L #_emt_hex_state;
L "dbCONST".BLK.STATE.STOPPED;
==I;
);
A(;
L #_emc_gas_state;
L "dbCONST".BLK.STATE.STOPPED;
==I;
);
A(;
L #_emx_mmfl_state;
L "dbCONST".BLK.STATE.STOPPED;
==I;
);
A(;
L #_emx_transfer_state;
L "dbCONST".BLK.STATE.STOPPED;
==I;
);
A(;
L #_emx_smfl_state;
L "dbCONST".BLK.STATE.STOPPED;
==I;
);
    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k011;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[11];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k011;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k011: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[11]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S011:STEP-011::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A011: NOP   0;
    R     #sqStepTimer.IN;






    //============================= TRAN HEADER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Bypass transition if manual jump:                                      //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Finished;
    A     #smc.TRN_AND_JUMP;     //Manual jump is set Transition as bypassed
    JCN   COMM;              //exit

NETWORK
TITLE =S011::STEP 011:TRAN 014: Empty transition.
//----------------------------------------------------------------------------//
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
// TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN   TRAN //
//----------------------------------------------------------------------------//
// Unconditional jump
//----------------------------------------------------------------------------//
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
// CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CONDITION   CO //
//----------------------------------------------------------------------------//
A "uncondJump";






    //============================= TRAN FOOTER ==============================//
    // Transition jump control:                                               //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.JumpCtrl;
    S     #sqSequencer.STEP.Jump;

NETWORK
TITLE =S011:t014::TRANS-v: EXIT TRANSITION AND READY THE NEXT STEP
    //------------------------------------------------------------------------//
    // Check the jump flag and jump to the next step if the transition        //
    // condition is true and has set the jump flag:                           //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.Jump;
    JCN   x014;

    R     #sqSequencer.STEP.Jump;
    R     #sqSequencer.STEP.Finished;

    L     12;     // Load next STEPNO to jump to if transition satisfied
    T     #sqSequencer.STEP.NumberNext; //Next Step12.

    JU    COMM;              // Transition satisfied, Exit, go to next step
x014: NOP   0;






NETWORK
TITLE =S011::STEP-011:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =S012: STEP-12::UO_MX_FILTER : Filtration Unit Operation Completed
    //================================ STEP HEADER ===========================//
    // STEP012 STEP012 STEP012 STEP012
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // STEP012 STEP012 STEP012 STEP012
    //------------------------------------------------------------------------//
    // Disable Mx manway alarm and low pressure alarm.
    // Log Mx Filter operation end time.
    //------------------------------------------------------------------------//
S012: NOP   0;

      A     #sqSequencer.CMD.Pause; //If paused jump
      JC    COMM;

NETWORK
TITLE =S012:STEP-12:Begin Action

      A     #sqSequencer.STEP.Finished;
      JC    A012; // Exit Action code, Jump to A012 Transition code

      //----------------------------------------------------------------------//
      // Begin step Action:                                                   //
      //----------------------------------------------------------------------//
      A     #sqSequencer.STEP.Active;
      JC    L012; // Action number loaded, Jump to L012--Step Action List

      //----------------------------------------------------------------------//
      // Load Default/Initial Step action number:                             //
      //----------------------------------------------------------------------//
      S     #sqSequencer.STEP.Active;
      S     #sqStepTimer.IN;
      L     1; //First Action, Step must contain Minimum one action
      T     #sqSequencer.STEP.ActionNumber;

//----------------------------------------------------------------------------//
// Step action list.                                                          //
// aann=mini Action step number(aa) inside main step number(nn)               //
// First Action aa00, Second action ab00, Third ac00, etc.                    //
//----------------------------------------------------------------------------//
L012: NOP   0;

      L     #sqSequencer.STEP.ActionNumber;
      JL    r012; //Wrong Action number
      JU    _012; //Action error handling
       JU    aa12; //ACTION-01


//----------------------------------------------------------------------------//
// More step action in the list can be inserted here, upto ab is tested:      //
//----------------------------------------------------------------------------//
r012: NOP   0; //Wrong action number
      S     #sqSequencer.Error_Fault;
      JU    k012; //Exit
_012: NOP   0; // Action error handling
      JU    k012; // Exit






NETWORK
TITLE =S012:: STEP-012:: : ACTION CODE
    //================================ ACT HEADER ============================//
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION ACTION  //
    //------------------------------------------------------------------------//
    // //Disable Mx manway alarm and low pressure alarm.
    // //Log Mx Filter operation end time.
    aa12: NOP   0;

    //------------------------------------------------------------------------//
    // ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT ACT    //
    //------------------------------------------------------------------------//
    //Set emv_vessel to substate MANWAY and start it to disable Manway alarm.
L "dbCONST".BLK.EMV1.SUBS.MANWAY;
T #_emv_vessel_subs;
L "dbCONST".BLK.CMD.START;
T #_emv_vessel_cmd;

//Log Mx Filter operation end time.
L "dbCONST".CHRONO.CPU_TIME;
T #_time_filter_end;

SET;
S #_log_time_filter_end;

    //------------------------------------------------------------------------//
    // VERIFY  VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY VERIFY //
    //------------------------------------------------------------------------//
    A(;
L #_emv_vessel_state;
L "dbCONST".BLK.EMV1.SUBS.MANWAY;
==I;
);

    S     #sqSequencer.STEP.ActionVerified; //Action verified

    //------------------------------------------------------------------------//
    // Action done:                                                           //
    //------------------------------------------------------------------------//
    O     #sqSequencer.STEP.ActionVerified;
    O     #smc.NO_VERIFIC;       //No verification , bypass verification code
    S     #sqSequencer.STEP.ActionFinished;






    //============================= STEP FOOTER ==============================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Get Ready after action finished:                                       //
    //------------------------------------------------------------------------//
    A     #sqSequencer.STEP.ActionFinished;
    JCN   k012;

    //------------------------------------------------------------------------//
    // Reset Action finished flag, ready for next step action:                //
    //------------------------------------------------------------------------//
    R     #sqSequencer.STEP.ActionVerified;
    R     #sqSequencer.STEP.ActionFinished;

    //------------------------------------------------------------------------//
    // If ALL actions are finished:                                           //
    //------------------------------------------------------------------------//
    SET   ;
    S     #sqSequencer.STEP.Finished;
    R     #sqSequencer.STEP.Active;
    S     #sqSequencer.STEP.Done[12];

    //------------------------------------------------------------------------//
    // End Step action(s):                                                    //
    //------------------------------------------------------------------------//
    JU    k012;

//----------------------------------------------------------------------------//
// Finished Step Action(s):                                                   //
//----------------------------------------------------------------------------//
k012: NOP   0;

    A     #sqStepTimerExpired;
    S     #sqSequencer.STEP.WithError[12]; // Step error flag
    S     #sqSequencer.Error_Fault;
    R     #sqStepTimer.IN;

NETWORK
TITLE =S012:STEP-012::Begin Transition
    //------------------------------------------------------------------------//
    // Begin the transition code:                                             //
    //------------------------------------------------------------------------//
    A012: NOP   0;
    R     #sqStepTimer.IN;






NETWORK
TITLE =S012::STEP-012:EXIT TRANSITION:
    //========================== STEP TRANSFER ===============================//
    // Jump to the common step progression code:                              //
    //------------------------------------------------------------------------//
    JU    COMM;






NETWORK
TITLE =Sequencer Common Code, Execute in Each Scan
    //============================ SEQ FOOTER ================================//
    // AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTOCODE   AUTO //
    // Common code to execute each scan:                                      //
    //------------------------------------------------------------------------//
    COMM: NOP   0;

NETWORK
TITLE =Retentive/Non Retentive Selectable Run timer
    CALL #sqRunTimer (
        TIME_H               := #sqRunTimer.TIME_H,
        TIME_M               := #sqRunTimer.TIME_M,
        TIME_S               := #sqRunTimer.TIME_S,
        ENABLE               := #sqRunTimer.ENABLE,
        RESET                := #sqRunTimer.RESET,
        PAUSE                := #sqRunTimer.PAUSE,
        NON_RET              := #sqRunTimer.NON_RET,
        RMNG_H               := #sqRunTimer.RMNG_H,
        RMNG_M               := #sqRunTimer.RMNG_M,
        RMNG_S               := #sqRunTimer.RMNG_S,
        TIME_EXPIRED         := #sqRunTimer.TIME_EXPIRED,
        TMR_RUNNG            := #sqRunTimer.TMR_RUNNG
    );

NETWORK
TITLE =Sequencer Step Timer
    CALL #sqStepTimer (
        IN                   := #sqStepTimer.IN,
        PT                   := "dbCONST".SEQ.STEP_TIME,
        Q                    := #sqStepTimerExpired,
        ET                   := #sqStepTimerElapsed
    );

NETWORK
TITLE =Sequencer Timer
    CALL #SQ_TIMER (
        IN                   := #sqSeqTimerStart,
        PT                   := #SQ_TIMER.PT,
        Q                    := #sqSeqTimerExpired,
        ET                   := #sqSeqTimerElapsed
    );

NETWORK
TITLE =General Assignments

    L     #sqSequencer.STEP.NumberNext;
    T     #smc.NXT_STEP;
    T     #sqSequencer.STEP.NumberCurrent;
    T     #smc.CURSTEP;

    A     #sqSequencer.STEP.Active;
    =     #smc.S_ACTIVE;

    A     #sqSequencer.Error_Fault;
    =     #smc.ERR_FAULT;

NETWORK
TITLE =Sequencer Finished

    AN    #smc.OFF_IDLE;
    AN    #smc.PAUSED;
    A     #sqSequencer.STEP.Done[12];
    =     #sqSequencer.Finished;
    =     #smc.SQ_FINISHED;
    JCN   fnsd;
    L     "dbCONST".SEQ.STATE.COMPLETED;
    T     #smc.SQ_STATE;
    R     #smc.PAUSED;
    R     #sqSequencer.STEP.Error_Fault;
    R     #sqSequencer.Error_Fault;
fnsd: NOP   0;

    //------------------------------------------------------------------------//
    // Reset Finished flag if SQ OFF for Last step to scan:                   //
    //------------------------------------------------------------------------//
    A     #smc.OFF_IDLE;
    AN    #sqSequencer.STEP.Done[12];
    AN    #sqSequencer.STEP.WithError[12];
    JCN   _abrt_end;
    R     #sqSequencer.STEP.Finished;
    L     "dbCONST".SEQ.STATE.ABORTED;
    T     #smc.SQ_STATE;
    S     #smc.OFF_IDLE;
    R     #smc.PAUSED;
    R     #sqSequencer.STEP.Error_Fault;
    R     #sqSequencer.Error_Fault;
    R     #smc.PAUSED;
_abrt_end: NOP   0;

    //------------------------------------------------------------------------//
    // Visio Common Code Begin:                                               //
    //------------------------------------------------------------------------//
    

//----------------------------------------------------------------------------//
// End of Sequencer:                                                          //
//----------------------------------------------------------------------------//
END_FUNCTION_BLOCK

