//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Description: Generic Block Common Mode and Command handling function block.//
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      28-Feb-2018 NA        Reboot for S7-1500.             //
// 0.4 Khairul Basar    05-Oct-2009 NA        Substate change will issue STOP //
// 0.3 Khairul Basar    17-Sep-2009 NA        Instead of Auto/Man command,    //
//                                            now only single COMMAND.        //
// 0.2 Khairul Basar    20-Aug-2009 NA        Ref1.                           //
// 0.1 Khairul Basar    03-Aug-2009 NA        Initial design.                 //
// Ref1.                                                                      //
// Mode change:#tMode_Changed NO is removed from the parallel path of         //
// Substate changed for not to generate #tEdgeAutoStart pulse when mode is    //
// changed.                                                                   //
//----------------------------------------------------------------------------//
FUNCTION "fcModeCmd" : Void
TITLE = General Mode, Command & Interlock handling block
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : REO
NAME : fcModeCmd
VERSION : 2.0

VAR_IN_OUT
    mcRead : "udtMCRead";    // Block mode and command from read CPU
    mcWrite : "udtMCWrite";  // Block mode and command directives from write CPU
END_VAR

BEGIN
NETWORK
TITLE = Auto Mode on CPU startup
    //------------------------------------------------------------------------//
    // RESTART   RESTART   RESTART   RESTART   RESTART   RESTART   RESTART    //
    // RESTART   RESTART   RESTART   RESTART   RESTART   RESTART   RESTART    //
    //                                                                        //
    // Set the mode to Auto if CPU has restarted:                             //
    //------------------------------------------------------------------------//
    A "flagFirstScanRestart";
    JCN _a;
    L "dbCONST".BLK.MODE.AUTO;
    T #mcWrite.MODE;
_a:   NOP 0;

NETWORK
TITLE = Mode Auto
    //------------------------------------------------------------------------//
    // MODE   MODE   MODE   MODE   MODE   MODE   MODE   MODE   MODE   MODE    //
    // MODE   MODE   MODE   MODE   MODE   MODE   MODE   MODE   MODE   MODE    //
    //                                                                        //
    // Get the mode of the module:                                            //
    //------------------------------------------------------------------------//
    A(;
    L #mcWrite.MODE;
    L "dbCONST".BLK.MODE.AUTO;
    ==I;
    );
    = #mcRead.modeAUTO;

NETWORK
TITLE = Mode Manual
    A(;
    L #mcWrite.MODE;
    L "dbCONST".BLK.MODE.MANUAL;
    ==I;
    );
    = #mcRead.modeMANUAL;

NETWORK
TITLE = Mode Out Of Service
    A(;
    L #mcWrite.MODE;
    L "dbCONST".BLK.MODE.OOS;
    ==I;
    );
    = #mcRead.modeOOS;

NETWORK
TITLE = Interlock Flag
    //------------------------------------------------------------------------//
    // Set boolean interlock flag if any interlock condition exists:          //
    // Instance Specific Non-Critical Interlocks can be bypassed by Manual    //
    // Override command from Operator Station (HMI):                          //
    //------------------------------------------------------------------------//
    O #mcRead.CRIL;
    O(;
    A #mcRead.NCRIL;
    AN #mcWrite.MAN_OVERRIDE;
    );
    = #mcRead.INTERLOCK;

NETWORK
TITLE = Operator Attention Flag
    //------------------------------------------------------------------------//
    // If not in Auto or any interlock then the block needs attention:        //
    //------------------------------------------------------------------------//
    O #mcRead.modeMANUAL;
    O #mcRead.modeOOS;
    O #mcRead.INTERLOCK;
    = #mcRead.needAttention;

NETWORK
TITLE = Availability Flag
    //------------------------------------------------------------------------//
    // Set boolean available flag if the OWNER ID is zero:                    //
    //------------------------------------------------------------------------//
    A(;
    L #mcWrite.OWNER;
    L 0;
    ==I;
    );
    = #mcRead.isAvailable;

NETWORK
TITLE = Send safe command in case of any interlock or failure
    //------------------------------------------------------------------------//
    // Send safe command if any interlock or startup:                         //
    //------------------------------------------------------------------------//
    O "flagFirstScanRestart";
    O #mcRead.INTERLOCK;
    JCN _b;
    L #mcRead.CMD_SAFE;
    T #mcWrite.CMD;
_b:   NOP 0;
END_FUNCTION
