//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//                Automatically Generated File - Do Not Edit                  //
//----------------------------------------------------------------------------//
// Description:                                                               //
// This file contains globally addressable program constants and structures.  //
// The safe command must match the safe state index number.                   //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      20-Jan-2018 NA        Reboot for S7-1500.             //
// 0.1 Khairul Basar    05-Oct-2009 NA        Inital Design.                  //
//----------------------------------------------------------------------------//
DATA_BLOCK "dbCONST"
TITLE = Global program constants
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : REO
NAME : dbCONST
VERSION : 2.0

STRUCT
    CHRONO : STRUCT                    // Chronological functions
        OB1_prev_cycle : INT ;
        s5T_BAS0_01S : WORD ;              //S5 timer Base 0.01 sec= 2#0000 0000 0000 0000
        s5T_BAS0_10s : WORD  := W#16#1000; //S5 timer Base 0.10 sec= 2#0001 0000 0000 0000
        s5T_BAS1_00s : WORD  := W#16#2000; //S5 timer Base 1.00 sec= 2#0010 0000 0000 0000
        s5T_BAS10_s : WORD  := W#16#3000;  //S5 timer Base 10.0 sec= 2#0011 0000 0000 0000
        CPU_TIME : TIME_OF_DAY ;
        CPU_DATE : DATE ;
        NEW_TIME : TIME_OF_DAY  := TOD#17:55:0.000;
        NEW_DATE : DATE  := D#2009-10-15;
        DATE_TIME_SYNCH : STRUCT
            DATE_TIME : DATE_AND_TIME ;
            RESERVE : ARRAY  [0 .. 3 ] OF BYTE ;
        END_STRUCT ;
        DATE_TIME : DATE_AND_TIME ;
        WEEKDAY : INT ;                // 1=SUNDAY, 7=SATURDAY
    END_STRUCT ;
    SEL : STRUCT                       // Selection structures
        FLZ : STRUCT
            NONE : INT  := 0;
            FL1 : INT  := 1;
            FL2 : INT  := 2;
        END_STRUCT ;
        GAS : STRUCT
            NONE : INT  := 0;
            HPCA : INT  := 1;
            LPCA : INT  := 2;
            VENT : INT  := 3;
            VACUUM : INT  := 4;
            DRAIN : INT  := 5;
        END_STRUCT ;
        LIQUID : STRUCT
            NONE : INT  := 0;
            WFI : INT  := 1;
            PW : INT  := 2;
            PSWFI : INT  := 3;
            PSPW : INT  := 4;
        END_STRUCT ;
        MX : STRUCT
            NONE : INT  := 0;
            M1 : INT  := 1;
            M2 : INT  := 2;
        END_STRUCT ;
        SY : STRUCT
            NONE : INT  := 0;
            S1 : INT  := 1;
            S2 : INT  := 2;
        END_STRUCT ;
    END_STRUCT ;
    SEQ : STRUCT                       // Generic SFC structure
        CMD : STRUCT                   // Sequencer command common to all
            STOP : INT  := 0;
            START : INT  := 1;
            PAUSE : INT  := 2;
            RESUME : INT  := 3;
            ABORT : INT  := 6;         // Or Go to Last Step
            ACKNOWLEDGE_ERR : INT  := 7;
        END_STRUCT ;
        MODE : STRUCT
            MANUAL : INT  := 1;
            AUTO : INT  := 2;
            OOS : INT  := 3;
        END_STRUCT ;
        SAFE : STRUCT
            CMD : INT  := 0;           // Substate for safe state
        END_STRUCT ;
        STATE : STRUCT                 // Sequencer command common to all
            OFF_IDLE : INT := 0;
            STARTED : INT  := 1;
            PAUSED : INT  := 2;
            RESUMED : INT  := 3;
            WRMODE : INT  := 4;        // Wrong Mode selected
            WRCMD : INT  := 5;         // Wrong Command selected
            ABORTED : INT  := 6;       // Or Go to Last Step
            ACKNOWLEDGED : INT  := 7;
            COMPLETED : INT  := 8;
        END_STRUCT ;
        STEP_TIME : TIME  := T#1M;     // Step finishing time delay
    END_STRUCT ;
    BLK : STRUCT                       // Generic block structure
        CMD : STRUCT
            STOP : INT  := 0;
            START : INT  := 1;
            RESTART : INT  := 2;       // Restart command without going through STOPPED
        END_STRUCT ;
        MODE : STRUCT
            MANUAL : INT  := 1;
            AUTO : INT  := 2;
            OOS : INT  := 3;
        END_STRUCT ;
        SAFE : STRUCT
            CMD : INT  := 0;           // Substate for safe state
        END_STRUCT ;
        STATE : STRUCT
            STOPPED : INT  := 0;       // Block stopped
            INTERLOCKED : INT  := 51;  // Block interlocked
            ERROR : INT  := 97;        // Block substate had an error and not finished
            ABORTED : INT  := 98;      // Block substate unsucessfully finished,
            COMPLETED : INT  := 99;    // Block substate successfully finished, Finished after SFC (if any) is complete.
        END_STRUCT ;
        HYGIENE : STRUCT               // Hygiene Status
            USED : INT  := 1;
            CIP : INT  := 2;
            CLEAN : INT  := 3;
            CLEAN_TIMEOUT : INT  := 4;
            SIP : INT  := 5;
            STERILE : INT  := 6;
            STERILE_TIMEOUT : INT  := 7;
            BATCH : INT  := 8;
        END_STRUCT ;
        AL1 : STRUCT                   // Generic analog input
            CMD : STRUCT
                ENABLE : INT  := 1;    // Always Enabled
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                ENABLED : INT  := 1;   // Always Enabled
                FAULT : INT  := 2;
            END_STRUCT ;
        END_STRUCT ;
        DI1 : STRUCT                   // Alarm digital input Normally ON
            CMD : STRUCT
                ENABLE : INT  := 1;    // Always Enabled
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                ENABLED : INT  := 1;
                ALARM : INT  := 2;
            END_STRUCT ;
        END_STRUCT ;
        DI2 : STRUCT                   // Alarm digital input Normally OFF
            CMD : STRUCT
                ENABLE : INT  := 1;    // Always Enabled
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                ENABLED : INT  := 1;
                ALARM : INT  := 2;
            END_STRUCT ;
        END_STRUCT ;
        DI3 : STRUCT                   // Software alarm signal
            CMD : STRUCT
                ENABLE : INT  := 1;    // Always Enabled
                PAUSE : INT  := 2;    // Always Enabled
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                ENABLED : INT  := 1;
                PAUSED : INT  := 2;
            END_STRUCT ;
        END_STRUCT ;
        HE1 : STRUCT                   // Electric heating element
            CMD : STRUCT
                DISABLE : INT  := 1;
                ENABLE : INT  := 2;
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                DISABLED : INT  := 1;
                ENABLED : INT  := 2;
                FAULT : INT  := 3;
            END_STRUCT ;
        END_STRUCT ;
        MI1 : STRUCT                   // Load Cell Mass Indicator
            CMD : STRUCT
                ENABLE : INT  := 1;    // Always Enabled
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                ENABLED : INT  := 1;   // Always Enabled
                FAULT : INT  := 2;
            END_STRUCT ;
        END_STRUCT ;
        MOD1 : STRUCT                  // Modulating control valve
            CMD : STRUCT
                DISABLE : INT  := 1;
                LOCAL : INT  := 2;     // Enable in local setpoint mode
                REMOTE : INT  := 3;    // Enable in remote setpoint mode
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                DISABLED : INT  := 1;
                LOCAL : INT  := 2;     // Enabled in local setpoint mode
                REMOTE : INT  := 3;    // Enabled in remote setpoint mode
            END_STRUCT ;
        END_STRUCT ;
        MOT1 : STRUCT                  // Vacuum pump control
            CMD : STRUCT
                STOP : INT  := 1;
                START : INT  := 2;
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                STOPPED : INT  := 1;
                RUNNING : INT  := 2;
                STARTING_STOPPING : INT  := 3;
                FAULT : INT  := 4;
            END_STRUCT ;
        END_STRUCT ;
        PC1 : STRUCT                   // Vessel ON-OFF Pressure control loop wth output valve selection
            CMD : STRUCT
                DISABLE : INT  := 1;
                ENABLE : INT  := 2;  // Enable in pressure control mode
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                DISABLED : INT  := 1;
                ENABLED : INT  := 2;  // Enabled in pressure control mode
            END_STRUCT ;
        END_STRUCT ;
        PI1 : STRUCT                   // Vessel pressure Indicator with alarms and Interlocks
            CMD : STRUCT
                ENABLE : INT  := 1;    // Always Enabled
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                ENABLED : INT  := 1;   // Always Enabled
                FAULT : INT  := 2;
            END_STRUCT ;
        END_STRUCT ;
        PI2 : STRUCT                   // Line mounted pressure Indicator
            CMD : STRUCT
                ENABLE : INT  := 1;    // Always Enabled
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                ENABLED : INT  := 1;   // Always Enabled
                FAULT : INT  := 2;
            END_STRUCT ;
        END_STRUCT ;
        POSx : STRUCT                  // Generic On-Off Valve
            CMD : STRUCT
                CLOSE : INT  := 1;
                OPEN : INT  := 2;
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                CLOSED : INT  := 1;
                OPENED : INT  := 2;
                TRAVEL : INT  := 3;    // Opening or Closing
                FAULT : INT  := 4;     // Failed to Open or Failed to Close
            END_STRUCT ;
        END_STRUCT ;
        POS1 : STRUCT                  // On-Off Valve with single output without feedback
            CMD : STRUCT
                CLOSE : INT  := 1;
                OPEN : INT  := 2;
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                CLOSED : INT  := 1;
                OPENED : INT  := 2;
                TRAVEL : INT  := 3;    // Opening or Closing
                FAULT : INT  := 4;     // Failed to Open or Failed to Close
            END_STRUCT ;
        END_STRUCT ;
        POS2 : STRUCT                  // On-Off Valve with single output with Closed feedback
            CMD : STRUCT
                CLOSE : INT  := 1;
                OPEN : INT  := 2;
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                CLOSED : INT  := 1;
                OPENED : INT  := 2;
                TRAVEL : INT  := 3;    // Opening or Closing
                FAULT : INT  := 4;     // Failed to Open or Failed to Close
            END_STRUCT ;
        END_STRUCT ;
        POS3 : STRUCT                  // On-Off Valve with single output with Opened feedback
            CMD : STRUCT
                CLOSE : INT  := 1;
                OPEN : INT  := 2;
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                CLOSED : INT  := 1;
                OPENED : INT  := 2;
                TRAVEL : INT  := 3;    // Opening or Closing
                FAULT : INT  := 4;     // Failed to Open or Failed to Close
            END_STRUCT ;
        END_STRUCT ;
        POS4 : STRUCT                  // On-Off Valve with single output with both Closed and Opened feedback
            CMD : STRUCT
                CLOSE : INT  := 1;
                OPEN : INT  := 2;
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                CLOSED : INT  := 1;
                OPENED : INT  := 2;
                TRAVEL : INT  := 3;    // Opening or Closing
                FAULT : INT  := 4;     // Failed to Open or Failed to Close
            END_STRUCT ;
        END_STRUCT ;
        SIC1 : STRUCT                  // Agitator speed control
            CMD : STRUCT
                DISABLE : INT  := 1;
                ENABLE : INT  := 2;
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                DISABLED : INT  := 1;
                ENABLED : INT  := 2;
                STOPPED : INT  := 3;
                RUNNING : INT  := 4;
                FAULT : INT  := 5;     // Fault state
            END_STRUCT ;
        END_STRUCT ;
        TC1 : STRUCT                   // Cooling only temperature control
            CMD : STRUCT
                DISABLE : INT  := 1;
                ENABLE : INT  := 2;
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                DISABLED : INT  := 1;
                ENABLED : INT  := 2;
            END_STRUCT ;
        END_STRUCT ;
        TI1 : STRUCT                   // Vessel temperature Indicator with alarms & Interlocks
            CMD : STRUCT
                ENABLE : INT  := 1;    // Always Enabled
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                ENABLED : INT  := 1;   // Always Enabled
                FAULT : INT  := 2;     // Fault state
            END_STRUCT ;
        END_STRUCT ;
        TI2 : STRUCT                   // Line temperature Indicator
            CMD : STRUCT
                ENABLE : INT  := 1;    // Always Enabled
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                ENABLED : INT  := 1;   // Always Enabled
                FAULT : INT  := 2;     // Fault state
            END_STRUCT ;
        END_STRUCT ;
        VS1 : STRUCT                   // Vacuum system control
            CMD : STRUCT
                DISABLE : INT  := 1;
                ENABLE : INT  := 2;
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command
            END_STRUCT ;
            STATE : STRUCT
                DISABLED : INT  := 1;
                ENABLED : INT  := 2;
                FAULT : INT  := 3;
            END_STRUCT ;
        END_STRUCT ;
        ZSC1 : STRUCT                  // Manway closed indication and alarm
            CMD : STRUCT
                CLOSE : INT  := 1;
                OPEN : INT  := 2;
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 1;       // Class safe command is no change
            END_STRUCT ;
            STATE : STRUCT
                CLOSED : INT  := 1;
                OPENED : INT  := 2;
                MISMATCH : INT  := 3;
            END_STRUCT ;
        END_STRUCT ;
        ZSC2 : STRUCT                  // Flow path connection indication
            CMD : STRUCT
                IN : INT  := 1;
                OUT : INT  := 2;
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 2;       // Class safe command is no change
            END_STRUCT ;
            STATE : STRUCT
                IN : INT  := 1;
                OUT : INT  := 2;
                MISMATCH : INT  := 3;
            END_STRUCT ;
        END_STRUCT ;
@@TEMPLATE_BEGIN|PARENT@@
        @@CLASS@@ : STRUCT             // @@DESCRIPTION@@
            CMD : STRUCT
                STOP : INT  := 0;
                START : INT  := 1;
                RESTART : INT  := 2;       // Restart command without going through STOPPED
            END_STRUCT ;
            SAFE : STRUCT
                CMD : INT  := 0;       // Substate for safe state
            END_STRUCT ;
            STATE : STRUCT
                STOPPED : INT  := 0;       // Block stopped
                INTERLOCKED : INT  := 51;  // Block interlocked
                ERROR : INT  := 97;        // Block substate had an error and not finished
                ABORTED : INT  := 98;      // Block substate unsuccessfully finished,
                COMPLETED : INT  := 99;    // Block substate successfully finished, Finished after SFC (if any) is complete.
            END_STRUCT ;
            SUBS : STRUCT
@@ATTR_BEGIN|STATE@@
                @@STATE@@ : INT  := @@COUNTERATTR|1@@;
@@ATTR_END|STATE@@
            END_STRUCT ;
        END_STRUCT ;
@@TEMPLATE_END@@
        ID : STRUCT                    // Resource arbitration
            AVAILABLE : INT;           // Block is available for parent acquisition
@@TEMPLATE_BEGIN|UNIQUEID@@
            @@INSTANCE@@ : INT;
@@TEMPLATE_END@@
        END_STRUCT ;
    END_STRUCT ;
END_STRUCT ;

BEGIN
    BLK.ID.AVAILABLE := 0;
@@TEMPLATE_BEGIN|UNIQUEID@@
    BLK.ID.@@INSTANCE@@ := @@ID@@;
@@TEMPLATE_END@@

END_DATA_BLOCK
