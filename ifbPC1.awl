//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//                Automatically Generated File - Do Not Edit                  //
//----------------------------------------------------------------------------//
// Class:       ifbPC1                                                        //
// Description: Instances of PC1                                              //
//                                                                            //
// Vessel ON/OFF pressure control loop with output valve selection.           //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      05-Jan-2018 NA        Reboot for S7-1500.             //
// 0.7 Khairul Basar    12-Oct-2009 CC-09/016 IN_REQ_MODE is assigned to      //
//                                            Toggle.                         //
// 0.6 Khairul Basar    16-Sep-2009 CC-09/016 Duplicate Input Parameters      //
//                                            deleted auto/manual both now    //
//                                            using same parameters,Interface //
//                                            FC used for Bumpless changeover.//
// 0.5 Khairul Basar    15-Sep-2009 CC-09/016 PC1 changed.                    //
// 0.4 Khairul Basar    14-Sep-2009 CC-09/016 PC_1110 Setpoint assignment     //
//                                            corrected.                      //
// 0.3 Khairul Basar    09-Sep-2009 CC-09/016 Ref1.                           //
// 0.2 Khairul Basar    01-Sep-2009 CC-09/016 OUT_Qx(BOOL) is changed to      //
//                                            CMD_Qx (INT) & are linked to    //
//                                            POS1valves. Measure variable is //
//                                            lined with PI1 Measure variable.//
//                                            CRIL Interfaced.               //
// 0.1 Khairul Basar    03-Aug-2009           Initial design.                 //
//                                                                            //
// Ref1:Manual and Auto mode is programed.For Manual & auto separate Setpoint,//
// Gas select, & P_CTRL variable created and programmed accordingly.Instance  //
// parameter calls updated."idbPI1".PI_1010.INTERLOCK is linked with NCRIL.  //
//----------------------------------------------------------------------------//
// Index   Instance    Description                                            //
@@TEMPLATE_BEGIN|createInstancesGlobal@@
// @@IDX@@       @@INSTANCE@@      @@DESCRIPTION@@
@@TEMPLATE_END@@
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "ifbPC1"
TITLE = Instances of PC1 pressure controller
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : REO
NAME : ifbPC1
VERSION : 2.0

//----------------------------------------------------------------------------//
// Declare the instance objects of the class:                                 //
//----------------------------------------------------------------------------//
VAR
@@TEMPLATE_BEGIN|createClassNone@@
@@ATTR_BEGIN|numInstances@@
    p : Array[0..@@MAXITEM@@] of "udtPC1";
@@ATTR_END|numInstances@@
@@TEMPLATE_END@@
END_VAR

BEGIN
@@TEMPLATE_BEGIN|createInstances@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@DESCRIPTION@@ Critical Interlocks
    //------------------------------------------------------------------------//
    // INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INST //
    // INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INST //
    //                                                                        //
    // Get the critical interlock if there is one. If not set alwaysLow:      //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|CRIL_EXISTS@@
@@ATTR_DEFAULT_BEGIN@@
    A "alwaysLow";
@@ATTR_DEFAULT_END@@
@@ATTR_BEGIN|CRIL_TARGET@@
    A "idbCRIL".p[@@IDXIL@@].INTERLOCK;
@@ATTR_END|CRIL_TARGET@@
@@ATTR_END|CRIL_EXISTS@@
    = #p[@@IDX@@].origin.mc.CRIL;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@DESCRIPTION@@ Non-Critical Interlocks
    //------------------------------------------------------------------------//
    // Get the non-critical interlock if there is one. If not set alwaysLow:  //
    //------------------------------------------------------------------------//

@@ATTR_BEGIN|NCRIL_EXISTS@@
@@ATTR_DEFAULT_BEGIN@@
    A "alwaysLow";
@@ATTR_DEFAULT_END@@
@@ATTR_BEGIN|NCRIL_TARGET@@
    A "idbNCRIL".p[@@IDXIL@@].INTERLOCK;
@@ATTR_END|NCRIL_TARGET@@
@@ATTR_END|NCRIL_EXISTS@@
    = #p[@@IDX@@].origin.mc.NCRIL;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Unique ID
    //------------------------------------------------------------------------//
    // Set the instance unique ID:                                            //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.ID.@@INSTANCE@@;
    T #p[@@IDX@@].origin.mc.ME;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Owner
    //------------------------------------------------------------------------//
    // Set the instance owner:                                                //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.ID.@@PARENT@@;
    T #p[@@IDX@@].owner.mc.OWNER;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Block Origin
    //------------------------------------------------------------------------//
    // This block can only reside within this CPU:                            //
    //------------------------------------------------------------------------//
    A "alwaysHigh";
    = #p[@@IDX@@].origin.mc.isOriginBlock;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Owner Origin
    //------------------------------------------------------------------------//
    // This block can only be owned by a parent block in this CPU:            //
    //------------------------------------------------------------------------//
    A "alwaysHigh";
    = #p[@@IDX@@].owner.mc.isOriginOwner;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Safe Command on restart
    //------------------------------------------------------------------------//
    // Set the safe command if restarting the PLC:                            //
    //------------------------------------------------------------------------//
    A "flagFirstScanRestart";
    JCN _notRestart_@@COUNTERTEMPLATE|1@@;
    L "dbCONST".BLK.PC1.SAFE.CMD;
    T #p[@@IDX@@].origin.mc.CMD_SAFE;
_notRestart_@@COUNTERTEMPLATE@@:   NOP 0;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Deadband values
    //------------------------------------------------------------------------//
    // Set the instance pressure deadband values for valve open and close:    //
    //------------------------------------------------------------------------//
    L 0.1;
    T #p[@@IDX@@].owner.DB_L;
    T #p[@@IDX@@].owner.DB_H;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Pressure interlock
    //------------------------------------------------------------------------//
    // Set the instance pressure interlock:                                   //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|LINK@@
    A "idb@@PILINKCLASS@@".p[@@PILINKIDX@@].origin.mc.INTERLOCK;
@@ATTR_END|LINK@@
    = #p[@@IDX@@].origin.PI1_INTERLOCK;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Pressure measured value
    //------------------------------------------------------------------------//
    // Set the instance pressure measured value from the PI1:                 //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|LINK@@
    L "idb@@PILINKCLASS@@".p[@@PILINKIDX@@].origin.ai.PV;
@@ATTR_END|LINK@@
    T #p[@@IDX@@].origin.PI1_PV;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : DRAIN valve mode and command
    //------------------------------------------------------------------------//
    // Set the instance pressure measured value from the PI1:                 //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|LINK@@
    CALL MOVE
    {value_type := 'udtMCOrigin'}
    (   IN                   := "idb@@DRAINLINKCLASS@@".p[@@DRAINLINKIDX@@].origin.mc ,
        OUT                  := #p[@@IDX@@].origin.mcDRAIN
    );
    CALL MOVE
    {value_type := 'udtMCOwner'}
    (   IN                   := "idb@@DRAINLINKCLASS@@".p[@@DRAINLINKIDX@@].owner.mc ,
        OUT                  := #p[@@IDX@@].origin.mcoDRAIN
    );
@@ATTR_END|LINK@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : HPCA valve mode and command
    //------------------------------------------------------------------------//
    // Copy the HPCA valve mode and command structures to the PC1 instance:   //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|LINK@@
    CALL MOVE
    {value_type := 'udtMCOrigin'}
    (   IN                   := "idb@@HPCALINKCLASS@@".p[@@HPCALINKIDX@@].origin.mc ,
        OUT                  := #p[@@IDX@@].origin.mcHPCA
    );
    CALL MOVE
    {value_type := 'udtMCOwner'}
    (   IN                   := "idb@@HPCALINKCLASS@@".p[@@HPCALINKIDX@@].owner.mc ,
        OUT                  := #p[@@IDX@@].origin.mcoHPCA
    );
@@ATTR_END|LINK@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : LPCA valve mode and command
    //------------------------------------------------------------------------//
    // Copy the LPCA valve mode and command structures to the PC1 instance:   //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|LINK@@
    CALL MOVE
    {value_type := 'udtMCOrigin'}
    (   IN                   := "idb@@LPCALINKCLASS@@".p[@@LPCALINKIDX@@].origin.mc ,
        OUT                  := #p[@@IDX@@].origin.mcLPCA
    );
    CALL MOVE
    {value_type := 'udtMCOwner'}
    (   IN                   := "idb@@LPCALINKCLASS@@".p[@@LPCALINKIDX@@].owner.mc ,
        OUT                  := #p[@@IDX@@].origin.mcoLPCA
    );
@@ATTR_END|LINK@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : VACUUM valve mode and command
    //------------------------------------------------------------------------//
    // Copy the VACUUM valve mode and command structures to the PC1 instance: //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|LINK@@
    CALL MOVE
    {value_type := 'udtMCOrigin'}
    (   IN                   := "idb@@VACUUMLINKCLASS@@".p[@@VACUUMLINKIDX@@].origin.mc ,
        OUT                  := #p[@@IDX@@].origin.mcVACUUM
    );
    CALL MOVE
    {value_type := 'udtMCOwner'}
    (   IN                   := "idb@@VACUUMLINKCLASS@@".p[@@VACUUMLINKIDX@@].owner.mc ,
        OUT                  := #p[@@IDX@@].origin.mcoVACUUM
    );
@@ATTR_END|LINK@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : VENT valve mode and command
    //------------------------------------------------------------------------//
    // Copy the VENT valve mode and command structures to the PC1 instance:   //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|LINK@@
    CALL MOVE
    {value_type := 'udtMCOrigin'}
    (   IN                   := "idb@@VENTLINKCLASS@@".p[@@VENTLINKIDX@@].origin.mc ,
        OUT                  := #p[@@IDX@@].origin.mcVENT
    );
    CALL MOVE
    {value_type := 'udtMCOwner'}
    (   IN                   := "idb@@VENTLINKCLASS@@".p[@@VENTLINKIDX@@].owner.mc ,
        OUT                  := #p[@@IDX@@].origin.mcoVENT
    );
@@ATTR_END|LINK@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@DESCRIPTION@@
    //------------------------------------------------------------------------//
    // Call the class function to process each instance:                      //
    //------------------------------------------------------------------------//
    CALL "fc@@CLASS@@"
    (   p                    := #p[@@IDX@@]
    );

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Ouput valve commands
    //------------------------------------------------------------------------//
    // Set the instance output commands for the valves to the field:          //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|LINK@@
    L #p[@@IDX@@].origin.mcoDRAIN.CMD;
    T "idb@@DRAINLINKCLASS@@".p[@@DRAINLINKIDX@@].owner.mc.CMD;
    L #p[@@IDX@@].origin.mcoHPCA.CMD;
    T "idb@@HPCALINKCLASS@@".p[@@HPCALINKIDX@@].owner.mc.CMD;
    L #p[@@IDX@@].origin.mcoLPCA.CMD;
    T "idb@@LPCALINKCLASS@@".p[@@LPCALINKIDX@@].owner.mc.CMD;
    L #p[@@IDX@@].origin.mcoVACUUM.CMD;
    T "idb@@VACUUMLINKCLASS@@".p[@@VACUUMLINKIDX@@].owner.mc.CMD;
    L #p[@@IDX@@].origin.mcoVENT.CMD;
    T "idb@@VENTLINKCLASS@@".p[@@VENTLINKIDX@@].owner.mc.CMD;
@@ATTR_END|LINK@@

@@TEMPLATE_END@@
END_FUNCTION_BLOCK
