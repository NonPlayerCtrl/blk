//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//                Automatically Generated File - Do Not Edit                  //
//----------------------------------------------------------------------------//
// Class:       ifbMOT1                                                       //
// Description: Instances of MOT1                                             //
//                                                                            //
// Vacuum Pump control.                                                       //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      05-Jan-2018 NA        Reboot for S7-1500.             //
// 0.6 Khairul Basar    12-Oct-2009 CC-09/016 IN_REQ_MODE is assigned to      //
//                                            Toggle.                         //
// 0.5 Gus Abdallah     01-Oct-2009 CC-09/016 Interlock are CM processed.     //
// 0.4 Khairul Basar    17-Sep-2009 CC-09/016 Instead of Auto/Man dual command//
//                                            only CMD is configured.         //
// 0.3 Khairul Basar    09-Sep-2009 CC-09/016 MOT1 updated as per Ref1.       //
// 0.2 Khairul Basar    31-Aug-2009 CC-09/016 Interlocks are assigned.        //
// 0.1 Khairul Basar    31-Aug-2009           Initial design.                 //
//                                                                            //
// Ref1: Instead of using one timer, another timer is created. One timer will //
// start when there is Start command, another will start when Stop command.   //
// FAULT_S will be setting so operator acknowledge signal must reset that     //
// flag to be able restart the MOT1 again. Start and Stop command divided     //
// into two networks NW2 & 3.                                                 //
//----------------------------------------------------------------------------//
// Index   Instance    Description                                            //
@@TEMPLATE_BEGIN|createInstancesGlobal@@
// @@IDX@@       @@INSTANCE@@      @@DESCRIPTION@@
@@TEMPLATE_END@@
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "ifbMOT1"
TITLE = MOT1:Instance
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : REO
NAME : ifbMOT1
VERSION : 2.0

//----------------------------------------------------------------------------//
// Declare the instance objects of the class:                                 //
//----------------------------------------------------------------------------//
VAR
@@TEMPLATE_BEGIN|createClassNone@@
@@ATTR_BEGIN|numInstances@@
    f : Array[0..@@MAXITEM@@] of "fbMOT1";
@@ATTR_END|numInstances@@
@@TEMPLATE_END@@
END_VAR

BEGIN
@@TEMPLATE_BEGIN|createInstances@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@DESCRIPTION@@ Critical Interlocks
    //------------------------------------------------------------------------//
    // INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INST //
    // INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INST //
    //                                                                        //
    // Get the critical interlock if there is one. If not set alwaysLow:      //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|CRIL_EXISTS@@
@@ATTR_DEFAULT_BEGIN@@
    A "alwaysLow";
@@ATTR_DEFAULT_END@@
@@ATTR_BEGIN|CRIL_TARGET@@
    A "idbCRIL".p[@@IDXIL@@].INTERLOCK;
@@ATTR_END|CRIL_TARGET@@
@@ATTR_END|CRIL_EXISTS@@
    = #f[@@IDX@@].p.read.mc.CRIL;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@DESCRIPTION@@ Non-Critical Interlocks
    //------------------------------------------------------------------------//
    // Get the non-critical interlock if there is one. If not set alwaysLow:  //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|NCRIL_EXISTS@@
@@ATTR_DEFAULT_BEGIN@@
    A "alwaysLow";
@@ATTR_DEFAULT_END@@
@@ATTR_BEGIN|NCRIL_TARGET@@
    A "idbNCRIL".p[@@IDXIL@@].INTERLOCK;
@@ATTR_END|NCRIL_TARGET@@
@@ATTR_END|NCRIL_EXISTS@@
    = #f[@@IDX@@].p.read.mc.NCRIL;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Unique ID
    //------------------------------------------------------------------------//
    // Set the instance unique ID:                                            //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.ID.@@INSTANCE@@;
    T #f[@@IDX@@].p.read.mc.ME;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Owner ID
    //------------------------------------------------------------------------//
    // Set the instance Owner ID:                                             //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.ID.@@PARENT@@;
    T #f[@@IDX@@].p.write.mc.OWNER;

@@ATTR_BEGIN|FLOWPATH@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@CLASS@@ is a Flowpath device
    //------------------------------------------------------------------------//
    // This class of device is a FLOWPATH device where the state must equal   //
    // the command once set by the parent:                                    //
    //------------------------------------------------------------------------//
    A "alwaysHigh";
    = #f[@@IDX@@].p.read.mc.FLOWPATH;
@@ATTR_END|FLOWPATH@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Block Read
    //------------------------------------------------------------------------//
    // This block can only reside within this CPU:                            //
    //------------------------------------------------------------------------//
    A "alwaysHigh";
    = #f[@@IDX@@].p.read.mc.isMaster;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Block Write
    //------------------------------------------------------------------------//
    // This block can only be owned by a parent block in this CPU:            //
    //------------------------------------------------------------------------//
    A "alwaysHigh";
    = #f[@@IDX@@].p.write.mc.isMaster;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Safe Command on restart
    //------------------------------------------------------------------------//
    // Set the safe command if restarting the PLC:                            //
    //------------------------------------------------------------------------//
    A "flagFirstScanRestart";
    JCN _notRestart_@@COUNTERTEMPLATE|1@@;
    L "dbCONST".BLK.MOT1.SAFE.CMD;
    T #f[@@IDX@@].p.read.mc.CMD_SAFE;
_notRestart_@@COUNTERTEMPLATE@@:   NOP 0;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Breaker fault input
    //------------------------------------------------------------------------//
    // Set the instance breaker fault input value:                            //
    //------------------------------------------------------------------------//
    A "@@INSTANCE@@-BRK";
    = #f[@@IDX@@].p.read.BRK;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Breaker fault input
    //------------------------------------------------------------------------//
    // Set the instance breaker fault input value:                            //
    //------------------------------------------------------------------------//
    A "@@INSTANCE@@-RUN";
    = #f[@@IDX@@].p.read.FB_RUN;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Three phase relay fault input
    //------------------------------------------------------------------------//
    // Set the instance three phase relay fault input value:                  //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|LINK@@
    A "@@PHRLINKINSTANCE@@-DI";
@@ATTR_END|LINK@@
    = #f[@@IDX@@].p.read.PHR;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@DESCRIPTION@@
    //------------------------------------------------------------------------//
    // Call the class function to process each instance:                      //
    //------------------------------------------------------------------------//
    CALL #f[@@IDX@@];

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Output Command
    //------------------------------------------------------------------------//
    // Set the instance output command to the field:                          //
    //------------------------------------------------------------------------//
    A #f[@@IDX@@].p.read.OUT_Q;
    = "@@INSTANCE@@-CMD";

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Send the alarm bits to the global DB
    //------------------------------------------------------------------------//
    // Transfer the class event log message bits to the global DB:            //
    //------------------------------------------------------------------------//
    L #f[@@IDX@@].p.read.mc.ALARM;
    T "dbEVENT".alarmBlock.alarm_@@INSTANCE@@;

@@TEMPLATE_END@@

@@TEMPLATE_BEGIN|createInstancesForeign@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Block Read
    //------------------------------------------------------------------------//
    // This block can only reside in another CPU:                             //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #f[@@IDX@@].p.read.mc.isMaster;

@@ATTR_BEGIN|ISOWNED@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Block Write
    //------------------------------------------------------------------------//
    // This block can only be owned by a parent block in another CPU:         //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #f[@@IDX@@].p.write.mc.isMaster;
@@ATTR_END|ISOWNED@@

@@TEMPLATE_END@@

END_FUNCTION_BLOCK
