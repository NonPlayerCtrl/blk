//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Class:       fbZSC2                                                        //
// Description:                                                               //
// Flowpath connection indication.                                            //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      30-Jan-2018 NA        Reboot for S7-1500.             //
// 0.4 Gerald Kontriner 09-Oct-2009 CC-09/016 MON_MISMATCH Logic.             //
// 0.3 Khairul Basar    02-Oct-2009 CC-09/016 NW3 DI changed from NC to NO.   //
// 0.2 Khairul Basar    04-Sep-2009 CC-09/016 Mode=1 initialized.             //
// 0.1 Khairul Basar    03-Aug-2009           Initial design.                 //
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "fbZSC2"
TITLE = ZSC2 : Flowpath connection indication
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : REO
NAME : fbZSC2
VERSION : 2.0

//----------------------------------------------------------------------------//
// Declare interface and variables:                                           //
//----------------------------------------------------------------------------//
VAR
    p : "udtZSC2";           // Block data interface
END_VAR

VAR DB_SPECIFIC
    b { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..15] of Bool;
    w { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} AT b : Word;
END_VAR

VAR_TEMP
    cmdIN : Bool;
    cmdOUT : Bool;
    tMismatch : Bool;        // Temporary mismatch variable
    tPV : Bool;              // Temporary processed DI signal
END_VAR

BEGIN
NETWORK
TITLE = Safe Command on restart
    //------------------------------------------------------------------------//
    // Set the safe command if restarting the PLC:                            //
    //------------------------------------------------------------------------//
    A "flagFirstScanRestart";
    JCN _noRestart;
    L "dbCONST".BLK.ZSC2.SAFE.CMD;
    T #p.write.mc.CMD;
    T #p.read.mc.CMD_SAFE;
_noRestart:   NOP 0;

NETWORK
TITLE = Call Mode and Command handling function
    //------------------------------------------------------------------------//
    // MODE AND COMMAND   MODE AND COMMAND   MODE AND COMMAND   MODE AND COMM //
    // MODE AND COMMAND   MODE AND COMMAND   MODE AND COMMAND   MODE AND COMM //
    //                                                                        //
    // Process the standard block functions for command, mode, interlock and  //
    // state:                                                                 //
    //------------------------------------------------------------------------//
    CALL "fcModeCmd"
    (   mcRead             := #p.read.mc ,
        mcWrite              := #p.write.mc
    );

NETWORK
TITLE = Get Device command if IN
    //------------------------------------------------------------------------//
    // COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND    //
    // COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND    //
    //                                                                        //
    // CMD is IN:                                                             //
    //------------------------------------------------------------------------//
    A(;
    L "dbCONST".BLK.ZSC2.CMD.IN;
    L #p.write.mc.CMD;
    ==I;
    );
    = #cmdIN;

NETWORK
TITLE = Get Device command if OUT
    //------------------------------------------------------------------------//
    // COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND    //
    // COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND    //
    //                                                                        //
    // CMD is OUT:                                                            //
    //------------------------------------------------------------------------//
    A(;
    L "dbCONST".BLK.ZSC2.CMD.OUT;
    L #p.write.mc.CMD;
    ==I;
    );
    = #cmdOUT;

NETWORK
TITLE = Process Digital Input Signal
    //------------------------------------------------------------------------//
    // INPUTS   INPUTS   INPUTS   INPUTS   INPUTS   INPUTS   INPUTS   INPUTS  //
    // INPUTS   INPUTS   INPUTS   INPUTS   INPUTS   INPUTS   INPUTS   INPUTS  //
    //                                                                        //
    // Calculate the process value based on input:                            //
    //------------------------------------------------------------------------//
    A #p.read.DI_Auto;
    = #tPV;
    = #p.read.PV;

NETWORK
TITLE = Check if MISMATCH if state does not follow command
    //------------------------------------------------------------------------//
    // If commanded to IN and switch not on or commanded to OUT and switch on;//
    //------------------------------------------------------------------------//
    O(;
    A #cmdIN;
    AN #tPV;
    );
    O(;
    A #cmdOUT;
    A #tPV;
    );
    = tMismatch;

NETWORK
TITLE = Set ALARM Flag
    //------------------------------------------------------------------------//
    // ALARM   ALARM   ALARM   ALARM   ALARM   ALARM   ALARM   ALARM   ALARM  //
    // ALARM   ALARM   ALARM   ALARM   ALARM   ALARM   ALARM   ALARM   ALARM  //
    //                                                                        //
    // Alarm if mismatch and not OOS:                                         //
    //------------------------------------------------------------------------//
    A tMismatch;
    A #p.write.mc.ARMED;
    AN #p.read.mc.modeOOS;
    = #p.read.ALARM;

NETWORK
TITLE = Set Device State to IN if switch is on and command is IN
    //------------------------------------------------------------------------//
    // STATE   STATE   STATE   STATE   STATE   STATE   STATE   STATE   STATE  //
    // STATE   STATE   STATE   STATE   STATE   STATE   STATE   STATE   STATE  //
    //                                                                        //
    // IN if switch is on and commanded to be IN:                             //
    //------------------------------------------------------------------------//
    A #tPV;
    A #cmdIN;
    JCN _a;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    T #p.read.mc.STATE;
_a:   NOP 0;

NETWORK
TITLE = Set Device State to OUT if switch is on and command is OUT
    //------------------------------------------------------------------------//
    // OUT if switch is off and commanded to be OUT:                          //
    //------------------------------------------------------------------------//
    AN #tPV;
    A #cmdOUT;
    JCN _b;
    L "dbCONST".BLK.ZSC2.STATE.OUT;
    T #p.read.mc.STATE;
_b:   NOP 0;

NETWORK
TITLE = Set Device State to MISMATCH if state does not follow command
    //------------------------------------------------------------------------//
    // Mismatch if the command does not equal the state:                      //
    //------------------------------------------------------------------------//
    A tMismatch;
    JCN _c;
    L "dbCONST".BLK.ZSC2.STATE.MISMATCH;
    T #p.read.mc.STATE;
_c:   NOP 0;

NETWORK
TITLE = Pack the alarm bit
    //------------------------------------------------------------------------//
    // Pack the alarm bit into an integer for the HMI to read:                //
    //------------------------------------------------------------------------//
    A #p.read.ALARM;
    = #b[8];
    L #w;
    T #p.read.mc.ALARM;

END_FUNCTION_BLOCK
