//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Class:       fbZSC2                                                        //
// Description:                                                               //
// Flowpath connection indication.                                            //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      30-Jan-2018 NA        Reboot for S7-1500.             //
// 0.4 Gerald Kontriner 09-Oct-2009 CC-09/016 MON_MISMATCH Logic.             //
// 0.3 Khairul Basar    02-Oct-2009 CC-09/016 NW3 DI changed from NC to NO.   //
// 0.2 Khairul Basar    04-Sep-2009 CC-09/016 Mode=1 initialized.             //
// 0.1 Khairul Basar    03-Aug-2009           Initial design.                 //
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "fbZSC2"
TITLE = ZSC2 : Flowpath connection indication
{ S7_Optimized_Access := 'FALSE' }
AUTHOR : REO
NAME : fbZSC2
VERSION : 2.0

VAR_INPUT
    OWNER : Int;             // Value to be set or reset by Parent
    SERIAL : Int;            // Unique batch or CIPSIP serial number
    CRIL : Bool;            // Critical Interlock in series
    NCRIL : Bool;           // Non-critical Interlock in series
    MAN_OVERRIDE : Bool;     // Critical Interlock in series can be Override by this Input
    CMD_SAFE : Int;          // Safe command for the module
    DI_Auto : Bool;          // Input signal from Field
    DI_Manual : Bool;        // User digital signal for simulating
END_VAR

VAR_OUTPUT
    ALARM : Bool;            // Alarm Flag (0 = OK, 1 = ALARM)
    PV : Bool;               // Processed DI
END_VAR

VAR_IN_OUT
    CMD : Int;               // Command
    MODE : Int;              // Control Mode
    STATE : Int;             // Device State from dbCONST
    INTERLOCK : Bool;        // Interlock Flag (0 = Inactive, 1 = Active)
END_VAR

VAR_TEMP
    cmdIN : Bool;
    cmdOUT : Bool;
    modeAUTO : Bool;
    modeMANUAL : Bool;
    modeOOS : Bool;
    tMismatch : Bool;        // Temporary mismatch variable
    tPV : Bool;              // Temporary processed DI signal
END_VAR

BEGIN
NETWORK
TITLE = Call Mode and Command handling function
    //------------------------------------------------------------------------//
    // MODE AND COMMAND   MODE AND COMMAND   MODE AND COMMAND   MODE AND COMM //
    // MODE AND COMMAND   MODE AND COMMAND   MODE AND COMMAND   MODE AND COMM //
    //                                                                        //
    // Process the standard block functions for command, mode, interlock and  //
    // state:                                                                 //
    //------------------------------------------------------------------------//
    CALL "fcModeCmd"
    (
        CRIL                := #CRIL ,
        NCRIL               := #NCRIL ,
        MAN_OVERRIDE         := #MAN_OVERRIDE ,
        CMD_SAFE             := #CMD_SAFE ,
        modeAUTO             := #modeAUTO ,
        modeMANUAL           := #modeMANUAL ,
        modeOOS              := #modeOOS ,
        MODE                 := #MODE ,
        CMD                  := #CMD ,
        STATE                := #STATE ,
        INTERLOCK            := #INTERLOCK
    );

NETWORK
TITLE = Get Device command if IN
    //------------------------------------------------------------------------//
    // COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND    //
    // COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND    //
    //                                                                        //
    // CMD is IN
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.ZSC2.CMD.IN;
    L #CMD;
    ==I;
    = #cmdIN;

NETWORK
TITLE = Get Device command if OUT
    //------------------------------------------------------------------------//
    // COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND    //
    // COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND    //
    //                                                                        //
    // CMD is OUT:                                                           //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.ZSC2.CMD.OUT;
    L #CMD;
    ==I;
    = #cmdOUT;

NETWORK
TITLE = Process Digital Input Signal
    //------------------------------------------------------------------------//
    // INPUTS   INPUTS   INPUTS   INPUTS   INPUTS   INPUTS   INPUTS   INPUTS  //
    // INPUTS   INPUTS   INPUTS   INPUTS   INPUTS   INPUTS   INPUTS   INPUTS  //
    //                                                                        //
    // Calculate the process value based on the mode:                         //
    //------------------------------------------------------------------------//
    O(;
    A #DI_Auto;
    A #modeAUTO;
    );
    O(;
    A #DI_Manual;
    A #modeMANUAL;
    );
    = #tPV;
    = #PV;

NETWORK
TITLE = Set Device State to IN if switch is on and command is IN
    //------------------------------------------------------------------------//
    // STATE   STATE   STATE   STATE   STATE   STATE   STATE   STATE   STATE  //
    // STATE   STATE   STATE   STATE   STATE   STATE   STATE   STATE   STATE  //
    //                                                                        //
    // IN if switch is on and commanded to be IN:                             //
    //------------------------------------------------------------------------//
    A #tPV;
    A #cmdIN;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    T #STATE;

NETWORK
TITLE = Set Device State to OUT if switch is on and command is OUT
    //------------------------------------------------------------------------//
    // OUT if switch is off and commanded to be OUT:                          //
    //------------------------------------------------------------------------//
    AN #tPV;
    A #cmdOUT;
    L "dbCONST".BLK.ZSC2.STATE.OUT;
    T #STATE;

NETWORK
TITLE = Check if MISMATCH if state does not follow command
    //------------------------------------------------------------------------//
    // If commanded to IN and switch not on or commanded to OUT and switch on;//
    //------------------------------------------------------------------------//
    O(;
    A #cmdIN;
    AN #tPV;
    );
    O(;
    A #cmdOUT;
    A #tPV;
    );
    = tMismatch;

NETWORK
TITLE = Set Device State to MISMATCH if state does not follow command
    A tMismatch;
    L "dbCONST".BLK.ZSC2.STATE.MISMATCH;
    T #STATE;

NETWORK
TITLE = Set ALARM Flag
    //------------------------------------------------------------------------//
    // ALARM   ALARM   ALARM   ALARM   ALARM   ALARM   ALARM   ALARM   ALARM  //
    // ALARM   ALARM   ALARM   ALARM   ALARM   ALARM   ALARM   ALARM   ALARM  //
    //                                                                        //
    // Alarm if mismatch and not OOS:                                         //
    //------------------------------------------------------------------------//
    A tMismatch;
    AN #modeOOS;
    = #ALARM;

NETWORK
TITLE = Set INTERLOCK Flag if OUTE
    //------------------------------------------------------------------------//
    // INTERLOCK   INTERLOCK   INTERLOCK   INTERLOCK   INTERLOCK   INTERLOCK  //
    // INTERLOCK   INTERLOCK   INTERLOCK   INTERLOCK   INTERLOCK   INTERLOCK  //
    //                                                                        //
    // Set interlock if switch not made:                                      //
    //------------------------------------------------------------------------//
    AN #tPV;
    = #INTERLOCK;
END_FUNCTION_BLOCK
