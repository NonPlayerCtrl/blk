//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Description: Generic Block Common Mode and Command handling function block.//
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      28-Feb-2018 NA        Reboot for S7-1500.             //
// 0.4 Khairul Basar    05-Oct-2009 NA        Substate change will issue STOP //
// 0.3 Khairul Basar    17-Sep-2009 NA        Instead of Auto/Man command,    //
//                                            now only single COMMAND.        //
// 0.2 Khairul Basar    20-Aug-2009 NA        Ref1.                           //
// 0.1 Khairul Basar    03-Aug-2009 NA        Initial design.                 //
// Ref1.                                                                      //
// Mode change:#tMode_Changed NO is removed from the parallel path of         //
// Substate changed for not to generate #tEdgeAutoStart pulse when mode is    //
// changed.                                                                   //
//----------------------------------------------------------------------------//
FUNCTION "fcModeCmdBLK" : Void
TITLE = Stackable Block Mode, Command & Interlock handling block
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : REO
NAME : fcModeCmdBLK
VERSION : 2.0

VAR_IN_OUT
    mc : "udtModeCommand";             // General mode and command
    bmc : "udtModeCommandBLK";         // Block mode and command
END_VAR

VAR_TEMP
    edgeCommandStart : Bool;
    edgeCommandStop : Bool;
    edgeModeAuto : Bool;
    edgeModeManual : Bool;
    edgeModeOOS : Bool;
END_VAR

BEGIN
NETWORK
TITLE = Flag if block Mode just changed to Auto
    //------------------------------------------------------------------------//
    // MODE CHANGE EVENT   MODE CHANGE EVENT   MODE CHANGE EVENT   MODE CHANG //
    //                                                                        //
    // Check if the mode has just been changed to Auto if the bit positive    //
    // edge. The result will only last for one scan after the positive edge:  //
    //------------------------------------------------------------------------//
    A #mc.modeAUTO;
    FP #edgeModeAuto;
    = #bmc.eventModeAuto;

NETWORK
TITLE = Flag if block Mode just changed to Manual
    //------------------------------------------------------------------------//
    // Check if the mode has just been changed to Manual:                     //
    //------------------------------------------------------------------------//
    A #mc.modeMANUAL;
    FP #edgeModeManual;
    = #bmc.eventModeManual;

NETWORK
TITLE = Flag if block Mode just changed to Out Of Service
    //------------------------------------------------------------------------//
    // Check if the mode has just been changed to Out of Service:             //
    //------------------------------------------------------------------------//
    = #mc.modeOOS;
    FP #edgeModeOOS;
    = #bmc.eventModeOOS;

NETWORK
TITLE = Flag if a new block running substate command issued
    //------------------------------------------------------------------------//
    // START COMMAND   START COMMAND   START COMMAND   START COMMAND   START  //
    //                                                                        //
    // Check if the start command has just been issued if the bit positive    //
    // edge. The result will only last for one scan after the positive edge:  //
    //------------------------------------------------------------------------//
    A #bmc.permitStart;
    A(;
    O(;
    L #mc.CMD;
    L "dbCONST".BLK.CMD.START;
    ==I;
    );
    O(;
    L #bmc.SUBSelected;
    L #bmc.SUBLast;
    <>I;
    );
    );
    FP #edgeCommandStart;
    = #bmc.eventCmdStart;

NETWORK
TITLE = Save last running substate if starting
    //------------------------------------------------------------------------//
    // SAVE SUBSTATE    SAVE SUBSTATE    SAVE SUBSTATE    SAVE SUBSTATE       //
    //                                                                        //
    // Save the running substate for next scan check if starting. It may have //
    // changed:                                                               //
    //------------------------------------------------------------------------//
    A #bmc.eventCmdStart;
    JCN _b;
    L #bmc.SUBSelected;
    T #bmc.SUBLast;
_b:   NOP 0;

NETWORK
TITLE = Flag if block stop command issued
    //------------------------------------------------------------------------//
    // STOP COMMAND   STOP COMMAND   STOP COMMAND   STOP COMMAND   STOP COMM  //
    //                                                                        //
    // Check if the stop command has just been issued if the bit positive     //
    // edge. The result will only last for one scan after the positive edge:  //
    //------------------------------------------------------------------------//
    L #mc.CMD;
    L "dbCONST".BLK.CMD.STOP;
    ==I;
    FP #edgeCommandStop;
    = #bmc.eventCmdStop;

NETWORK
TITLE = Stop command takes precedence over Start command
    //------------------------------------------------------------------------//
    // If commanded to Stop then reset any Start command:                     //
    //------------------------------------------------------------------------//
    A #bmc.eventCmdStop;
    JCN _c;
    R #bmc.eventCmdStart;
_c:   NOP 0;

NETWORK
TITLE = Interlocked State if Stopped
    //------------------------------------------------------------------------//
    // Block should be interlocked state if STOPPED and interlock active or   //
    // child failed:                                                          //
    //------------------------------------------------------------------------//
    A(;
    L #mc.STATE;
    L "dbCONST".BLK.STATE.STOPPED;
    ==I;
    );
    A(;
    O #mc.INTERLOCK;
    ON #bmc.permitStart;
    );
    JCN _d;
    L "dbCONST".BLK.STATE.INTERLOCKED;
    T #mc.STATE;
_d:   NOP 0;

NETWORK
TITLE = Paused State if Running
    //------------------------------------------------------------------------//
    // Block should be paused state if RUNNING and interlock active or child  //
    // failed:                                                                //
    //------------------------------------------------------------------------//
    A(;
    L #mc.STATE;
    L "dbCONST".BLK.STATE.INTERLOCKED;
    <>I;
    );
    A(;
    L #mc.STATE;
    L "dbCONST".BLK.STATE.PAUSED;
    <>I;
    );
    A(;
    L #mc.STATE;
    L "dbCONST".BLK.STATE.STOPPED;
    <>I;
    );
    A(;
    O #mc.INTERLOCK;
    ON #bmc.permitStart;
    );
    JCN _e;
    L "dbCONST".BLK.STATE.PAUSED;
    T #mc.STATE;
_e:   NOP 0;

    //------------------------------------------------------------------------//
    // Set the substate safe if any interlock:                                //
    //------------------------------------------------------------------------//
    L #mc.STATE;
    L "dbCONST".BLK.STATE.INTERLOCKED;
    ==I;
    JCN _f;
    L "dbCONST".BLK.SAFE.CMD;
    T #bmc.SUBSelected;
_f:   NOP 0;

NETWORK
TITLE = Send safe command in case of any interlock or failure
    //------------------------------------------------------------------------//
    // Send safe command if any interlock:                                    //
    //------------------------------------------------------------------------//
    AN #bmc.permitStart;
    JCN _g;
    L "dbCONST".BLK.SAFE.CMD;
    T #mc.CMD;
_g:   NOP 0;

NETWORK
TITLE = Set the safe state in case of any interlock or failure
    //------------------------------------------------------------------------//
    // Set safe state to match command if any interlock. The safe command     //
    // must match the safe state index number in dbCONST.                     //
    //------------------------------------------------------------------------//
    AN #bmc.permitStart;
    JCN _h;
    L "dbCONST".BLK.SAFE.CMD;
    T #mc.STATE;
_h:   NOP 0;
END_FUNCTION
