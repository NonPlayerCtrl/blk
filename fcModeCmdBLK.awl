//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Description: Generic Block Common Mode and Command handling function block.//
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      28-Feb-2018 NA        Reboot for S7-1500.             //
// 0.4 Khairul Basar    05-Oct-2009 NA        Substate change will issue STOP //
// 0.3 Khairul Basar    17-Sep-2009 NA        Instead of Auto/Man command,    //
//                                            now only single COMMAND.        //
// 0.2 Khairul Basar    20-Aug-2009 NA        Ref1.                           //
// 0.1 Khairul Basar    03-Aug-2009 NA        Initial design.                 //
// Ref1.                                                                      //
// Mode change:#tMode_Changed NO is removed from the parallel path of         //
// Substate changed for not to generate #tEdgeAutoStart pulse when mode is    //
// changed.                                                                   //
//----------------------------------------------------------------------------//
FUNCTION "fcModeCmdBLK" : Void
TITLE = Stackable Block Mode, Command & Interlock handling block
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : REO
NAME : fcModeCmdBLK
VERSION : 2.0

VAR_INPUT
    tmrChildExpired : Bool;        // Child mismatch timer expired
END_VAR

VAR_IN_OUT
    mcRead : "udtMCRead";          // Block mode and command from read CPU
    mcWrite : "udtMCWrite";        // Block mode and command directives from write CPU
    bmc : "udtModeCommandBLK";     // Block mode and command
    err : "udtBLKError";           // Block error flags
END_VAR

BEGIN
NETWORK
TITLE = Flag if block Mode just changed to Auto
    //------------------------------------------------------------------------//
    // MODE CHANGE EVENT   MODE CHANGE EVENT   MODE CHANGE EVENT   MODE CHANG //
    //                                                                        //
    // Check if the mode has just been changed to Auto if the bit positive    //
    // edge. The result will only last for one scan after the positive edge:  //
    //------------------------------------------------------------------------//
    A #mcRead.modeAUTO;
    FP #bmc.edge.modeAuto;
    = #bmc.event.modeAuto;

NETWORK
TITLE = Flag if block Mode just changed to Manual
    //------------------------------------------------------------------------//
    // Check if the mode has just been changed to Manual:                     //
    //------------------------------------------------------------------------//
    A #mcRead.modeMANUAL;
    FP #bmc.edge.modeManual;
    = #bmc.event.modeManual;

NETWORK
TITLE = Flag if block Mode just changed to Out Of Service
    //------------------------------------------------------------------------//
    // Check if the mode has just been changed to Out of Service:             //
    //------------------------------------------------------------------------//
    A #mcRead.modeOOS;
    FP #bmc.edge.modeOOS;
    = #bmc.event.modeOOS;

NETWORK
TITLE = Flag if a running substate restart command issued
    //------------------------------------------------------------------------//
    // RESTART COMMAND   RESTART COMMAND   RESTART COMMAND   RESTART COMMAND  //
    //                                                                        //
    // Check if a restart command has just been issued. It acts as a one shot://
    //------------------------------------------------------------------------//
    A #bmc.permitStart;
    A(;
    L #mcWrite.CMD;
    L "dbCONST".BLK.CMD.RESTART;
    ==I;
    );
    A(;
    L #mcRead.STATE;
    L "dbCONST".BLK.STATE.COMPLETED;
    ==I;
    );
    FP #bmc.edge.cmdRestart;
    = #bmc.event.cmdRestart;

NETWORK
TITLE = Flag if a new block running substate command issued
    //------------------------------------------------------------------------//
    // START COMMAND   START COMMAND   START COMMAND   START COMMAND   START  //
    //                                                                        //
    // Check if the start command has just been issued if the bit positive    //
    // edge. The result will only last for one scan after the positive edge:  //
    //------------------------------------------------------------------------//
    A #bmc.permitStart;
    A(;
    L #mcWrite.CMD;
    L "dbCONST".BLK.CMD.START;
    ==I;
    );
    A(;
    L #mcRead.STATE;
    L "dbCONST".BLK.STATE.STOPPED;
    ==I;
    );
    FP #bmc.edge.cmdStart;
    = #bmc.event.cmdStart;

NETWORK
TITLE = Flag if block stop command issued
    //------------------------------------------------------------------------//
    // STOP COMMAND   STOP COMMAND   STOP COMMAND   STOP COMMAND   STOP COMM  //
    //                                                                        //
    // Check if the stop command has just been issued if the bit positive     //
    // edge. The result will only last for one scan after the positive edge:  //
    //------------------------------------------------------------------------//
    A(;
    L #mcWrite.CMD;
    L "dbCONST".BLK.CMD.STOP;
    ==I;
    );
    FP #bmc.edge.cmdStop;
    = #bmc.event.cmdStop;

NETWORK
TITLE = Stopped flag if in STOPPED state
    //------------------------------------------------------------------------//
    // STOPPED state flag for convenience:                                    //
    //------------------------------------------------------------------------//
    A(;
	L "dbCONST".BLK.STATE.STOPPED;
    L #mcRead.STATE;
    ==I;
	);
    = #bmc.state.stopped;

NETWORK
TITLE = Running flag if in a RUNNING substate
    //------------------------------------------------------------------------//
    // STOPPED state flag for convenience:                                    //
    //------------------------------------------------------------------------//
    A(;
    L #mcRead.STATE;
    L "dbCONST".BLK.STATE.STOPPED;
    >I;
    );
    A(;
    L #mcRead.STATE;
    L "dbCONST".BLK.STATE.INTERLOCKED;
    <I;
    );
    = #bmc.state.running;

NETWORK
TITLE = Interlocked State. Send safe command in case of any interlock or failure
    //------------------------------------------------------------------------//
    // Block should be interlocked state if STOPPED and interlock active or   //
    // child failed:                                                          //
    //------------------------------------------------------------------------//
    A #mcRead.INTERLOCK;
    FP #bmc.edge.interlock;
    = #bmc.event.interlock;
    JCN _noInterlock;
    S #mcRead.INTERLOCK;
    L #mcRead.STATE;
    T #bmc.lastSTATE;
    L "dbCONST".BLK.STATE.INTERLOCKED;
    T #mcRead.STATE;

_noInterlock:   NOP 0;

NETWORK
TITLE = Check if any Child has Failed
    //------------------------------------------------------------------------//
    // Check if any child cannot be controlled by this parent block in which  //
    // case this block will fail and so operation at this level should be     //
    // inhibited:                                                             //
    //------------------------------------------------------------------------//
    O #bmc.flags.childInterlock;
    O #bmc.flags.childUnavailable;
    O #tmrChildExpired;
    JCN _noChildFail;
    S #bmc.flags.childFailed;
_noChildFail:   NOP 0;

NETWORK
TITLE = Check if Child Failed condition cleard
    //------------------------------------------------------------------------//
    // Child fail condition cleared if all children match:                    //
    //------------------------------------------------------------------------//
    AN #bmc.flags.childInterlock;
    AN #bmc.flags.childUnavailable;
    AN #bmc.flags.childMismatch;
    JCN _childFailCleared;
    R #bmc.flags.childFailed;
_childFailCleared:   NOP 0;

NETWORK
TITLE = Set Start command permitted flag if all okay
    //------------------------------------------------------------------------//
    // If no interlock and all calling parameters and child devices are okay  //
    // then a Start is permitted:                                             //
    //------------------------------------------------------------------------//
    AN #mcRead.INTERLOCK;
    AN #bmc.flags.childFailed;
    = #bmc.permitStart;

NETWORK
TITLE = Operator Attention Flag
    //------------------------------------------------------------------------//
    // If not in Auto or any interlock or inhibit condition then the block    //
    // needs operator attention:                                              //
    //------------------------------------------------------------------------//
    O #mcRead.needAttention;
    ON #bmc.permitStart;
    = #mcRead.needAttention;

NETWORK
TITLE = Block errors
    //------------------------------------------------------------------------//
    // Set the block start perimt error status if active:                     //
    //------------------------------------------------------------------------//
    AN #bmc.permitStart;
    = #err.permitStart;

    //------------------------------------------------------------------------//
    // Set the child error status if active:                                  //
    //------------------------------------------------------------------------//
    A #bmc.flags.childInterlock;
    = #err.childInterlock;

    //------------------------------------------------------------------------//
    // Set the child unavailable error status if active:                      //
    //------------------------------------------------------------------------//
    A #bmc.flags.childUnavailable;
    = #err.childUnavailable;

    //------------------------------------------------------------------------//
    // Set the child state mismatch error status if active:                   //
    //------------------------------------------------------------------------//
    A #tmrChildExpired;
    = #err.childMismatch;
    JCN _noInternalIL;
    S #mcRead.INTIL;
_noInternalIL:   NOP 0;

    //------------------------------------------------------------------------//
    // Set the block error flag if anything gone wrong:                       //
    //------------------------------------------------------------------------//
    O #err.childInterlock;
    O #err.childMismatch;
    O #err.childSafeState;
    O #err.childUnavailable;
    O #err.permitStart;
    = #mcRead.ERROR;

END_FUNCTION
