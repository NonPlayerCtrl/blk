//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//                Automatically Generated File - Do Not Edit                  //
//----------------------------------------------------------------------------//
// Class:       ifbDI3                                                        //
// Description: Instances of DI3                                              //
//                                                                            //
// General alarm input using software only. No field I/O.                     //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 1.0 David Paspa      17-Apr-2018 NA        Initial design from DI1.        //
//----------------------------------------------------------------------------//
// Index   Instance    Description                                            //
@@TEMPLATE_BEGIN|createInstancesGlobal@@
// @@IDX@@       @@INSTANCE@@      @@DESCRIPTION@@
@@TEMPLATE_END@@
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "ifbDI3"
TITLE = Instances of DI3 software alarm
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : REO
NAME : ifbDI3
VERSION : 1.0

//----------------------------------------------------------------------------//
// Declare the instance objects of the class:                                 //
//----------------------------------------------------------------------------//
VAR
@@TEMPLATE_BEGIN|createClassNone@@
@@ATTR_BEGIN|numInstances@@
    f : Array[0..@@MAXITEM@@] of "fb@@CLASS@@";
@@ATTR_END|numInstances@@
@@TEMPLATE_END@@
END_VAR

BEGIN
@@TEMPLATE_BEGIN|createInstances@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Unique ID
    //------------------------------------------------------------------------//
    // INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INST //
    // INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INST //
    //                                                                        //
    // Set the instance unique ID:                                            //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.ID.@@INSTANCE@@;
    T #f[@@IDX@@].p.read.mc.ME;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Owner ID
    //------------------------------------------------------------------------//
    // Set the instance Owner ID:                                             //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.ID.@@PARENT@@;
    T #f[@@IDX@@].p.write.mc.OWNER;

@@ATTR_BEGIN|FLOWPATH@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@CLASS@@ is a Flowpath device
    //------------------------------------------------------------------------//
    // This class of device is a not a FLOWPATH device where the state must   //
    // equal the command once set by the parent:                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #f[@@IDX@@].p.read.mc.FLOWPATH;
@@ATTR_END|FLOWPATH@@

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Block Read
    //------------------------------------------------------------------------//
    // This block can only reside within this CPU:                            //
    //------------------------------------------------------------------------//
    A "alwaysHigh";
    = #f[@@IDX@@].p.read.mc.isMaster;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Block Write
    //------------------------------------------------------------------------//
    // This block can only be owned by a parent block in this CPU:            //
    //------------------------------------------------------------------------//
    A "alwaysHigh";
    = #f[@@IDX@@].p.write.mc.isMaster;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Safe Command on restart
    //------------------------------------------------------------------------//
    // Set the safe command if restarting the PLC:                            //
    //------------------------------------------------------------------------//
    A "flagFirstScanRestart";
    JCN _notRestart_@@COUNTERTEMPLATE|1@@;
    L "dbCONST".BLK.DI3.SAFE.CMD;
    T #f[@@IDX@@].p.read.mc.CMD_SAFE;
_notRestart_@@COUNTERTEMPLATE@@:   NOP 0;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@DESCRIPTION@@
    //------------------------------------------------------------------------//
    // Call the class function to process the instance:                       //
    //------------------------------------------------------------------------//
    CALL #f[@@IDX@@];

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Send the alarm bits to the global DB
    //------------------------------------------------------------------------//
    // Transfer the class event log message bits to the global DB:            //
    //------------------------------------------------------------------------//
    L #f[@@IDX@@].p.read.mc.ALARM;
    T "dbEVENT".alarmBlock.alarm_@@INSTANCE@@;

@@TEMPLATE_END@@

@@TEMPLATE_BEGIN|createInstancesForeign@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Block Read
    //------------------------------------------------------------------------//
    // This block can only reside in another CPU:                             //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #f[@@IDX@@].p.read.mc.isMaster;

@@ATTR_BEGIN|ISOWNED@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Block Write
    //------------------------------------------------------------------------//
    // This block can only be owned by a parent block in another CPU:         //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #f[@@IDX@@].p.write.mc.isMaster;
@@ATTR_END|ISOWNED@@

@@TEMPLATE_END@@

END_FUNCTION_BLOCK
