//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Class:       fbMI1                                                         //
// Description:                                                               //
// Load Cell mass indicator.                                                  //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      30-Jan-2018 NA        Reboot for S7-1500.             //
// 0.3 Mr. Khoon        01-Oct-2009 CC-09/016 Mode=Initialized,OOS coded.     //
// 0.2 Khairul Basar    31-Aug-2009 CC-09/016 Upper/Lower range hardcoded.    //
//                                            USER_INPUT added for manual     //
//                                            mode simulation.                //
// 0.1 Khairul Basar    03-Aug-2009           Initial design.                 //
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "fbMI1"
TITLE = MI1 : Load Cell mass indicator
{ S7_Optimized_Access := 'FALSE' }
AUTHOR : REO
NAME : fbMI1
VERSION : 2.0

//----------------------------------------------------------------------------//
// Declare variables:                                                         //
//----------------------------------------------------------------------------//
VAR_INPUT
    OWNER : Int;             // Value to be set or reset by Parent
    SERIAL : Int;            // Unique batch or CIPSIP serial number
    CR_IL : Bool;            // Critical Interlock in series
    NCR_IL : Bool;           // Non-critical Interlock in series
    MAN_OVERRIDE : Bool;     // Critical Interlock in series can be Override by this Input
    CMD_SAFE : Int;          // Safe command for the module
    RAW : Word;              // Raw input signal from Field (4mA = 0, 20mA = 27648)
    USER_INPUT : Int;        // Manual mode, equivallent of Analog input, to be entered by Operator
    UPPER_RANGE : Real;      // Upper Range Limit in engineering units
    LOWER_RANGE : Real;      // Lower Range Limit in engineering units
    POLARITY : Bool;         // Input signal is BIPOLAR (1) or UNIPOLAR (0)
    LIMIT_HH : Real;         // High High Alarm Limit
    LIMIT_H : Real;          // High Alarm Limit
    STATE_ENABLED : Int;     // ENABLED state value from dbCONST
    STATE_FAULT : Int;       // FAULT state value from dbCONST
END_VAR

VAR_OUTPUT
    PV : Real;               // Measured Value (after scaling)
    DQ : Bool;               // MV data quality (0=Bad; 1=Good)
    ALARM_HH : Bool;         // HighHigh Alarm
    ALARM_H : Bool;          // High Alarm
END_VAR

VAR_IN_OUT
    CMD : Int;               // Command
    MODE : Int;              // Control Mode
    STATE : Int;             // Device State (1= OFF, 2= ON)
    INTERLOCK : Bool;        // Interlock Flag
    RANGE_ERROR : Bool;      // Range Error (<4mA or >20mA)
    BROKEN_WIRE : Bool;      // Broken Wire detection
END_VAR

VAR_TEMP
    tPV : Real;              // Temporary measured value
    modeAuto : Bool;
    modeManual : Bool;
    modeOOS : Bool;
END_VAR

BEGIN
NETWORK
TITLE = Call Mode and Command handling function
    //------------------------------------------------------------------------//
    // MODE AND COMMAND   MODE AND COMMAND   MODE AND COMMAND   MODE AND COMM //
    // MODE AND COMMAND   MODE AND COMMAND   MODE AND COMMAND   MODE AND COMM //
    //                                                                        //
    // Process the standard block functions for command, mode, interlock and  //
    // state:                                                                 //
    //------------------------------------------------------------------------//
    CALL "fcModeCmd"
    (
        CR_IL                := #CR_IL ,
        NCR_IL               := #NCR_IL ,
        MAN_OVERRIDE         := #MAN_OVERRIDE ,
        CMD_SAFE             := #CMD_SAFE ,
        modeAuto             := #modeAuto ,
        modeManual           := #modeManual ,
        modeOOS              := #modeOOS ,
        MODE                 := #MODE ,
        CMD                  := #CMD ,
        STATE                := #STATE ,
        INTERLOCK            := #INTERLOCK
    );
    NOP 0;

NETWORK
TITLE = Call Analog Input handling function
    //------------------------------------------------------------------------//
    // ANALOG VALUE   ANALOG VALUE   ANALOG VALUE   ANALOG VALUE   ANALOG VAL //
    // ANALOG VALUE   ANALOG VALUE   ANALOG VALUE   ANALOG VALUE   ANALOG VAL //
    //                                                                        //
    // Scale the analog input value and check it is healty:                   //
    //------------------------------------------------------------------------//
    CALL "fcAnalog"
    (   RAW_INPUT            := #RAW_INPUT ,
        USER_INPUT           := #USER_INPUT ,
        UPPER_RANGE          := #UPPER_RANGE ,
        LOWER_RANGE          := #LOWER_RANGE ,
        POLARITY             := #POLARITY ,
        LIMIT_HH             := #LIMIT_HH ,
        LIMIT_H              := #LIMIT_H ,
        LIMIT_L              := #LIMIT_L ,
        LIMIT_LL             := #LIMIT_LL ,
        ENABLE_HH            := #ENABLE_HH ,
        ENABLE_H             := #ENABLE_H ,
        ENABLE_L             := #ENABLE_L ,
        ENABLE_LL            := #ENABLE_LL ,
        MEASURE              := #MEASURE ,
        STATE_ENABLED        := #STATE_ENABLED ,
        STATE_FAULT          := #STATE_FAULT ,
        modeAuto             := #modeAuto ,
        modeManual           := #modeManual ,
        modeOOS              := #modeOOS ,
        PV                   := #PV ,
        DQ                   := #DQ ,
        ALARM_HH             := #ALARM_HH ,
        ALARM_H              := #ALARM_H ,
        ALARM_L              := #ALARM_L ,
        ALARM_LL             := #ALARM_LL ,
        INTERLOCK            := #INTERLOCK ,
        STATE                := #STATE ,
        RANGE_ERROR          := #RANGE_ERROR ,
        BROKEN_WIRE          := #BROKEN_WIRE
    );
    NOP 0;
END_FUNCTION_BLOCK
