//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//                Automatically Generated File - Do Not Edit                  //
//----------------------------------------------------------------------------//
// Class:       ifbILCR                                                       //
// Description: Instances of Critical Interlocks                              //
//                                                                            //
// Interlock with up to fifteen inputs.                                       //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 1.0 David Paspa      17-Apr-2018 NA        Initial design.                 //
//----------------------------------------------------------------------------//
// Index  Target    Class  Description                                        //
// 0      AG1101    MOT1  Agitator
// 1      AG2101    MOT1  Agitator
// 2      BAV1139    MOT1  Vent line drain valve
// 3      BAV1141    MOT1  Vent Filter Drain valve
// 4      BAV1143    MOT1  SIP Condensate Drain Valve
// 5      BAV1145    MOT1  CIP Drain Valve
// 6      BAV1147    MOT1  SMFLx SIP Condenste Drain Valve
// 7      BAV1149    MOT1  SMFLx CIP Drain Valve
// 8      BAV1167    MOT1  MMFLx Cooling Water Supply Drain Valve
// 9      BAV1169    MOT1  MMFLx Cooling Water Return Drain Valve
// 10      BAV2139    MOT1  Vent line drain valve
// 11      BAV2141    MOT1  Vent Filter Drain valve
// 12      BAV2143    MOT1  SIP Condensate Drain Valve
// 13      BAV2145    MOT1  CIP Drain Valve
// 14      BAV2147    MOT1  SMFLx SIP Condenste Drain Valve
// 15      BAV2149    MOT1  SMFLx CIP Drain Valve
// 16      BAV2167    MOT1  MMFLx Cooling Water Supply Drain Valve
// 17      BAV2169    MOT1  MMFLx Cooling Water Return Drain Valve
// 18      BAV3139    MOT1  Vent line drain valve
// 19      BAV3141    MOT1  Vent Filter Drain valve
// 20      BAV3143    MOT1  SIP Condensate Drain Valve
// 21      BAV3145    MOT1  CIP Drain Valve
// 22      BAV4139    MOT1  Vent line drain valve
// 23      BAV4141    MOT1  Vent Filter Drain valve
// 24      BAV4143    MOT1  SIP Condensate Drain Valve
// 25      BAV4145    MOT1  CIP Drain Valve
// 26      BV1151    MOT1  MMFLx Cooling Water Supply Valve
// 27      BV1153    MOT1  MMFLx Cooling Water Return Valve
// 28      BV2151    MOT1  MMFLx Cooling Water Supply Valve
// 29      BV2153    MOT1  MMFLx Cooling Water Return Valve
// 30      DV1101    MOT1  Vent Valve
// 31      DV1103    MOT1  HP CA Supply Valve
// 32      DV1105    MOT1  LP CA Supply Valve
// 33      DV1107    MOT1  Vacuum valve
// 34      DV1109    MOT1  PS Supply for WFI Loop
// 35      DV1111    MOT1  WFI Supply Valve
// 36      DV1113    MOT1  PW Supply Valve
// 37      DV1115    MOT1  PS Supply for PW Loop
// 38      DV1117    MOT1  Spray Ball 1 Valve
// 39      DV1119    MOT1  Spray Ball 2 Valve
// 40      DV1121    MOT1  Outlet Valve
// 41      DV1135    MOT1  SMFLx filter outlet drain valve
// 42      DV1137    MOT1  SMFLx filter outlet valve
// 43      DV1171    MOT1  MMFLx filter inlet drain valve
// 44      DV1173    MOT1  MMFLx Inline Heat Exchanger inlet valve
// 45      DV2101    MOT1  Vent Valve
// 46      DV2103    MOT1  HP CA Supply Valve
// 47      DV2105    MOT1  LP CA Supply Valve
// 48      DV2107    MOT1  Vacuum valve
// 49      DV2109    MOT1  PS Supply for WFI Loop
// 50      DV2111    MOT1  WFI Supply Valve
// 51      DV2113    MOT1  PW Supply Valve
// 52      DV2115    MOT1  PS Supply for PW Loop
// 53      DV2117    MOT1  Spray Ball 1 Valve
// 54      DV2119    MOT1  Spray Ball 2 Valve
// 55      DV2121    MOT1  Outlet Valve
// 56      DV2135    MOT1  SMFLx filter outlet drain valve
// 57      DV2137    MOT1  SMFLx filter outlet valve
// 58      DV2171    MOT1  MMFLx filter inlet drain valve
// 59      DV2173    MOT1  MMFLx Inline Heat Exchanger inlet valve
// 60      DV3101    MOT1  Vent Valve
// 61      DV3103    MOT1  HP CA Supply Valve
// 62      DV3105    MOT1  LP CA Supply Valve
// 63      DV3107    MOT1  Vacuum valve
// 64      DV3109    MOT1  PS Supply for WFI Loop
// 65      DV3111    MOT1  WFI Supply Valve
// 66      DV3113    MOT1  PW Supply Valve
// 67      DV3115    MOT1  PS Supply for PW Loop
// 68      DV3117    MOT1  Spray Ball 1 Valve
// 69      DV3119    MOT1  Spray Ball 2 Valve
// 70      DV3121    MOT1  Outlet Valve
// 71      DV3125    MOT1  Sy Transfer line Valve Matrix SMFLx
// 72      DV3129    MOT1  Sy Transfer line Valve Matrix FLz
// 73      DV4101    MOT1  Vent Valve
// 74      DV4103    MOT1  HP CA Supply Valve
// 75      DV4105    MOT1  LP CA Supply Valve
// 76      DV4107    MOT1  Vacuum valve
// 77      DV4109    MOT1  PS Supply for WFI Loop
// 78      DV4111    MOT1  WFI Supply Valve
// 79      DV4113    MOT1  PW Supply Valve
// 80      DV4115    MOT1  PS Supply for PW Loop
// 81      DV4117    MOT1  Spray Ball 1 Valve
// 82      DV4119    MOT1  Spray Ball 2 Valve
// 83      DV4121    MOT1  Outlet Valve
// 84      DV4125    MOT1  Sy Transfer line Valve Matrix SMFLx
// 85      DV4129    MOT1  Sy Transfer line Valve Matrix FLz
// 86      HE1101    MOT1  Electric Heating Element
// 87      HE2101    MOT1  Electric Heating Element
// 88      HE3101    MOT1  Electric Heating Element
// 89      HE4101    MOT1  Electric Heating Element
// 90      PC1103    MOT1  Pressure Control
// 91      PC2103    MOT1  Pressure Control
// 92      PC3103    MOT1  Pressure Control
// 93      PC4103    MOT1  Pressure Control
// 94      TC1109    MOT1  MMFLx Inline Heat Exchanger Temperature Control
// 95      TC2109    MOT1  MMFLx Inline Heat Exchanger Temperature Control
// 96      TCV1157    MOT1  MMFLx cooling water supply control valve
// 97      TCV2157    MOT1  MMFLx cooling water supply control valve
// 98      VP1000    MOT1  MX Vacuum Pump 1
// 99      VP1001    MOT1  MX Vacuum Pump 2
// 100      VP3000    MOT1  SY Vacuum Pump 1
// 101      VP3001    MOT1  SY Vacuum Pump 2
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "ifbCRIL"
TITLE = Instances of Critical Interlocks
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : REO
NAME : ifbCRIL
VERSION : 1.0

//----------------------------------------------------------------------------//
// Define the instances of the FB type:                                       //
//----------------------------------------------------------------------------//
VAR
    p : Array[0..463] of "udtInterlock";
END_VAR

VAR_TEMP
    tIL : "udtInterlock";    // Interlock source input
END_VAR

BEGIN
NETWORK
TITLE = Item 0 AG1101 : Agitator initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 0 AG1101 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 0 AG1101 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 0 AG1101 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 0 AG1101 interlock source : A PI1103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 0 AG1101 interlock source : AN MI1101 Mx Mass Indicator Bad DQ DQ
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN idbMI1.f[0].p.read.ai.DQ;
    = #tIL.Source[4];


NETWORK
TITLE = Item 0 AG1101 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 0 AG1101 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 0 AG1101 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[0]
    );

NETWORK
TITLE = Item 1 AG2101 : Agitator initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 1 AG2101 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 1 AG2101 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 1 AG2101 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 1 AG2101 interlock source : A PI2103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 1 AG2101 interlock source : AN MI2101 Mx Mass Indicator Bad DQ DQ
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN idbMI1.f[1].p.read.ai.DQ;
    = #tIL.Source[4];


NETWORK
TITLE = Item 1 AG2101 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 1 AG2101 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 1 AG2101 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[1]
    );

NETWORK
TITLE = Item 2 BAV1139 : Vent line drain valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 2 BAV1139 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 2 BAV1139 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 2 BAV1139 interlock source : A ASL1000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 2 BAV1139 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 2 BAV1139 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 2 BAV1139 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 2 BAV1139 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[2]
    );

NETWORK
TITLE = Item 3 BAV1141 : Vent Filter Drain valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 3 BAV1141 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 3 BAV1141 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 3 BAV1141 interlock source : A PI1103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 3 BAV1141 interlock source : A ASL1000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 3 BAV1141 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[4];


NETWORK
TITLE = Item 3 BAV1141 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 3 BAV1141 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 3 BAV1141 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[3]
    );

NETWORK
TITLE = Item 4 BAV1143 : SIP Condensate Drain Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 4 BAV1143 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 4 BAV1143 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 4 BAV1143 interlock source : A ASL1000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 4 BAV1143 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 4 BAV1143 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 4 BAV1143 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 4 BAV1143 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[4]
    );

NETWORK
TITLE = Item 5 BAV1145 : CIP Drain Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 5 BAV1145 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 5 BAV1145 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 5 BAV1145 interlock source : A ASL1000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 5 BAV1145 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 5 BAV1145 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 5 BAV1145 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 5 BAV1145 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[5]
    );

NETWORK
TITLE = Item 6 BAV1147 : SMFLx SIP Condenste Drain Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 6 BAV1147 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 6 BAV1147 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 6 BAV1147 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 6 BAV1147 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 6 BAV1147 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 6 BAV1147 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[6]
    );

NETWORK
TITLE = Item 7 BAV1149 : SMFLx CIP Drain Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 7 BAV1149 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 7 BAV1149 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 7 BAV1149 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 7 BAV1149 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 7 BAV1149 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 7 BAV1149 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[7]
    );

NETWORK
TITLE = Item 8 BAV1167 : MMFLx Cooling Water Supply Drain Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 8 BAV1167 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 8 BAV1167 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 8 BAV1167 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 8 BAV1167 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 8 BAV1167 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 8 BAV1167 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[8]
    );

NETWORK
TITLE = Item 9 BAV1169 : MMFLx Cooling Water Return Drain Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 9 BAV1169 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 9 BAV1169 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 9 BAV1169 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 9 BAV1169 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 9 BAV1169 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 9 BAV1169 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[9]
    );

NETWORK
TITLE = Item 10 BAV2139 : Vent line drain valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 10 BAV2139 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 10 BAV2139 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 10 BAV2139 interlock source : A ASL2000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 10 BAV2139 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 10 BAV2139 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 10 BAV2139 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 10 BAV2139 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[10]
    );

NETWORK
TITLE = Item 11 BAV2141 : Vent Filter Drain valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 11 BAV2141 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 11 BAV2141 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 11 BAV2141 interlock source : A PI2103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 11 BAV2141 interlock source : A ASL2000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 11 BAV2141 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[4];


NETWORK
TITLE = Item 11 BAV2141 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 11 BAV2141 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 11 BAV2141 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[11]
    );

NETWORK
TITLE = Item 12 BAV2143 : SIP Condensate Drain Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 12 BAV2143 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 12 BAV2143 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 12 BAV2143 interlock source : A ASL2000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 12 BAV2143 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 12 BAV2143 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 12 BAV2143 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 12 BAV2143 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[12]
    );

NETWORK
TITLE = Item 13 BAV2145 : CIP Drain Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 13 BAV2145 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 13 BAV2145 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 13 BAV2145 interlock source : A ASL2000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 13 BAV2145 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 13 BAV2145 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 13 BAV2145 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 13 BAV2145 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[13]
    );

NETWORK
TITLE = Item 14 BAV2147 : SMFLx SIP Condenste Drain Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 14 BAV2147 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 14 BAV2147 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 14 BAV2147 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 14 BAV2147 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 14 BAV2147 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 14 BAV2147 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[14]
    );

NETWORK
TITLE = Item 15 BAV2149 : SMFLx CIP Drain Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 15 BAV2149 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 15 BAV2149 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 15 BAV2149 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 15 BAV2149 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 15 BAV2149 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 15 BAV2149 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[15]
    );

NETWORK
TITLE = Item 16 BAV2167 : MMFLx Cooling Water Supply Drain Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 16 BAV2167 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 16 BAV2167 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 16 BAV2167 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 16 BAV2167 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 16 BAV2167 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 16 BAV2167 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[16]
    );

NETWORK
TITLE = Item 17 BAV2169 : MMFLx Cooling Water Return Drain Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 17 BAV2169 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 17 BAV2169 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 17 BAV2169 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 17 BAV2169 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 17 BAV2169 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 17 BAV2169 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[17]
    );

NETWORK
TITLE = Item 18 BAV3139 : Vent line drain valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 18 BAV3139 interlock source : A RD3101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[15].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 18 BAV3139 interlock source : A ES3100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[10].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 18 BAV3139 interlock source : A ASL3000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 18 BAV3139 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 18 BAV3139 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 18 BAV3139 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[18]
    );

NETWORK
TITLE = Item 19 BAV3141 : Vent Filter Drain valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 19 BAV3141 interlock source : A RD3101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[15].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 19 BAV3141 interlock source : A ES3100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[10].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 19 BAV3141 interlock source : A PI3103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 19 BAV3141 interlock source : A ASL3000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 19 BAV3141 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 19 BAV3141 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 19 BAV3141 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[19]
    );

NETWORK
TITLE = Item 20 BAV3143 : SIP Condensate Drain Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 20 BAV3143 interlock source : A RD3101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[15].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 20 BAV3143 interlock source : A ES3100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[10].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 20 BAV3143 interlock source : A ASL3000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 20 BAV3143 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 20 BAV3143 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 20 BAV3143 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[20]
    );

NETWORK
TITLE = Item 21 BAV3145 : CIP Drain Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 21 BAV3145 interlock source : A RD3101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[15].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 21 BAV3145 interlock source : A ES3100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[10].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 21 BAV3145 interlock source : A ASL3000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 21 BAV3145 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 21 BAV3145 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 21 BAV3145 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[21]
    );

NETWORK
TITLE = Item 22 BAV4139 : Vent line drain valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 22 BAV4139 interlock source : A RD4101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[16].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 22 BAV4139 interlock source : A ES4100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[12].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 22 BAV4139 interlock source : A ASL4000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 22 BAV4139 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 22 BAV4139 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 22 BAV4139 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[22]
    );

NETWORK
TITLE = Item 23 BAV4141 : Vent Filter Drain valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 23 BAV4141 interlock source : A RD4101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[16].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 23 BAV4141 interlock source : A ES4100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[12].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 23 BAV4141 interlock source : A PI4103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 23 BAV4141 interlock source : A ASL4000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 23 BAV4141 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 23 BAV4141 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 23 BAV4141 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[23]
    );

NETWORK
TITLE = Item 24 BAV4143 : SIP Condensate Drain Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 24 BAV4143 interlock source : A RD4101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[16].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 24 BAV4143 interlock source : A ES4100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[12].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 24 BAV4143 interlock source : A ASL4000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 24 BAV4143 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 24 BAV4143 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 24 BAV4143 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[24]
    );

NETWORK
TITLE = Item 25 BAV4145 : CIP Drain Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 25 BAV4145 interlock source : A RD4101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[16].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 25 BAV4145 interlock source : A ES4100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[12].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 25 BAV4145 interlock source : A ASL4000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 25 BAV4145 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 25 BAV4145 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 25 BAV4145 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[25]
    );

NETWORK
TITLE = Item 26 BV1151 : MMFLx Cooling Water Supply Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 26 BV1151 interlock source : AN BAV1167 Manufacturing Filtration Line Cooling Water Supply Drain Valve CLOSED   AN BAV1169 Manufacturing Filtration Line Cooling Water Return Drain Valve CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbPOS4".f[6].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.CLOSED;
    ==I;
    );
AN(;
    L "idbPOS4".f[7].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 26 BV1151 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 26 BV1151 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 26 BV1151 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 26 BV1151 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 26 BV1151 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 26 BV1151 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[26]
    );

NETWORK
TITLE = Item 27 BV1153 : MMFLx Cooling Water Return Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 27 BV1153 interlock source : AN BAV1167 Manufacturing Filtration Line Cooling Water Supply Drain Valve CLOSED   AN BAV1169 Manufacturing Filtration Line Cooling Water Return Drain Valve CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbPOS4".f[6].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.CLOSED;
    ==I;
    );
AN(;
    L "idbPOS4".f[7].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 27 BV1153 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 27 BV1153 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 27 BV1153 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 27 BV1153 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 27 BV1153 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 27 BV1153 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[27]
    );

NETWORK
TITLE = Item 28 BV2151 : MMFLx Cooling Water Supply Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 28 BV2151 interlock source : AN BAV2167 Manufacturing Filtration Line Cooling Water Supply Drain Valve CLOSED   AN BAV2169 Manufacturing Filtration Line Cooling Water Return Drain Valve CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbPOS4".f[14].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.CLOSED;
    ==I;
    );
AN(;
    L "idbPOS4".f[15].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 28 BV2151 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 28 BV2151 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 28 BV2151 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 28 BV2151 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 28 BV2151 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 28 BV2151 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[28]
    );

NETWORK
TITLE = Item 29 BV2153 : MMFLx Cooling Water Return Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 29 BV2153 interlock source : AN BAV2167 Manufacturing Filtration Line Cooling Water Supply Drain Valve CLOSED   AN BAV2169 Manufacturing Filtration Line Cooling Water Return Drain Valve CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbPOS4".f[14].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.CLOSED;
    ==I;
    );
AN(;
    L "idbPOS4".f[15].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 29 BV2153 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 29 BV2153 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 29 BV2153 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 29 BV2153 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 29 BV2153 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 29 BV2153 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[29]
    );

NETWORK
TITLE = Item 30 DV1101 : Vent Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 30 DV1101 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 30 DV1101 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 30 DV1101 interlock source : A PI1103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 30 DV1101 interlock source : A ASL1000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 30 DV1101 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[4];


NETWORK
TITLE = Item 30 DV1101 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 30 DV1101 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 30 DV1101 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[30]
    );

NETWORK
TITLE = Item 31 DV1103 : HP CA Supply Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 31 DV1103 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 31 DV1103 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 31 DV1103 interlock source : A PI1103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 31 DV1103 interlock source : A ASL1000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 31 DV1103 interlock source : AN ZSC1101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[0].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[4];

NETWORK
TITLE = Item 31 DV1103 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[5];


NETWORK
TITLE = Item 31 DV1103 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 6;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 31 DV1103 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 31 DV1103 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[31]
    );

NETWORK
TITLE = Item 32 DV1105 : LP CA Supply Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 32 DV1105 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 32 DV1105 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 32 DV1105 interlock source : A PI1103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 32 DV1105 interlock source : A ASL1000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 32 DV1105 interlock source : AN ZSC1101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[0].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[4];

NETWORK
TITLE = Item 32 DV1105 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[5];


NETWORK
TITLE = Item 32 DV1105 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 6;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 32 DV1105 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 32 DV1105 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[32]
    );

NETWORK
TITLE = Item 33 DV1107 : Vacuum valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 33 DV1107 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 33 DV1107 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 33 DV1107 interlock source : A PI1103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 33 DV1107 interlock source : A ASL1000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 33 DV1107 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[4];


NETWORK
TITLE = Item 33 DV1107 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 33 DV1107 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 33 DV1107 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[33]
    );

NETWORK
TITLE = Item 34 DV1109 : PS Supply for WFI Loop initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 34 DV1109 interlock source : ON ZSC1107 Vessel inlet line Flowpath Indicator IN   ON ZSC1103 Vessel WFI Supply Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    ON(;
    L "idbZSC2".f[2].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
ON(;
    L "idbZSC2".f[0].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 34 DV1109 interlock source : A DV1111 Vessel WFI Supply Valve OPENED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A(;
    L "idbPOS4".f[28].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.OPENED;
    ==I;
    );
    = #tIL.Source[1];

NETWORK
TITLE = Item 34 DV1109 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 34 DV1109 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 34 DV1109 interlock source : A PI1103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[4];

NETWORK
TITLE = Item 34 DV1109 interlock source : A ASL1000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[5];

NETWORK
TITLE = Item 34 DV1109 interlock source : AN ZSC1101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[0].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[6];

NETWORK
TITLE = Item 34 DV1109 interlock source : O MI1101 Mx Mass Indicator High High Alarm ALARM_HH   ON MI1101 Mx Mass Indicator Bad DQ DQ
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    O idbMI1.f[0].p.read.ai.ALARM_HH;
ON idbMI1.f[0].p.read.ai.DQ;
    = #tIL.Source[7];

NETWORK
TITLE = Item 34 DV1109 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[8];


NETWORK
TITLE = Item 34 DV1109 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 9;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 34 DV1109 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 34 DV1109 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[34]
    );

NETWORK
TITLE = Item 35 DV1111 : WFI Supply Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 35 DV1111 interlock source : ON ZSC1107 Vessel inlet line Flowpath Indicator IN   ON ZSC1103 Vessel WFI Supply Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    ON(;
    L "idbZSC2".f[2].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
ON(;
    L "idbZSC2".f[0].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 35 DV1111 interlock source : A DV1109 Vessel PS Supply for WFI Loop OPENED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A(;
    L "idbPOS2".f[4].p.read.mc.STATE;
    L "dbCONST".BLK.POS2.STATE.OPENED;
    ==I;
    );
    = #tIL.Source[1];

NETWORK
TITLE = Item 35 DV1111 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 35 DV1111 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 35 DV1111 interlock source : A PI1103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[4];

NETWORK
TITLE = Item 35 DV1111 interlock source : A ASL1000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[5];

NETWORK
TITLE = Item 35 DV1111 interlock source : AN ZSC1101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[0].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[6];

NETWORK
TITLE = Item 35 DV1111 interlock source : O MI1101 Mx Mass Indicator High High Alarm ALARM_HH   ON MI1101 Mx Mass Indicator Bad DQ DQ
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    O idbMI1.f[0].p.read.ai.ALARM_HH;
ON idbMI1.f[0].p.read.ai.DQ;
    = #tIL.Source[7];

NETWORK
TITLE = Item 35 DV1111 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[8];


NETWORK
TITLE = Item 35 DV1111 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 9;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 35 DV1111 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 35 DV1111 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[35]
    );

NETWORK
TITLE = Item 36 DV1113 : PW Supply Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 36 DV1113 interlock source : ON ZSC1107 Vessel inlet line Flowpath Indicator IN   ON ZSC1105 Vessel PW Supply Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    ON(;
    L "idbZSC2".f[2].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
ON(;
    L "idbZSC2".f[1].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 36 DV1113 interlock source : A DV1115 Vessel PS Supply for PW Loop OPENED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A(;
    L "idbPOS2".f[5].p.read.mc.STATE;
    L "dbCONST".BLK.POS2.STATE.OPENED;
    ==I;
    );
    = #tIL.Source[1];

NETWORK
TITLE = Item 36 DV1113 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 36 DV1113 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 36 DV1113 interlock source : A PI1103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[4];

NETWORK
TITLE = Item 36 DV1113 interlock source : A ASL1000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[5];

NETWORK
TITLE = Item 36 DV1113 interlock source : AN ZSC1101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[0].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[6];

NETWORK
TITLE = Item 36 DV1113 interlock source : O MI1101 Mx Mass Indicator High High Alarm ALARM_HH   ON MI1101 Mx Mass Indicator Bad DQ DQ
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    O idbMI1.f[0].p.read.ai.ALARM_HH;
ON idbMI1.f[0].p.read.ai.DQ;
    = #tIL.Source[7];

NETWORK
TITLE = Item 36 DV1113 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[8];


NETWORK
TITLE = Item 36 DV1113 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 9;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 36 DV1113 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 36 DV1113 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[36]
    );

NETWORK
TITLE = Item 37 DV1115 : PS Supply for PW Loop initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 37 DV1115 interlock source : ON ZSC1107 Vessel inlet line Flowpath Indicator IN   ON ZSC1105 Vessel PW Supply Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    ON(;
    L "idbZSC2".f[2].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
ON(;
    L "idbZSC2".f[1].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 37 DV1115 interlock source : A DV1113 Vessel PW Supply Valve OPENED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A(;
    L "idbPOS4".f[29].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.OPENED;
    ==I;
    );
    = #tIL.Source[1];

NETWORK
TITLE = Item 37 DV1115 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 37 DV1115 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 37 DV1115 interlock source : A PI1103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[4];

NETWORK
TITLE = Item 37 DV1115 interlock source : A ASL1000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[5];

NETWORK
TITLE = Item 37 DV1115 interlock source : AN ZSC1101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[0].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[6];

NETWORK
TITLE = Item 37 DV1115 interlock source : O MI1101 Mx Mass Indicator High High Alarm ALARM_HH   ON MI1101 Mx Mass Indicator Bad DQ DQ
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    O idbMI1.f[0].p.read.ai.ALARM_HH;
ON idbMI1.f[0].p.read.ai.DQ;
    = #tIL.Source[7];

NETWORK
TITLE = Item 37 DV1115 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[8];


NETWORK
TITLE = Item 37 DV1115 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 9;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 37 DV1115 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 37 DV1115 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[37]
    );

NETWORK
TITLE = Item 38 DV1117 : Spray Ball 1 Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 38 DV1117 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 38 DV1117 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 38 DV1117 interlock source : A PI1103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 38 DV1117 interlock source : A ASL1000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 38 DV1117 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[4];


NETWORK
TITLE = Item 38 DV1117 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 38 DV1117 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 38 DV1117 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[38]
    );

NETWORK
TITLE = Item 39 DV1119 : Spray Ball 2 Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 39 DV1119 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 39 DV1119 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 39 DV1119 interlock source : A PI1103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 39 DV1119 interlock source : A ASL1000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 39 DV1119 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[4];


NETWORK
TITLE = Item 39 DV1119 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 39 DV1119 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 39 DV1119 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[39]
    );

NETWORK
TITLE = Item 40 DV1121 : Outlet Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 40 DV1121 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 40 DV1121 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 40 DV1121 interlock source : A ASL1000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 40 DV1121 interlock source : A TI1109 Manufacturing Filtration Line Inline Heat Exchanger Temperature INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbTI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 40 DV1121 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[4];


NETWORK
TITLE = Item 40 DV1121 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 40 DV1121 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 40 DV1121 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[40]
    );

NETWORK
TITLE = Item 41 DV1135 : SMFLx filter outlet drain valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 41 DV1135 interlock source : AN ZSC1111 MMFLx Filtration Inlet Flowpath Indicator IN   AN ZSC1109 SMFLx Filtration Line outlet Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC2".f[4].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
AN(;
    L "idbZSC2".f[3].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 41 DV1135 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 41 DV1135 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 41 DV1135 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 41 DV1135 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 41 DV1135 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 41 DV1135 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[41]
    );

NETWORK
TITLE = Item 42 DV1137 : SMFLx filter outlet valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 42 DV1137 interlock source : AN ZSC1111 MMFLx Filtration Inlet Flowpath Indicator IN   AN ZSC1109 SMFLx Filtration Line outlet Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC2".f[4].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
AN(;
    L "idbZSC2".f[3].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 42 DV1137 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 42 DV1137 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 42 DV1137 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 42 DV1137 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 42 DV1137 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 42 DV1137 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[42]
    );

NETWORK
TITLE = Item 43 DV1171 : MMFLx filter inlet drain valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 43 DV1171 interlock source : AN ZSC1113 MMFLx Filtration Inlet Flowpath Indicator IN   AN ZSC1115 MMFLx Filtration Inlet CIP & SIP Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC2".f[5].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
AN(;
    L "idbZSC2".f[6].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 43 DV1171 interlock source : AN ZSC1115 MMFLx Filtration Inlet CIP & SIP Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC2".f[6].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[1];

NETWORK
TITLE = Item 43 DV1171 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 43 DV1171 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 43 DV1171 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[4];


NETWORK
TITLE = Item 43 DV1171 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 43 DV1171 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 43 DV1171 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[43]
    );

NETWORK
TITLE = Item 44 DV1173 : MMFLx Inline Heat Exchanger inlet valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 44 DV1173 interlock source : AN ZSC1113 MMFLx Filtration Inlet Flowpath Indicator IN   AN ZSC1115 MMFLx Filtration Inlet CIP & SIP Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC2".f[5].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
AN(;
    L "idbZSC2".f[6].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 44 DV1173 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 44 DV1173 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 44 DV1173 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 44 DV1173 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 44 DV1173 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 44 DV1173 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[44]
    );

NETWORK
TITLE = Item 45 DV2101 : Vent Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 45 DV2101 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 45 DV2101 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 45 DV2101 interlock source : A PI2103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 45 DV2101 interlock source : A ASL2000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 45 DV2101 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[4];


NETWORK
TITLE = Item 45 DV2101 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 45 DV2101 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 45 DV2101 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[45]
    );

NETWORK
TITLE = Item 46 DV2103 : HP CA Supply Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 46 DV2103 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 46 DV2103 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 46 DV2103 interlock source : A PI2103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 46 DV2103 interlock source : A ASL2000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 46 DV2103 interlock source : AN ZSC2101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[1].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[4];

NETWORK
TITLE = Item 46 DV2103 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[5];


NETWORK
TITLE = Item 46 DV2103 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 6;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 46 DV2103 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 46 DV2103 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[46]
    );

NETWORK
TITLE = Item 47 DV2105 : LP CA Supply Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 47 DV2105 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 47 DV2105 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 47 DV2105 interlock source : A PI2103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 47 DV2105 interlock source : A ASL2000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 47 DV2105 interlock source : AN ZSC2101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[1].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[4];

NETWORK
TITLE = Item 47 DV2105 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[5];


NETWORK
TITLE = Item 47 DV2105 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 6;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 47 DV2105 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 47 DV2105 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[47]
    );

NETWORK
TITLE = Item 48 DV2107 : Vacuum valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 48 DV2107 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 48 DV2107 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 48 DV2107 interlock source : A PI2103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 48 DV2107 interlock source : A ASL2000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 48 DV2107 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[4];


NETWORK
TITLE = Item 48 DV2107 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 48 DV2107 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 48 DV2107 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[48]
    );

NETWORK
TITLE = Item 49 DV2109 : PS Supply for WFI Loop initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 49 DV2109 interlock source : ON ZSC2107 Vessel inlet line Flowpath Indicator IN   ON ZSC2103 Vessel WFI Supply Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    ON(;
    L "idbZSC2".f[9].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
ON(;
    L "idbZSC2".f[7].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 49 DV2109 interlock source : A DV2111 Vessel WFI Supply Valve OPENED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A(;
    L "idbPOS4".f[30].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.OPENED;
    ==I;
    );
    = #tIL.Source[1];

NETWORK
TITLE = Item 49 DV2109 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 49 DV2109 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 49 DV2109 interlock source : A PI2103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[4];

NETWORK
TITLE = Item 49 DV2109 interlock source : A ASL2000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[5];

NETWORK
TITLE = Item 49 DV2109 interlock source : AN ZSC2101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[1].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[6];

NETWORK
TITLE = Item 49 DV2109 interlock source : O MI2101 Mx Mass Indicator High High Alarm ALARM_HH   ON MI2101 Mx Mass Indicator Bad DQ DQ
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    O idbMI1.f[1].p.read.ai.ALARM_HH;
ON idbMI1.f[1].p.read.ai.DQ;
    = #tIL.Source[7];

NETWORK
TITLE = Item 49 DV2109 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[8];


NETWORK
TITLE = Item 49 DV2109 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 9;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 49 DV2109 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 49 DV2109 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[49]
    );

NETWORK
TITLE = Item 50 DV2111 : WFI Supply Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 50 DV2111 interlock source : ON ZSC2107 Vessel inlet line Flowpath Indicator IN   ON ZSC2103 Vessel WFI Supply Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    ON(;
    L "idbZSC2".f[9].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
ON(;
    L "idbZSC2".f[7].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 50 DV2111 interlock source : A DV2109 Vessel PS Supply for WFI Loop OPENED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A(;
    L "idbPOS2".f[17].p.read.mc.STATE;
    L "dbCONST".BLK.POS2.STATE.OPENED;
    ==I;
    );
    = #tIL.Source[1];

NETWORK
TITLE = Item 50 DV2111 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 50 DV2111 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 50 DV2111 interlock source : A PI2103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[4];

NETWORK
TITLE = Item 50 DV2111 interlock source : A ASL2000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[5];

NETWORK
TITLE = Item 50 DV2111 interlock source : AN ZSC2101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[1].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[6];

NETWORK
TITLE = Item 50 DV2111 interlock source : O MI2101 Mx Mass Indicator High High Alarm ALARM_HH   ON MI2101 Mx Mass Indicator Bad DQ DQ
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    O idbMI1.f[1].p.read.ai.ALARM_HH;
ON idbMI1.f[1].p.read.ai.DQ;
    = #tIL.Source[7];

NETWORK
TITLE = Item 50 DV2111 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[8];


NETWORK
TITLE = Item 50 DV2111 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 9;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 50 DV2111 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 50 DV2111 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[50]
    );

NETWORK
TITLE = Item 51 DV2113 : PW Supply Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 51 DV2113 interlock source : ON ZSC2107 Vessel inlet line Flowpath Indicator IN   ON ZSC2105 Vessel PW Supply Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    ON(;
    L "idbZSC2".f[9].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
ON(;
    L "idbZSC2".f[8].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 51 DV2113 interlock source : A DV2115 Vessel PS Supply for PW Loop OPENED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A(;
    L "idbPOS2".f[18].p.read.mc.STATE;
    L "dbCONST".BLK.POS2.STATE.OPENED;
    ==I;
    );
    = #tIL.Source[1];

NETWORK
TITLE = Item 51 DV2113 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 51 DV2113 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 51 DV2113 interlock source : A PI2103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[4];

NETWORK
TITLE = Item 51 DV2113 interlock source : A ASL2000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[5];

NETWORK
TITLE = Item 51 DV2113 interlock source : AN ZSC2101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[1].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[6];

NETWORK
TITLE = Item 51 DV2113 interlock source : O MI2101 Mx Mass Indicator High High Alarm ALARM_HH   ON MI2101 Mx Mass Indicator Bad DQ DQ
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    O idbMI1.f[1].p.read.ai.ALARM_HH;
ON idbMI1.f[1].p.read.ai.DQ;
    = #tIL.Source[7];

NETWORK
TITLE = Item 51 DV2113 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[8];


NETWORK
TITLE = Item 51 DV2113 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 9;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 51 DV2113 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 51 DV2113 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[51]
    );

NETWORK
TITLE = Item 52 DV2115 : PS Supply for PW Loop initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 52 DV2115 interlock source : ON ZSC2107 Vessel inlet line Flowpath Indicator IN   ON ZSC2105 Vessel PW Supply Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    ON(;
    L "idbZSC2".f[9].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
ON(;
    L "idbZSC2".f[8].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 52 DV2115 interlock source : A DV2113 Vessel PW Supply Valve OPENED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A(;
    L "idbPOS4".f[31].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.OPENED;
    ==I;
    );
    = #tIL.Source[1];

NETWORK
TITLE = Item 52 DV2115 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 52 DV2115 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 52 DV2115 interlock source : A PI2103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[4];

NETWORK
TITLE = Item 52 DV2115 interlock source : A ASL2000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[5];

NETWORK
TITLE = Item 52 DV2115 interlock source : AN ZSC2101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[1].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[6];

NETWORK
TITLE = Item 52 DV2115 interlock source : O MI2101 Mx Mass Indicator High High Alarm ALARM_HH   ON MI2101 Mx Mass Indicator Bad DQ DQ
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    O idbMI1.f[1].p.read.ai.ALARM_HH;
ON idbMI1.f[1].p.read.ai.DQ;
    = #tIL.Source[7];

NETWORK
TITLE = Item 52 DV2115 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[8];


NETWORK
TITLE = Item 52 DV2115 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 9;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 52 DV2115 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 52 DV2115 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[52]
    );

NETWORK
TITLE = Item 53 DV2117 : Spray Ball 1 Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 53 DV2117 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 53 DV2117 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 53 DV2117 interlock source : A PI2103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 53 DV2117 interlock source : A ASL2000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 53 DV2117 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[4];


NETWORK
TITLE = Item 53 DV2117 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 53 DV2117 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 53 DV2117 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[53]
    );

NETWORK
TITLE = Item 54 DV2119 : Spray Ball 2 Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 54 DV2119 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 54 DV2119 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 54 DV2119 interlock source : A PI2103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 54 DV2119 interlock source : A ASL2000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 54 DV2119 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[4];


NETWORK
TITLE = Item 54 DV2119 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 54 DV2119 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 54 DV2119 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[54]
    );

NETWORK
TITLE = Item 55 DV2121 : Outlet Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 55 DV2121 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 55 DV2121 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 55 DV2121 interlock source : A ASL2000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 55 DV2121 interlock source : A TI2109 Manufacturing Filtration Line Inline Heat Exchanger Temperature INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbTI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 55 DV2121 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[4];


NETWORK
TITLE = Item 55 DV2121 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 55 DV2121 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 55 DV2121 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[55]
    );

NETWORK
TITLE = Item 56 DV2135 : SMFLx filter outlet drain valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 56 DV2135 interlock source : AN ZSC2111 MMFLx Filtration Inlet Flowpath Indicator IN   AN ZSC2109 SMFLx Filtration Line outlet Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC2".f[11].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
AN(;
    L "idbZSC2".f[10].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 56 DV2135 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 56 DV2135 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 56 DV2135 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 56 DV2135 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 56 DV2135 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 56 DV2135 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[56]
    );

NETWORK
TITLE = Item 57 DV2137 : SMFLx filter outlet valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 57 DV2137 interlock source : AN ZSC2111 MMFLx Filtration Inlet Flowpath Indicator IN   AN ZSC2109 SMFLx Filtration Line outlet Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC2".f[11].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
AN(;
    L "idbZSC2".f[10].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 57 DV2137 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 57 DV2137 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 57 DV2137 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 57 DV2137 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 57 DV2137 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 57 DV2137 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[57]
    );

NETWORK
TITLE = Item 58 DV2171 : MMFLx filter inlet drain valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 58 DV2171 interlock source : AN ZSC2113 MMFLx Filtration Inlet Flowpath Indicator IN   AN ZSC2115 MMFLx Filtration Inlet CIP & SIP Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC2".f[12].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
AN(;
    L "idbZSC2".f[13].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 58 DV2171 interlock source : AN ZSC2115 MMFLx Filtration Inlet CIP & SIP Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC2".f[13].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[1];

NETWORK
TITLE = Item 58 DV2171 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 58 DV2171 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 58 DV2171 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[4];


NETWORK
TITLE = Item 58 DV2171 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 58 DV2171 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 58 DV2171 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[58]
    );

NETWORK
TITLE = Item 59 DV2173 : MMFLx Inline Heat Exchanger inlet valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 59 DV2173 interlock source : AN ZSC2113 MMFLx Filtration Inlet Flowpath Indicator IN   AN ZSC2115 MMFLx Filtration Inlet CIP & SIP Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC2".f[12].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
AN(;
    L "idbZSC2".f[13].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 59 DV2173 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 59 DV2173 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 59 DV2173 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 59 DV2173 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 59 DV2173 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 59 DV2173 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[59]
    );

NETWORK
TITLE = Item 60 DV3101 : Vent Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 60 DV3101 interlock source : A RD3101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[15].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 60 DV3101 interlock source : A ES3100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[10].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 60 DV3101 interlock source : A PI3103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 60 DV3101 interlock source : A ASL3000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 60 DV3101 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 60 DV3101 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 60 DV3101 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[60]
    );

NETWORK
TITLE = Item 61 DV3103 : HP CA Supply Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 61 DV3103 interlock source : A RD3101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[15].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 61 DV3103 interlock source : A ES3100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[10].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 61 DV3103 interlock source : A PI3103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 61 DV3103 interlock source : A ASL3000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 61 DV3103 interlock source : AN ZSC3101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[2].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[4];


NETWORK
TITLE = Item 61 DV3103 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 61 DV3103 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 61 DV3103 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[61]
    );

NETWORK
TITLE = Item 62 DV3105 : LP CA Supply Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 62 DV3105 interlock source : A RD3101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[15].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 62 DV3105 interlock source : A ES3100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[10].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 62 DV3105 interlock source : A PI3103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 62 DV3105 interlock source : A ASL3000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 62 DV3105 interlock source : AN ZSC3101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[2].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[4];


NETWORK
TITLE = Item 62 DV3105 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 62 DV3105 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 62 DV3105 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[62]
    );

NETWORK
TITLE = Item 63 DV3107 : Vacuum valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 63 DV3107 interlock source : A RD3101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[15].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 63 DV3107 interlock source : A ES3100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[10].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 63 DV3107 interlock source : A PI3103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 63 DV3107 interlock source : A ASL3000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 63 DV3107 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 63 DV3107 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 63 DV3107 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[63]
    );

NETWORK
TITLE = Item 64 DV3109 : PS Supply for WFI Loop initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 64 DV3109 interlock source : ON ZSC3107 Vessel inlet line Flowpath Indicator IN   ON ZSC3103 Vessel WFI Supply Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    ON(;
    L "idbZSC2".f[16].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
ON(;
    L "idbZSC2".f[14].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 64 DV3109 interlock source : A DV3111 Vessel WFI Supply Valve OPENED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A(;
    L "idbPOS4".f[32].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.OPENED;
    ==I;
    );
    = #tIL.Source[1];

NETWORK
TITLE = Item 64 DV3109 interlock source : A RD3101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[15].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 64 DV3109 interlock source : A ES3100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[10].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 64 DV3109 interlock source : A PI3103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[4];

NETWORK
TITLE = Item 64 DV3109 interlock source : A ASL3000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[5];

NETWORK
TITLE = Item 64 DV3109 interlock source : AN ZSC3101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[2].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[6];


NETWORK
TITLE = Item 64 DV3109 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 7;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 64 DV3109 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 64 DV3109 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[64]
    );

NETWORK
TITLE = Item 65 DV3111 : WFI Supply Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 65 DV3111 interlock source : ON ZSC3107 Vessel inlet line Flowpath Indicator IN   ON ZSC3103 Vessel WFI Supply Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    ON(;
    L "idbZSC2".f[16].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
ON(;
    L "idbZSC2".f[14].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 65 DV3111 interlock source : A DV3109 Vessel PS Supply for WFI Loop OPENED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A(;
    L "idbPOS2".f[30].p.read.mc.STATE;
    L "dbCONST".BLK.POS2.STATE.OPENED;
    ==I;
    );
    = #tIL.Source[1];

NETWORK
TITLE = Item 65 DV3111 interlock source : A RD3101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[15].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 65 DV3111 interlock source : A ES3100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[10].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 65 DV3111 interlock source : A PI3103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[4];

NETWORK
TITLE = Item 65 DV3111 interlock source : A ASL3000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[5];

NETWORK
TITLE = Item 65 DV3111 interlock source : AN ZSC3101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[2].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[6];


NETWORK
TITLE = Item 65 DV3111 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 7;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 65 DV3111 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 65 DV3111 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[65]
    );

NETWORK
TITLE = Item 66 DV3113 : PW Supply Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 66 DV3113 interlock source : ON ZSC3107 Vessel inlet line Flowpath Indicator IN   ON ZSC3105 Vessel PW Supply Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    ON(;
    L "idbZSC2".f[16].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
ON(;
    L "idbZSC2".f[15].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 66 DV3113 interlock source : A DV3115 Vessel PS Supply for PW Loop OPENED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A(;
    L "idbPOS2".f[31].p.read.mc.STATE;
    L "dbCONST".BLK.POS2.STATE.OPENED;
    ==I;
    );
    = #tIL.Source[1];

NETWORK
TITLE = Item 66 DV3113 interlock source : A RD3101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[15].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 66 DV3113 interlock source : A ES3100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[10].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 66 DV3113 interlock source : A PI3103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[4];

NETWORK
TITLE = Item 66 DV3113 interlock source : A ASL3000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[5];

NETWORK
TITLE = Item 66 DV3113 interlock source : AN ZSC3101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[2].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[6];


NETWORK
TITLE = Item 66 DV3113 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 7;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 66 DV3113 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 66 DV3113 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[66]
    );

NETWORK
TITLE = Item 67 DV3115 : PS Supply for PW Loop initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 67 DV3115 interlock source : ON ZSC3107 Vessel inlet line Flowpath Indicator IN   ON ZSC3105 Vessel PW Supply Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    ON(;
    L "idbZSC2".f[16].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
ON(;
    L "idbZSC2".f[15].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 67 DV3115 interlock source : A DV3113 Vessel PW Supply Valve OPENED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A(;
    L "idbPOS4".f[33].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.OPENED;
    ==I;
    );
    = #tIL.Source[1];

NETWORK
TITLE = Item 67 DV3115 interlock source : A RD3101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[15].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 67 DV3115 interlock source : A ES3100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[10].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 67 DV3115 interlock source : A PI3103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[4];

NETWORK
TITLE = Item 67 DV3115 interlock source : A ASL3000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[5];

NETWORK
TITLE = Item 67 DV3115 interlock source : AN ZSC3101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[2].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[6];


NETWORK
TITLE = Item 67 DV3115 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 7;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 67 DV3115 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 67 DV3115 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[67]
    );

NETWORK
TITLE = Item 68 DV3117 : Spray Ball 1 Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 68 DV3117 interlock source : A RD3101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[15].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 68 DV3117 interlock source : A ES3100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[10].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 68 DV3117 interlock source : A PI3103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 68 DV3117 interlock source : A ASL3000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 68 DV3117 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 68 DV3117 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 68 DV3117 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[68]
    );

NETWORK
TITLE = Item 69 DV3119 : Spray Ball 2 Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 69 DV3119 interlock source : A RD3101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[15].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 69 DV3119 interlock source : A ES3100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[10].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 69 DV3119 interlock source : A PI3103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 69 DV3119 interlock source : A ASL3000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 69 DV3119 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 69 DV3119 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 69 DV3119 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[69]
    );

NETWORK
TITLE = Item 70 DV3121 : Outlet Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 70 DV3121 interlock source : A RD3101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[15].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 70 DV3121 interlock source : A ES3100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[10].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 70 DV3121 interlock source : A ASL3000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 70 DV3121 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 70 DV3121 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 70 DV3121 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[70]
    );

NETWORK
TITLE = Item 71 DV3125 : Sy Transfer line Valve Matrix SMFLx initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 71 DV3125 interlock source : AN ZSC3111 SMFL1 to S1/BFS1 Flowpath Indicator IN   AN ZSC3113 SMFL2 to S1/BFS1 Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC2".f[17].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
AN(;
    L "idbZSC2".f[18].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];


NETWORK
TITLE = Item 71 DV3125 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 1;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 71 DV3125 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 71 DV3125 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[71]
    );

NETWORK
TITLE = Item 72 DV3129 : Sy Transfer line Valve Matrix FLz initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 72 DV3129 interlock source : AN ZSC3115 S1 to F1P1 Flowpath Indicator IN   AN ZSC3117 S1 to F2P1 Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC2".f[19].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
AN(;
    L "idbZSC2".f[20].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];


NETWORK
TITLE = Item 72 DV3129 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 1;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 72 DV3129 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 72 DV3129 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[72]
    );

NETWORK
TITLE = Item 73 DV4101 : Vent Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 73 DV4101 interlock source : A RD4101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[16].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 73 DV4101 interlock source : A ES4100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[12].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 73 DV4101 interlock source : A PI4103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 73 DV4101 interlock source : A ASL4000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 73 DV4101 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 73 DV4101 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 73 DV4101 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[73]
    );

NETWORK
TITLE = Item 74 DV4103 : HP CA Supply Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 74 DV4103 interlock source : A RD4101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[16].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 74 DV4103 interlock source : A ES4100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[12].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 74 DV4103 interlock source : A PI4103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 74 DV4103 interlock source : A ASL4000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 74 DV4103 interlock source : AN ZSC4101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[3].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[4];


NETWORK
TITLE = Item 74 DV4103 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 74 DV4103 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 74 DV4103 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[74]
    );

NETWORK
TITLE = Item 75 DV4105 : LP CA Supply Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 75 DV4105 interlock source : A RD4101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[16].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 75 DV4105 interlock source : A ES4100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[12].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 75 DV4105 interlock source : A PI4103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 75 DV4105 interlock source : A ASL4000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 75 DV4105 interlock source : AN ZSC4101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[3].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[4];


NETWORK
TITLE = Item 75 DV4105 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 5;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 75 DV4105 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 75 DV4105 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[75]
    );

NETWORK
TITLE = Item 76 DV4107 : Vacuum valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 76 DV4107 interlock source : A RD4101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[16].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 76 DV4107 interlock source : A ES4100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[12].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 76 DV4107 interlock source : A PI4103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 76 DV4107 interlock source : A ASL4000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 76 DV4107 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 76 DV4107 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 76 DV4107 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[76]
    );

NETWORK
TITLE = Item 77 DV4109 : PS Supply for WFI Loop initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 77 DV4109 interlock source : ON ZSC4107 Vessel inlet line Flowpath Indicator IN   ON ZSC4103 Vessel WFI Supply Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    ON(;
    L "idbZSC2".f[23].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
ON(;
    L "idbZSC2".f[21].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 77 DV4109 interlock source : A DV4111 Vessel WFI Supply Valve OPENED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A(;
    L "idbPOS4".f[34].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.OPENED;
    ==I;
    );
    = #tIL.Source[1];

NETWORK
TITLE = Item 77 DV4109 interlock source : A RD4101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[16].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 77 DV4109 interlock source : A ES4100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[12].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 77 DV4109 interlock source : A PI4103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[4];

NETWORK
TITLE = Item 77 DV4109 interlock source : A ASL4000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[5];

NETWORK
TITLE = Item 77 DV4109 interlock source : AN ZSC4101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[3].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[6];


NETWORK
TITLE = Item 77 DV4109 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 7;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 77 DV4109 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 77 DV4109 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[77]
    );

NETWORK
TITLE = Item 78 DV4111 : WFI Supply Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 78 DV4111 interlock source : ON ZSC4107 Vessel inlet line Flowpath Indicator IN   ON ZSC4103 Vessel WFI Supply Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    ON(;
    L "idbZSC2".f[23].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
ON(;
    L "idbZSC2".f[21].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 78 DV4111 interlock source : A DV4109 Vessel PS Supply for WFI Loop OPENED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A(;
    L "idbPOS2".f[43].p.read.mc.STATE;
    L "dbCONST".BLK.POS2.STATE.OPENED;
    ==I;
    );
    = #tIL.Source[1];

NETWORK
TITLE = Item 78 DV4111 interlock source : A RD4101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[16].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 78 DV4111 interlock source : A ES4100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[12].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 78 DV4111 interlock source : A PI4103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[4];

NETWORK
TITLE = Item 78 DV4111 interlock source : A ASL4000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[5];

NETWORK
TITLE = Item 78 DV4111 interlock source : AN ZSC4101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[3].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[6];


NETWORK
TITLE = Item 78 DV4111 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 7;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 78 DV4111 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 78 DV4111 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[78]
    );

NETWORK
TITLE = Item 79 DV4113 : PW Supply Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 79 DV4113 interlock source : ON ZSC4107 Vessel inlet line Flowpath Indicator IN   ON ZSC4105 Vessel PW Supply Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    ON(;
    L "idbZSC2".f[23].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
ON(;
    L "idbZSC2".f[22].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 79 DV4113 interlock source : A DV4115 Vessel PS Supply for PW Loop OPENED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A(;
    L "idbPOS2".f[44].p.read.mc.STATE;
    L "dbCONST".BLK.POS2.STATE.OPENED;
    ==I;
    );
    = #tIL.Source[1];

NETWORK
TITLE = Item 79 DV4113 interlock source : A RD4101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[16].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 79 DV4113 interlock source : A ES4100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[12].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 79 DV4113 interlock source : A PI4103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[4];

NETWORK
TITLE = Item 79 DV4113 interlock source : A ASL4000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[5];

NETWORK
TITLE = Item 79 DV4113 interlock source : AN ZSC4101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[3].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[6];


NETWORK
TITLE = Item 79 DV4113 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 7;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 79 DV4113 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 79 DV4113 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[79]
    );

NETWORK
TITLE = Item 80 DV4115 : PS Supply for PW Loop initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 80 DV4115 interlock source : ON ZSC4107 Vessel inlet line Flowpath Indicator IN   ON ZSC4105 Vessel PW Supply Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    ON(;
    L "idbZSC2".f[23].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
ON(;
    L "idbZSC2".f[22].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 80 DV4115 interlock source : A DV4113 Vessel PW Supply Valve OPENED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A(;
    L "idbPOS4".f[35].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.OPENED;
    ==I;
    );
    = #tIL.Source[1];

NETWORK
TITLE = Item 80 DV4115 interlock source : A RD4101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[16].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 80 DV4115 interlock source : A ES4100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[12].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 80 DV4115 interlock source : A PI4103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[4];

NETWORK
TITLE = Item 80 DV4115 interlock source : A ASL4000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[5];

NETWORK
TITLE = Item 80 DV4115 interlock source : AN ZSC4101 Vessel Manway Closed Indicator CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC1".f[3].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC1.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[6];


NETWORK
TITLE = Item 80 DV4115 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 7;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 80 DV4115 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 80 DV4115 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[80]
    );

NETWORK
TITLE = Item 81 DV4117 : Spray Ball 1 Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 81 DV4117 interlock source : A RD4101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[16].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 81 DV4117 interlock source : A ES4100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[12].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 81 DV4117 interlock source : A PI4103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 81 DV4117 interlock source : A ASL4000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 81 DV4117 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 81 DV4117 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 81 DV4117 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[81]
    );

NETWORK
TITLE = Item 82 DV4119 : Spray Ball 2 Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 82 DV4119 interlock source : A RD4101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[16].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 82 DV4119 interlock source : A ES4100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[12].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 82 DV4119 interlock source : A PI4103 Vessel Pressure Indicator INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbPI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 82 DV4119 interlock source : A ASL4000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 82 DV4119 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 82 DV4119 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 82 DV4119 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[82]
    );

NETWORK
TITLE = Item 83 DV4121 : Outlet Valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 83 DV4121 interlock source : A RD4101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[16].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 83 DV4121 interlock source : A ES4100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[12].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 83 DV4121 interlock source : A ASL4000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 83 DV4121 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 83 DV4121 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 83 DV4121 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[83]
    );

NETWORK
TITLE = Item 84 DV4125 : Sy Transfer line Valve Matrix SMFLx initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 84 DV4125 interlock source : AN ZSC4111 SMFL1 to S1/BFS1 Flowpath Indicator IN   AN ZSC4113 SMFL2 to S1/BFS1 Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC2".f[24].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
AN(;
    L "idbZSC2".f[25].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];


NETWORK
TITLE = Item 84 DV4125 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 1;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 84 DV4125 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 84 DV4125 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[84]
    );

NETWORK
TITLE = Item 85 DV4129 : Sy Transfer line Valve Matrix FLz initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 85 DV4129 interlock source : AN ZSC4115 S1 to F1P1 Flowpath Indicator IN   AN ZSC4117 S1 to F2P1 Flowpath Indicator IN
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbZSC2".f[26].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
AN(;
    L "idbZSC2".f[27].p.read.mc.STATE;
    L "dbCONST".BLK.ZSC2.STATE.IN;
    ==I;
    );
    = #tIL.Source[0];


NETWORK
TITLE = Item 85 DV4129 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 1;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 85 DV4129 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 85 DV4129 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[85]
    );

NETWORK
TITLE = Item 86 HE1101 : Electric Heating Element initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 86 HE1101 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 86 HE1101 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 86 HE1101 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 86 HE1101 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 86 HE1101 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 86 HE1101 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[86]
    );

NETWORK
TITLE = Item 87 HE2101 : Electric Heating Element initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 87 HE2101 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 87 HE2101 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 87 HE2101 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 87 HE2101 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 87 HE2101 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 87 HE2101 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[87]
    );

NETWORK
TITLE = Item 88 HE3101 : Electric Heating Element initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 88 HE3101 interlock source : A RD3101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[15].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 88 HE3101 interlock source : A ES3100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[10].p.read.mc.INTERLOCK;
    = #tIL.Source[1];


NETWORK
TITLE = Item 88 HE3101 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 2;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 88 HE3101 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 88 HE3101 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[88]
    );

NETWORK
TITLE = Item 89 HE4101 : Electric Heating Element initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 89 HE4101 interlock source : A RD4101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[16].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 89 HE4101 interlock source : A ES4100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[12].p.read.mc.INTERLOCK;
    = #tIL.Source[1];


NETWORK
TITLE = Item 89 HE4101 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 2;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 89 HE4101 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 89 HE4101 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[89]
    );

NETWORK
TITLE = Item 90 PC1103 : Pressure Control initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 90 PC1103 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 90 PC1103 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 90 PC1103 interlock source : A ASL1000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[0].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 90 PC1103 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 90 PC1103 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 90 PC1103 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 90 PC1103 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[90]
    );

NETWORK
TITLE = Item 91 PC2103 : Pressure Control initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 91 PC2103 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 91 PC2103 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 91 PC2103 interlock source : A ASL2000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[1].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 91 PC2103 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 91 PC2103 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 91 PC2103 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 91 PC2103 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[91]
    );

NETWORK
TITLE = Item 92 PC3103 : Pressure Control initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 92 PC3103 interlock source : A RD3101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[15].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 92 PC3103 interlock source : A ES3100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[10].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 92 PC3103 interlock source : A ASL3000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[2].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 92 PC3103 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 92 PC3103 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 92 PC3103 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[92]
    );

NETWORK
TITLE = Item 93 PC4103 : Pressure Control initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 93 PC4103 interlock source : A RD4101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[16].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 93 PC4103 interlock source : A ES4100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[12].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 93 PC4103 interlock source : A ASL4000 Vessel Instrument Air Switch INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[3].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 93 PC4103 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 93 PC4103 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 93 PC4103 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[93]
    );

NETWORK
TITLE = Item 94 TC1109 : MMFLx Inline Heat Exchanger Temperature Control initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 94 TC1109 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 94 TC1109 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 94 TC1109 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 94 TC1109 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 94 TC1109 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 94 TC1109 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[94]
    );

NETWORK
TITLE = Item 95 TC2109 : MMFLx Inline Heat Exchanger Temperature Control initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 95 TC2109 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 95 TC2109 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 95 TC2109 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 95 TC2109 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 95 TC2109 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 95 TC2109 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[95]
    );

NETWORK
TITLE = Item 96 TCV1157 : MMFLx cooling water supply control valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 96 TCV1157 interlock source : AN BAV1167 Manufacturing Filtration Line Cooling Water Supply Drain Valve CLOSED   AN BAV1169 Manufacturing Filtration Line Cooling Water Return Drain Valve CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbPOS4".f[6].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.CLOSED;
    ==I;
    );
AN(;
    L "idbPOS4".f[7].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 96 TCV1157 interlock source : A RD1101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[13].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 96 TCV1157 interlock source : A ES1100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 96 TCV1157 interlock source : A ES1101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 96 TCV1157 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 96 TCV1157 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 96 TCV1157 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[96]
    );

NETWORK
TITLE = Item 97 TCV2157 : MMFLx cooling water supply control valve initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 97 TCV2157 interlock source : AN BAV2167 Manufacturing Filtration Line Cooling Water Supply Drain Valve CLOSED   AN BAV2169 Manufacturing Filtration Line Cooling Water Return Drain Valve CLOSED
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    AN(;
    L "idbPOS4".f[14].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.CLOSED;
    ==I;
    );
AN(;
    L "idbPOS4".f[15].p.read.mc.STATE;
    L "dbCONST".BLK.POS4.STATE.CLOSED;
    ==I;
    );
    = #tIL.Source[0];

NETWORK
TITLE = Item 97 TCV2157 interlock source : A RD2101 Vessel Burst Disc ALARM
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[14].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 97 TCV2157 interlock source : A ES2100 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 97 TCV2157 interlock source : A ES2101 Mx Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[3];


NETWORK
TITLE = Item 97 TCV2157 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 4;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 97 TCV2157 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 97 TCV2157 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[97]
    );

NETWORK
TITLE = Item 98 VP1000 : MX Vacuum Pump 1 initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 98 VP1000 interlock source : A ES1100 M1 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 98 VP1000 interlock source : A ES1101 M1 Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 98 VP1000 interlock source : A ES1201 M2 Emergency Stop mounted on M1/M2 Shared HMI Feed to M1 INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[7].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 98 VP1000 interlock source : A ES2101 M2 Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 98 VP1000 interlock source : A ES1200 M2 Emergency Stop mounted on M2 HMI Feed to M1 INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[6].p.read.mc.INTERLOCK;
    = #tIL.Source[4];

NETWORK
TITLE = Item 98 VP1000 interlock source : A ES2100 M2 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[5];


NETWORK
TITLE = Item 98 VP1000 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 6;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 98 VP1000 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 98 VP1000 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[98]
    );

NETWORK
TITLE = Item 99 VP1001 : MX Vacuum Pump 2 initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 99 VP1001 interlock source : A ES1100 M1 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[4].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 99 VP1001 interlock source : A ES1101 M1 Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[5].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 99 VP1001 interlock source : A ES1201 M2 Emergency Stop mounted on M1/M2 Shared HMI Feed to M1 INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[7].p.read.mc.INTERLOCK;
    = #tIL.Source[2];

NETWORK
TITLE = Item 99 VP1001 interlock source : A ES2101 M2 Emergency Stop mounted on M1/M2 Shared HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[9].p.read.mc.INTERLOCK;
    = #tIL.Source[3];

NETWORK
TITLE = Item 99 VP1001 interlock source : A ES1200 M2 Emergency Stop mounted on M2 HMI Feed to M1 INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[6].p.read.mc.INTERLOCK;
    = #tIL.Source[4];

NETWORK
TITLE = Item 99 VP1001 interlock source : A ES2100 M2 Vessel Emergency Stop mounted on HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[8].p.read.mc.INTERLOCK;
    = #tIL.Source[5];


NETWORK
TITLE = Item 99 VP1001 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 6;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 99 VP1001 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 99 VP1001 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[99]
    );

NETWORK
TITLE = Item 100 VP3000 : SY Vacuum Pump 1 initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 100 VP3000 interlock source : A ES3100 S1 Emergency Stop mounted on S1 HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[10].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 100 VP3000 interlock source : A ES3400 S2 Emergency Stop mounted on S2 HMI Feed to S1 INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[11].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 100 VP3000 interlock source : A ES4100 S2 Emergency Stop mounted on S2 HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[12].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 100 VP3000 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 100 VP3000 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 100 VP3000 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[100]
    );

NETWORK
TITLE = Item 101 VP3001 : SY Vacuum Pump 2 initialise variables
    //------------------------------------------------------------------------//
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    // CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICAL INTERLOCK   CRITICA //
    //                                                                        //
    // Clear the interlock flag:                                              //
    //------------------------------------------------------------------------//
    A "alwaysLow";
    = #tIL.INTERLOCK;

    //------------------------------------------------------------------------//
    // Clear all interlock values to initialise them to off:                  //
    //------------------------------------------------------------------------//
    CALL FILL_BLK
    {value_type := 'Bool', count_type := 'UInt'}
    (   IN                   := 0 ,
        COUNT                := 15 ,
        OUT                  := #tIL.Source[0]
    );


NETWORK
TITLE = Item 101 VP3001 interlock source : A ES3100 S1 Emergency Stop mounted on S1 HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[10].p.read.mc.INTERLOCK;
    = #tIL.Source[0];

NETWORK
TITLE = Item 101 VP3001 interlock source : A ES3400 S2 Emergency Stop mounted on S2 HMI Feed to S1 INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[11].p.read.mc.INTERLOCK;
    = #tIL.Source[1];

NETWORK
TITLE = Item 101 VP3001 interlock source : A ES4100 S2 Emergency Stop mounted on S2 HMI INTERLOCK
    //------------------------------------------------------------------------//
    // Calculate the interlock condition:                                     //
    //------------------------------------------------------------------------//
    A idbDI1.f[12].p.read.mc.INTERLOCK;
    = #tIL.Source[2];


NETWORK
TITLE = Item 101 VP3001 : Number of interlocks
    //------------------------------------------------------------------------//
    // Number of interlocks
    //------------------------------------------------------------------------//
    L 3;
    T #tIL.numInterlocks;

NETWORK
TITLE = Item 101 VP3001 : Aggregate individual interlocks into overall INTERLOCK flag
    //------------------------------------------------------------------------//
    // Determine if an interlock is raised:                                   //
    //------------------------------------------------------------------------//
    O #tIL.Source[0];
    O #tIL.Source[1];
    O #tIL.Source[2];
    O #tIL.Source[3];
    O #tIL.Source[4];
    O #tIL.Source[5];
    O #tIL.Source[6];
    O #tIL.Source[7];
    O #tIL.Source[8];
    O #tIL.Source[9];
    O #tIL.Source[10];
    O #tIL.Source[11];
    O #tIL.Source[12];
    O #tIL.Source[13];
    O #tIL.Source[14];
    = #tIL.INTERLOCK;

NETWORK
TITLE = Item 101 VP3001 : Update the instance data
    //------------------------------------------------------------------------//
    // Update the instance DB with the calculated interlock flags:            //
    //------------------------------------------------------------------------//
    CALL MOVE
    {value_type := 'Variant'}
    (   IN                   := #tIL ,
        OUT                  := #p[101]
    );

END_FUNCTION_BLOCK
