//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Title:       udtMaster                                                     //
// Description: Master definition of user defined data structures.            //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      28-Feb-2018 NA        Reboot for S7-1500.             //
// 0.1 Khairul Basar    30-Sep-2009           Initial design.                 //
//----------------------------------------------------------------------------//
TYPE "udtClass"
VERSION : 1.0
    STRUCT
        idxClass : Int;
        cntChildren : Int;
        cntParameters : Int;
    END_STRUCT;
END_TYPE

TYPE "udtMCRead"
VERSION : 1.0
    STRUCT
        ALARM : Int;                   // Packed alarm bits
        ME : Int;                      // Unique ID of the block instance
        CMD_SAFE : Int;                // Safe command for the module
        STATE : Int;                   // State of the block
        HYGIENE : Int;                 // Hygiene status
        ERROR : Bool;                  // True if any error condition
        INTERLOCK : Bool;              // True if any interlock condition
        CRIL : Bool;                   // Critical Interlock that cannot be bypased.
        NCRIL : Bool;                  // Non-Critical Interlock that can be manually bypassed.
        FLOWPATH : Bool := False;      // True if a flowpath device where state must equal command.
        modeAUTO : Bool;
        modeMANUAL : Bool;
        modeOOS : Bool;
        isAvailable : Bool;            // True if block has no write
        isBatch : Bool;
        isMaster : Bool;
    END_STRUCT;
END_TYPE

TYPE "udtMCWrite"
VERSION : 1.0
    STRUCT
        CMD : Int;                     // Start/Stop command
        MODE : Int;                    // Select auto mode by default
        OWNER : Int;                   // Value to be set or reset by Parent
        RECIPE : Int;                  // Recipe ID of owning Process Cell
        SERIALNUM : Int;               // Unique batch or CIPSIP serial number
        SUBS : Int := 0;               // Selected substate for Block level modules
        ARMED : Bool := False;         // Flowpath monitoring is armed
        MAN_OVERRIDE : Bool;           // Manual override to bypass NCRIL
        isMaster : Bool;
    END_STRUCT;
END_TYPE

//TYPE "udtModeCommand"
//VERSION : 1.0
//    STRUCT
//        o : "udtMCWrite";
//        c : "udtMCCalculated";
//    END_STRUCT;
//END_TYPE

TYPE "udtModeCommandBLK"
VERSION : 1.0
    STRUCT
        transTime : Time := T#10s;               // Selected substate for Block level modules
        lastSUBS : Int := 0;
        lastSTATE : Int := 0;
        permitStart: Bool;
        eventModeAuto : Bool;
        eventModeManual : Bool;
        eventModeOOS : Bool;
        eventCmdStart : Bool;
        eventCmdStop : Bool;
        CHILD_FAIL : Bool;
        BAD_PARAM : Bool;
        edgeCommandStart : Bool;
        edgeCommandStop : Bool;
        edgeModeAuto : Bool;
        edgeModeManual : Bool;
        edgeModeOOS : Bool;
        stateINTERLOCKED : Bool;
        stateRUNNING : Bool;
        stateSTOPPED : Bool;
    END_STRUCT;
END_TYPE

TYPE "udtBLKError"
VERSION : 1.0
    STRUCT
        interlocked : Bool;
        badParameter : Bool;
        childError : Bool;
        childInterlocked : Bool;
        childMismatch : Bool;
        childNotAuto : Bool;
        childSafeState : Bool;
        childUnavailable : Bool;
    END_STRUCT;
END_TYPE

TYPE "udtModeCommandSFC"
VERSION : 1.0
    STRUCT
        CURSTEP : INT;
        MODE : Int := 1;               // AUTO by default
        SQ_CMD : INT;
        SQ_STATE : INT;
        STEPNO_JUMP : INT;
        NXT_STEP : INT;
        ERR_FAULT : BOOL;
        MAN_JUMP : BOOL;
        NO_VERIFIC : BOOL;
        OFF_IDLE : BOOL;
        PAUSED : BOOL;
        RUNNING : Bool;
        ABORTED : Bool;
        S_ACTIVE : BOOL;
        SQ_ACK : Bool;
        SQ_ERROR : Bool;
        SQ_FINISHED : BOOL;
        SQ_RESUME : BOOL;
        TRN_AND_JUMP : BOOL;
    END_STRUCT;
END_TYPE

TYPE "udtAnalog"
VERSION : 1.0
    STRUCT
        RANGE_UPPER : Real;            // Upper Range Limit in engineering units
        RANGE_LOWER : Real;            // Lower Range Limit in engineering units
        LIMIT_HH : Real;               // High High Alarm Limit
        LIMIT_H : Real;                // High Alarm Limit
        LIMIT_L : Real;                // Low Alarm Limit
        LIMIT_LL : Real;               // LowLow Alarm Limit
        PV : Real;                     // Measured Value (after scaling)
        RAW_INPUT : Int;               // Raw input signal from Field (4mA = 0, 20mA = 27648)
        USER_INPUT : Int;
        DQ : Bool;                     // MV data quality (0=Bad; 1=Good)
        ALARM_HH : Bool;               // High High Alarm is active
        ALARM_H : Bool;                // High Alarm is active
        ALARM_L : Bool;                // Low Alarm is active
        ALARM_LL : Bool;               // LowLow Alarm is active
        ENABLE_HH : Bool;              // Flag to Enable/Disable High High Alarm
        ENABLE_H : Bool;               // Flag to Enable/Disable High Alarm
        ENABLE_L : Bool;               // Flag to Enable/Disable Low Alarm
        ENABLE_LL : Bool;              // Flag to Enable/Disable Low Low Alarm
        POLARITY : Bool;               // Input signal is BIPOLAR (1) or UNIPOLAR (0)
        RANGE_ERROR : Bool;            // Range Error (<4mA or >20mA)
        BROKEN_WIRE : Bool;            // Broken Wire detection
        modeAUTO : Bool;
        modeMANUAL : Bool;
        modeOOS : Bool;
    END_STRUCT;
END_TYPE

TYPE "udtHygiene"
VERSION : 2.0
    STRUCT
        CLEAN_TIME : Time;
        STERILE_TIME : Time;
        CLEAN_TOUT : Bool;             // LAST STATUS
        STERILE_TOUT : Bool;           // LAST STATUS
        HYGIENE_STATE : Int;
        CLEAN_ELAPSED_TIME : Time;
        STERILE_ELAPSED_TIME : Time;
    END_STRUCT;
END_TYPE

TYPE "udtID"
VERSION : 2.0
    STRUCT
        ID : Array[1..6] of Char;      // Batch or cycle number identification number
    END_STRUCT;
END_TYPE

TYPE "udtInterlock"
VERSION : 1.0
    STRUCT
        critical : Bool;               // True if Critical interlock
        INTERLOCK : Bool;              // Overall Interlock flag
        Source : Array[0..14] of Bool; // Interlock source array
        numInterlocks : Int;           // Number of interlocks used in the source array
        isRead : Bool;
    END_STRUCT;
END_TYPE

TYPE "udtEventPrompt"
VERSION : 0.1
    STRUCT
        numSerial : Int;               // Unique batch or CIPSIP serial number
        active : Bool;
        trigger : Bool;
        confirmYes : Bool;
        confirmNo : Bool;
    END_STRUCT;
END_TYPE


//TYPE "udtEventLogMsg"
//VERSION : 1.0
//    STRUCT
//        event : Array[0..15] of Bool;   // SFC events for logging messages
//    END_STRUCT;
//END_TYPE
//TYPE "udtEventLogMsg"
//VERSION : 0.1
//    STRUCT
//        trigger : Bool;
//        edgeTrigger : Bool;
//        isBatch : Bool;
//        numSerial : Int;               // Unique batch or CIPSIP serial number
//    END_STRUCT;
//END_TYPE

TYPE "udtEventLogReal"
VERSION : 0.1
    STRUCT
        trigger : Bool;
        edgeTrigger : Bool;
        isBatch : Bool;
        numSerial : Int;               // Unique batch or CIPSIP serial number
        dataValue : Real;
    END_STRUCT;
END_TYPE

TYPE "udtEventLogTime"
VERSION : 0.1
    STRUCT
        trigger : Bool;
        edgeTrigger : Bool;
        isBatch : Bool;
        numSerial : Int;               // Unique batch or CIPSIP serial number
        dataValue : DWord;
    END_STRUCT;
END_TYPE

//TYPE "udtMsgPayload"
//VERSION : 2.0
//    STRUCT
//        isReal : Bool;
//        isBatch : Bool;
//        dataValue : DWord;
//    END_STRUCT;
//END_TYPE

//TYPE "udtEventProcess"
//VERSION : 2.0
//    STRUCT
//        trigger : Bool;
//        confirmYes : Bool;
//        confirmNo : Bool;
//        ackPending : Bool;
//        ackRequired : Bool;
//        eventID : DWord;
//        idxMessage : Byte;
//        payLoad : "udtMsgPayload";
//    END_STRUCT;
//END_TYPE

TYPE "udtEventSequence"
VERSION : 2.0
    STRUCT
        DisplayBatcnID : Int;
        BatchID : Array[1..6] of Char;
        MessageIndex : Word;
        UnitNo : Int;
    END_STRUCT;
END_TYPE

//TYPE "udtLogEvent"
//VERSION : 2.0
//    STRUCT
//        trigger : Bool;
//        Time_Index : Int;
//        Real_Index : Int;
//        timeValue : Time;
//        realValue : Real;
//    END_STRUCT;
//END_TYPE

TYPE "udtSFCCommand"
VERSION : 2.0
   STRUCT
      New : Int;                       // New SQ command
      Old : Int;                       // Old SQ command
      Start : Bool;                    // Initiate/start command
      Stop : Bool;                     // Stop command
      Pause : Bool;                    // Pause command
      Resume : Bool;                   // Resume command
      Abort : Bool;                    // Abort command
      Ack : Bool;                      // Acknowledge error/fault
      wrong : Bool;                    // unspecified command
      Changed : Bool;                  // command changed
   END_STRUCT;
END_TYPE

TYPE "udtSFCMode"
VERSION : 2.0
   STRUCT
      current : Int;
      history : Int;
      manual : Bool;
      auto : Bool;
      oos : Bool;
      wrong : Bool;
      changed : Bool;
   END_STRUCT;
END_TYPE

TYPE "udtSFCStep8"
VERSION : 2.0
   STRUCT
      Done : Array[1..8] of Bool;     // Step succesfully finished
      WithError : Array[1..8] of Bool;// Step unsuccesfully finished
      Initial : Int := 1;              // Initial/Starting Step number
      NumberCurrent : Int;             // Step number currently Processing
      NumberNext : Int;                // Next Step number to jump to
      ActionNumber : Int := 1;         // Step Action number,default=1
      Active : Bool;                   // Current Step number is active
      Finished : Bool;                 // Last step finished
      ActionFinished : Bool;           // Last Step Action finished
      JumpCtrl : Bool;                 // in Manual Jump , bypass transion code
      Jump : Bool;                     // Transition satisfied, jump to next Step specified
      TimerExpired : Bool;             // Step timer expired, Step taking too long time to finish
      Error_Fault : Bool;              // Step Error occurred
      NoVerification : Bool;           // No action verification , Bypass action verification
      ActionVerified : Bool;           // Action Verification satisfied
   END_STRUCT;
END_TYPE

TYPE "udtSFCStep16"
VERSION : 2.0
   STRUCT
      Done : Array[1..16] of Bool;     // Step succesfully finished
      WithError : Array[1..16] of Bool;// Step unsuccesfully finished
      Initial : Int := 1;              // Initial/Starting Step number
      NumberCurrent : Int;             // Step number currently Processing
      NumberNext : Int;                // Next Step number to jump to
      ActionNumber : Int := 1;         // Step Action number,default=1
      Active : Bool;                   // Current Step number is active
      Finished : Bool;                 // Last step finished
      ActionFinished : Bool;           // Last Step Action finished
      JumpCtrl : Bool;                 // in Manual Jump , bypass transion code
      Jump : Bool;                     // Transition satisfied, jump to next Step specified
      TimerExpired : Bool;             // Step timer expired, Step taking too long time to finish
      Error_Fault : Bool;              // Step Error occurred
      NoVerification : Bool;           // No action verification , Bypass action verification
      ActionVerified : Bool;           // Action Verification satisfied
   END_STRUCT;
END_TYPE

TYPE "udtSFCStep24"
VERSION : 2.0
   STRUCT
      Done : Array[1..24] of Bool;     // Step succesfully finished
      WithError : Array[1..24] of Bool;// Step unsuccesfully finished
      Initial : Int := 1;              // Initial/Starting Step number
      NumberCurrent : Int;             // Step number currently Processing
      NumberNext : Int;                // Next Step number to jump to
      ActionNumber : Int := 1;         // Step Action number,default=1
      Active : Bool;                   // Current Step number is active
      Finished : Bool;                 // Last step finished
      ActionFinished : Bool;           // Last Step Action finished
      JumpCtrl : Bool;                 // in Manual Jump , bypass transion code
      Jump : Bool;                     // Transition satisfied, jump to next Step specified
      TimerExpired : Bool;             // Step timer expired, Step taking too long time to finish
      Error_Fault : Bool;              // Step Error occurred
      NoVerification : Bool;           // No action verification , Bypass action verification
      ActionVerified : Bool;           // Action Verification satisfied
   END_STRUCT;
END_TYPE

TYPE "udtSFCStep32"
VERSION : 2.0
   STRUCT
      Done : Array[1..32] of Bool;     // Step succesfully finished
      WithError : Array[1..32] of Bool;// Step unsuccesfully finished
      Initial : Int := 1;              // Initial/Starting Step number
      NumberCurrent : Int;             // Step number currently Processing
      NumberNext : Int;                // Next Step number to jump to
      ActionNumber : Int := 1;         // Step Action number,default=1
      Active : Bool;                   // Current Step number is active
      Finished : Bool;                 // Last step finished
      ActionFinished : Bool;           // Last Step Action finished
      JumpCtrl : Bool;                 // in Manual Jump , bypass transion code
      Jump : Bool;                     // Transition satisfied, jump to next Step specified
      TimerExpired : Bool;             // Step timer expired, Step taking too long time to finish
      Error_Fault : Bool;              // Step Error occurred
      NoVerification : Bool;           // No action verification , Bypass action verification
      ActionVerified : Bool;           // Action Verification satisfied
   END_STRUCT;
END_TYPE

TYPE "udtSFCSequence8"
VERSION : 2.0
   STRUCT
      STEP : "udtSFCStep8";
      MODE : "udtSFCMode";
      CMD : "udtSFCCommand";
      FinalStep : Int;                 // LastStep number
      Finished : Bool;                 // Sequencer Finished
      Error_Fault : Bool;              // Sequence error
   END_STRUCT;
END_TYPE

TYPE "udtSFCSequence16"
VERSION : 2.0
   STRUCT
      STEP : "udtSFCStep16";
      MODE : "udtSFCMode";
      CMD : "udtSFCCommand";
      FinalStep : Int;                 // LastStep number
      Finished : Bool;                 // Sequencer Finished
      Error_Fault : Bool;              // Sequence error
   END_STRUCT;
END_TYPE

TYPE "udtSFCSequence24"
VERSION : 2.0
   STRUCT
      STEP : "udtSFCStep24";
      MODE : "udtSFCMode";
      CMD : "udtSFCCommand";
      FinalStep : Int;                 // LastStep number
      Finished : Bool;                 // Sequencer Finished
      Error_Fault : Bool;              // Sequence error
   END_STRUCT;
END_TYPE

TYPE "udtSFCSequence32"
VERSION : 2.0
   STRUCT
        STEP : "udtSFCStep32";
        MODE : "udtSFCMode";
        CMD : "udtSFCCommand";
        FinalStep : Int;                 // LastStep number
        Finished : Bool;                 // Sequencer Finished
        Error_Fault : Bool;              // Sequence error
   END_STRUCT;
END_TYPE

TYPE "udtHMIInterfaceSFC"
VERSION : 0.1
    STRUCT
        smc : "udtModeCommandSFC";
        sqStep : "udtSFCStep32";
        sfcSelected : Int;
        CMD_MODE : Int;
        CMD_SQ_CMD : Int;
        CMD_STEPNO_JUMP : Int;
        CMD_MAN_JUMP : Bool;
    END_STRUCT;
END_TYPE

TYPE "udtHMIInterfaceBLK"
VERSION : 0.1
    STRUCT
        mcr : "udtMCRead";
        mcw : "udtMCWrite";
        bmc : "udtModeCommandBLK";
        arrChild : Array[1..50] of Int;
        arrChildError : Array[1..50] of Bool;
        arrReal : Array[1..200] of Real;
        arrTime : Array[1..200] of Time;
        arrInt : Array[1..200] of Int;
        arrBool : Array[1..200] of Bool;
        blockSelected : Int;
        CMD_MODE : Int;
        CMD_CMD : Int;
        CMD_SUBS : Int;
    END_STRUCT;
END_TYPE
