//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//                Automatically Generated File - Do Not Edit                  //
//----------------------------------------------------------------------------//
// Class:       ifbMOD1                                                       //
// Description: Instances of MOD1                                             //
//                                                                            //
// Modulating control valve.                                                  //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      05-Jan-2018 NA        Reboot for S7-1500.             //
// 0.4 Khairul Basar    17-Sep-2009 CC-09/016 ifcMOD1 created for Interface.  //
// 0.3 Khairul Basar    16-Sep-2009 CC-09/016 Duplicate Input Parameters      //
//                                            deleted auto/manual both now    //
//                                            using same parameters,Interface //
//                                            FC used for Bumpless changeover.//
// 0.2 Khairul Basar    31-Aug-2009 CC-09/016 MODE initialize to Manual=1     //
//                                            Reset POSN to zero if OUT_Q=0.  //
// 0.1 Khairul Basar    03-Aug-2009 CC-09/016 Initial design.                 //
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "ifbMOD1"
TITLE = MOD1 Instances
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : REO
NAME : ifbMOD1
VERSION : 2.0

//----------------------------------------------------------------------------//
// Declare the instance objects of the class:                                 //
//----------------------------------------------------------------------------//
VAR
@@TEMPLATE_BEGIN@@
    @@INSTANCE@@ : "fbMOD1";   // @@DESCRIPTION@@
@@TEMPLATE_END@@
END_VAR

BEGIN
@@TEMPLATE_BEGIN@@
NETWORK
TITLE = @@INSTANCE@@ : @@DESCRIPTION@@
    //------------------------------------------------------------------------//
    // Get the critical interlock if there is one. If not set alwaysLow:      //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|CRIL_EXISTS@@
@@ATTR_DEFAULT_BEGIN@@
    A "alwaysLow";
@@ATTR_DEFAULT_END@@
    A "idbCRIL".@@INSTANCE@@cril.INTERLOCK;
@@ATTR_END|CRIL_EXISTS@@
    = #@@INSTANCE@@.mc.CRIL;

NETWORK
TITLE = @@INSTANCE@@ : @@DESCRIPTION@@
    //------------------------------------------------------------------------//
    // Get the non-critical interlock if there is one. If not set alwaysLow:  //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|NCRIL_EXISTS@@
@@ATTR_DEFAULT_BEGIN@@
    A "alwaysLow";
@@ATTR_DEFAULT_END@@
    A "idbNCRIL".@@INSTANCE@@ncril.INTERLOCK;
@@ATTR_END|NCRIL_EXISTS@@
    = #@@INSTANCE@@.mc.NCRIL;

NETWORK
TITLE = @@INSTANCE@@ : Unique ID
    //------------------------------------------------------------------------//
    // Set the instance unique ID:                                            //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.ID.@@INSTANCE@@;
    T #@@INSTANCE@@.mc.ME;

NETWORK
TITLE = @@INSTANCE@@ : Owner
    //------------------------------------------------------------------------//
    // Set the instance owner:                                                //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.ID.@@PARENT@@;
    T #@@INSTANCE@@.mc.OWNER;

NETWORK
TITLE = @@INSTANCE@@ : Safe Command
    //------------------------------------------------------------------------//
    // Set the safe command:                                                  //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.MOD1.SAFE.CMD;
    T #@@INSTANCE@@.mc.CMD_SAFE;

NETWORK
TITLE = @@INSTANCE@@ : Signal polarity
    //------------------------------------------------------------------------//
    // Input signal is BIPOLAR (1) or UNIPOLAR (0). Assume 0:                 //
    //------------------------------------------------------------------------//
    R #@@INSTANCE@@.POLARITY;

NETWORK
TITLE = @@INSTANCE@@ : Initial remote position is closed
    //------------------------------------------------------------------------//
    // Set the initial remote position to be zero which is closed:            //
    //------------------------------------------------------------------------//
    L 0.0;
    T #@@INSTANCE@@.POS_REMOTE;

NETWORK
TITLE = @@INSTANCE@@ : Initial local position is closed
    //------------------------------------------------------------------------//
    // Set the initial local position to be zero which is closed:             //
    //------------------------------------------------------------------------//
    L 0.0;
    T #@@INSTANCE@@.POS_LOCAL;

NETWORK
TITLE = @@INSTANCE@@ : @@DESCRIPTION@@
    //------------------------------------------------------------------------//
    // Call the class function to process each instance:                      //
    //------------------------------------------------------------------------//
    CALL #@@INSTANCE@@
    (   RAW_OUTPUT           := "@@INSTANCE@@-MOD"
    );

@@TEMPLATE_END@@
END_FUNCTION_BLOCK
