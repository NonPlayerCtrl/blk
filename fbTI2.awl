//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Class:       fbTI2                                                         //
// Description:                                                               //
// Line Mounted temperature Indicator.                                        //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      30-Jan-2018 NA        Reboot for S7-1500.             //
// 0.3 Mr. Khoon        01-Oct-2009 CC-09/016 Mode=Initialized,OOS coded.     //
// 0.2 Khairul Basar    03-Sep-2009 CC-09/016 ref1.                           //
// 0.1 Khairul Basar    03-Aug-2009           Initial design.                 //
//                                                                            //
// Ref1:                                                                      //
// Temperature high limit initialized to 150 deg C, which will be applicable  //
// to all the vessels. Following are initialized LIMIT_HH=132.0, LIMIT_H=129.0//
// and DATA_QUALITY=1, MODE=1.Now an USER_INPUT variable is added to allow    //
// alarm condition to be checked in Manual mode. In manual mode RAW_INPUT     //
// don't have any significance.                                               //
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "fbTI2"
TITLE = TI2 : Line Mounted temperature Indicator
{ S7_Optimized_Access := 'FALSE' }
NAME : fbTI2
AUTHOR : Rieckermann Engineering Operations
VERSION : 2.0

   VAR_INPUT
      MODE : Int := 2;
      RAW_INPUT : Int;   // Raw input signal from Field (4mA = 0, 20mA = 27648)
      USER_INPUT : Int;   // Equivallent of Analog Field value from HMI in manual mode
      UPPER_RANGE : Real := 150.0;   // Upper Range Limit in engineering units
      LOWER_RANGE : Real;   // Lower Range Limit in engineering units
      POLARITY : Bool;   // Input signal is BIPOLAR (1) or UNIPOLAR (0)
      LIMIT_HH : Real := 132.0;   // High High Alarm Limit
      LIMIT_H : Real := 129.0;   // High Alarm Limit
      LIMIT_L : Real := 2.0;   // Low Alarm Limit
      LIMIT_LL : Real;   // LowLow Alarm Limit
      ENABLE_HH : Bool := TRUE;   // Flag to Enable/Disable HighHigh Alarm
      ENABLE_H : Bool := TRUE;   // Flag to Enable/Disable High Alarm
      ENABLE_L : Bool := TRUE;   // Flag to Enable/Disable Low Alarm
      ENABLE_LL : Bool := TRUE;   // Flag to Enable/Disable LowLow Alarm
   END_VAR

   VAR_OUTPUT
      MEASURE : Real;   // Measured Value (after scaling)
      DATA_QUALITY : Bool := TRUE;   // MV data quality (0=Bad; 1=Good)
      ALARM_HH : Bool;   // HighHigh Alarm
      ALARM_H : Bool;   // High Alarm
      ALARM_L : Bool;   // Low Alarm
      ALARM_LL : Bool;   // LowLow Alarm
   END_VAR

   VAR_IN_OUT
      RANGE_ERROR : Bool;   // Range Error (<4mA or >20mA)
      BROKEN_WIRE : Bool;   // Broken Wire detection
   END_VAR

   VAR_TEMP
      RET_VAL1 : Word;   // Returns a value of W#16#0000 if the instruction executes without error.
      PV_R_1 : Real;   // Temporary measured value
      AnalogInput : Int;
      OUTOFSERV : Bool;
   END_VAR


BEGIN
NETWORK
TITLE = SCALING: TEMPERATURE
//Scale of Manufacturing vessel:
      A #POLARITY;
      = %L9.0;
      BLD 103;
      A(;
      O(;
      A(;
      L #MODE;
      L "dbCONST_VAL".CM.MODE.AUTO;
      ==I;
      );
      JNB Label_0;
      L #RAW_INPUT;
      T #AnalogInput;
      SET;
      SAVE;
      CLR;
Label_0:      A BR;
      );
      O(;
      A(;
      L #MODE;
      L "dbCONST_VAL".CM.MODE.MANUAL;
      ==I;
      );
      JNB Label_1;
      L #USER_INPUT;
      T #AnalogInput;
      SET;
      SAVE;
      CLR;
Label_1:      A BR;
      );
      );
      JNB Label_2;
      CALL SCALE
      (  IN                          := #AnalogInput ,
         HI_LIM                      := #UPPER_RANGE ,
         LO_LIM                      := #LOWER_RANGE ,
         BIPOLAR                     := %L9.0 ,
         RET_VAL                     := #RET_VAL1 ,
         OUT                         := #PV_R_1
      );
Label_2:      NOP 0;
NETWORK
TITLE = Mode Out Of Service
      L #MODE;
      L "dbCONST_VAL".CM.MODE.OUT_OF_SERVICE;
      ==I;
      = #OUTOFSERV;
NETWORK
TITLE = TEMPERATURE OUTPUT AS REAL
//In Manual mode, USER_INPUT to modify the MEASURE value.
      L #PV_R_1;
      T #MEASURE;
      NOP 0;
NETWORK
TITLE = CHECK RANGE ERROR
      A(;
      O(;
      L #RAW_INPUT;
      L 27648;
      >I;
      );
      O(;
      L #RAW_INPUT;
      L 0;
      <I;
      );
      );
      AN #OUTOFSERV;
      = #RANGE_ERROR;
NETWORK
TITLE = CHECK BROKEN WIRE
//
//
      A(;
      O(;
      L #RAW_INPUT;
      L 32767;
      ==I;
      );
      O(;
      L #RAW_INPUT;
      L -32768;
      ==I;
      );
      );
      AN #OUTOFSERV;
      = #BROKEN_WIRE;
NETWORK
TITLE = Setting Data Quality
//If no error set Data Quality DQ=1 (GOOD), else DQ=0 (BAD).
      AN #RANGE_ERROR;
      AN #BROKEN_WIRE;
      AN #OUTOFSERV;
      O(;
      L #MODE;
      L "dbCONST_VAL".CM.MODE.MANUAL;
      ==I;
      );
      = #DATA_QUALITY;
NETWORK
TITLE = HighHigh ALARM
//If HighHigh limit reached
      AN #OUTOFSERV;
      A(;
      L #PV_R_1;
      L #LIMIT_HH;
      >=R;
      );
      A #ENABLE_HH;
      = #ALARM_HH;
NETWORK
TITLE = High ALARM
      AN #OUTOFSERV;
      A(;
      L #PV_R_1;
      L #LIMIT_H;
      >=R;
      );
      A #ENABLE_H;
      = #ALARM_H;
NETWORK
TITLE = Low ALARM
      AN #OUTOFSERV;
      A(;
      L #PV_R_1;
      L #LIMIT_L;
      <=R;
      );
      A #ENABLE_L;
      = #ALARM_L;
NETWORK
TITLE = LowLow ALARM
      AN #OUTOFSERV;
      A(;
      L #PV_R_1;
      L #LIMIT_LL;
      <=R;
      );
      A #ENABLE_LL;
      = #ALARM_LL;
END_FUNCTION_BLOCK
