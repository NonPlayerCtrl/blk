//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Class:       fbHE1                                                         //
// Description:                                                               //
// Vessel vent filter Electric heater element.                                //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      30-Jan-2018 NA        Reboot for S7-1500.             //
// 0.5 Khairul Basar    09-Oct-2009 CC-09/016 NW4, CMD & IL then Failed.      //
// 0.4 Gerald Kontriner 09-Oct-2009 CC-09/016 MON_MISMATCH Logic.             //
// 0.3 Khairul Basar    16-Sep-2009 CC-09/016 Duplicate Input Parameter       //
//                                            deleted auto/manual both now    //
//                                            using same parameter.           //
// 0.2 Khairul Basar    28-Aug-2009 CC-09/016 Ref1.Cutout can be ON/OFF when  //
//                                            key switch is ON.               //
// 0.1 Khairul Basar    03-Aug-2009           Initial design.                 //
//                                                                            //
// Ref1.Cutout ON when key switch is OFF and Command is ON or OFF.When Key    //
// switch is ON cutout can be ON or OFF by using user ON/OFF command.         //
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "fbHE1"
TITLE = HE1 : Vessel vent filter Electric heater element
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : REO
NAME : fbHE1
VERSION : 2.0

//----------------------------------------------------------------------------//
// Declare interface and variables:                                           //
//----------------------------------------------------------------------------//
VAR
    p : "udtHE1";            // Block data interface
END_VAR

VAR DB_SPECIFIC
    b { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..15] of Bool;
    w { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} AT b : Word;
END_VAR

VAR_TEMP
    tDO : Bool;              // Temporary processed DO signal
    tFault : Bool;
END_VAR

BEGIN
NETWORK
TITLE = Safe Command on restart
    //------------------------------------------------------------------------//
    // Set the safe command if restarting the PLC:                            //
    //------------------------------------------------------------------------//
    A "flagFirstScanRestart";
    JCN _noRestart;
    L "dbCONST".BLK.HE1.SAFE.CMD;
    T #p.write.mc.CMD;
    T #p.read.mc.CMD_SAFE;
_noRestart:   NOP 0;

NETWORK
TITLE = Process Fault Digital Input Signal
    //------------------------------------------------------------------------//
    // INTERLOCK   INTERLOCK   INTERLOCK   INTERLOCK   INTERLOCK   INTERLOCK  //
    // INTERLOCK   INTERLOCK   INTERLOCK   INTERLOCK   INTERLOCK   INTERLOCK  //
    //                                                                        //
    // Check if the field indicates there is a fault:                         //
    //------------------------------------------------------------------------//
    A #p.read.FAULT;
    = #tFault;
    = #p.read.mc.INTIL;

NETWORK
TITLE = Call Mode and Command handling block
    //------------------------------------------------------------------------//
    // COMMAND PROCESSOR   COMMAND PROCESSOR   COMMAND PROCESSOR   COMMAND    //
    //                                                                        //
    // Process the standard block functions for command, mode, interlock and  //
    // state:                                                                 //
    //------------------------------------------------------------------------//
    CALL "fcModeCmd"
    (   mcRead             := #p.read.mc ,
        mcWrite            := #p.write.mc
    );

NETWORK
TITLE = Device command ENABLE
    //------------------------------------------------------------------------//
    // COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND    //
    // COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND   COMMAND    //
    //                                                                        //
    // CMD is ENABLE if no fault or interlock, otherwise DISABLE:             //
    //------------------------------------------------------------------------//
    AN #tFault;
    AN #p.read.mc.INTERLOCK;
    A(;
    L #p.write.mc.CMD;
    L "dbCONST".BLK.HE1.CMD.ENABLE;
    ==I;
    );
    = #tDO;

NETWORK
TITLE = Device command DISABLE
    //------------------------------------------------------------------------//
    // CMD is DISABLE then switch off regardless of any fault or interlock:   //
    //------------------------------------------------------------------------//
    O #p.read.mc.INTERLOCK;
    O(;
    L #p.write.mc.CMD;
    L "dbCONST".BLK.HE1.CMD.DISABLE;
    ==I;
    );
    JCN _a;
    R #tDO;
_a:   NOP 0;

NETWORK
TITLE = Set CUTOUT Flag if output is off
    //------------------------------------------------------------------------//
    // OUTPUTS   OUTPUTS   OUTPUTS   OUTPUTS   OUTPUTS   OUTPUTS   OUTPUTS    //
    // OUTPUTS   OUTPUTS   OUTPUTS   OUTPUTS   OUTPUTS   OUTPUTS   OUTPUTS    //
    //                                                                        //
    // Flag indicating if TI alarm is to be cutout (i.e. disabled) whenever   //
    // HE is OFF:                                                             //
    //------------------------------------------------------------------------//
    AN #tDO;
    = #p.write.CUTOUT;

NETWORK
TITLE = Set Digital Output Signal
    //------------------------------------------------------------------------//
    // Set the output ON or OFF as required:                                  //
    //------------------------------------------------------------------------//
    A #tDO;
    = #p.read.DO;

NETWORK
TITLE = Set Device State to Enabled if output is on
    //------------------------------------------------------------------------//
    // STATE   STATE   STATE   STATE   STATE   STATE   STATE   STATE   STATE  //
    // STATE   STATE   STATE   STATE   STATE   STATE   STATE   STATE   STATE  //
    //                                                                        //
    // ENABLED if output is on:                                               //
    //------------------------------------------------------------------------//
    A #tDO;
    JCN _b;
    L "dbCONST".BLK.HE1.STATE.ENABLED;
    T #p.read.mc.STATE;
    R #p.read.mc.ERROR;
_b:   NOP 0;

NETWORK
TITLE = Set Device State to Disabled if output is off
    //------------------------------------------------------------------------//
    // DISABLED if output is off:                                             //
    //------------------------------------------------------------------------//
    AN #tDO;
    AN #tFault;
    JCN _c;
    L "dbCONST".BLK.HE1.STATE.DISABLED;
    T #p.read.mc.STATE;
    R #p.read.mc.ERROR;
_c:   NOP 0;

NETWORK
TITLE = Set Device State to Fault if field fault signal is on
    //------------------------------------------------------------------------//
    // FAULT if fault signal is on:                                           //
    //------------------------------------------------------------------------//
    A #tFault;
    JCN _d;
    L "dbCONST".BLK.HE1.STATE.FAULT;
    T #p.read.mc.STATE;
    S #p.read.mc.ERROR;
_d:   NOP 0;

NETWORK
TITLE = Pack the alarm bit
    //------------------------------------------------------------------------//
    // Pack the alarm bit into an integer for the HMI to read:                //
    //------------------------------------------------------------------------//
    A #p.read.FAULT;
    = #b[0];
    L #w;
    T #p.read.mc.ALARM;

END_FUNCTION_BLOCK
