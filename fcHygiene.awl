//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Description: Generic block hygiene status calculation.                     //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      09-Feb-2018 NA        Reboot for S7-1500.             //
// 0.1 Khairul Basar    03-Aug-2009           Initial design.                 //
//----------------------------------------------------------------------------//
FUNCTION "fcHygiene" : Void
TITLE = Generic block Hygiene Status monitoring function
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : REO
NAME : fcHygiene
VERSION : 2.0

//----------------------------------------------------------------------------//
// Calling parameters should be retentive in nature:                          //
//----------------------------------------------------------------------------//
VAR_IN_OUT
    hs : "udtHygiene";       // Hygiene status
END_VAR

VAR_TEMP
    clean_timeout : Bool;
    sterile_timeout : Bool;
    start_sterile_tmr : Bool;
    start_clean_tmr : Bool;
    reset_clean_tmr : Bool;
    reset_sterile_tmr : Bool;
END_VAR

BEGIN
NETWORK
TITLE = Start cleanliness monitoring timer if Hygiene Status is CLEAN
      L #hs.HYGIENE_STATE;
      L "dbCONST".BLK.HYGIENE.CLEAN;
      ==I;
      = #start_clean_tmr;
    JCN _a;
      R #hs.CLEAN_TOUT;
_a:   NOP 0;

NETWORK
TITLE = Start sterile monitoring timer if Hygiene Status is STERILE
      L #hs.HYGIENE_STATE;
      L "dbCONST".BLK.HYGIENE.STERILE;
      ==I;
      = #start_sterile_tmr;
    JCN _b;
      R #hs.STERILE_TOUT;
_b:   NOP 0;

NETWORK
TITLE = Reset cleanliness timer if Hygiene Status is not CLEAN
      L #hs.HYGIENE_STATE;
      L "dbCONST".BLK.HYGIENE.CLEAN;
      <>I;
      = #reset_clean_tmr;

NETWORK
TITLE = Reset sterile timer if Hygiene Status is not STERILE
      L #hs.HYGIENE_STATE;
      L "dbCONST".BLK.HYGIENE.STERILE;
      <>I;
      = #reset_sterile_tmr;
NETWORK

TITLE = Retentive timer for CLEAN
      CALL TONR, "dbTONR"
      (  IN                          := #start_clean_tmr ,
         R                           := #reset_clean_tmr ,
         PT                          := #hs.CLEAN_TIME ,
         Q                           := #clean_timeout ,
         ET                          := #hs.CLEAN_ELAPSED_TIME
      );
      NOP 0;

NETWORK
TITLE = Retentive timer for STERILE
      CALL TONR, "dbTONR"
      (  IN                          := #start_sterile_tmr ,
         R                           := #reset_sterile_tmr ,
         PT                          := #hs.STERILE_TIME ,
         Q                           := #sterile_timeout ,
         ET                          := #hs.STERILE_ELAPSED_TIME
      );
      NOP 0;

NETWORK
TITLE = Set the Hygiene Status to USED if cleanliness timer expired
      A #clean_timeout;
    JCN _c;
      L "dbCONST".BLK.HYGIENE.USED;
      T #hs.HYGIENE_STATE;
_c:   NOP 0;

NETWORK
TITLE = Set the Hygiene Status to USED if cleanliness timer expired
      A #clean_timeout;
      = #hs.CLEAN_TOUT;

NETWORK
TITLE = Set the Hygiene Status to CLEAN if sterile timer expired
      A #sterile_timeout;
    JCN _d;
      L "dbCONST".BLK.HYGIENE.CLEAN;
      T #hs.HYGIENE_STATE;
_d:   NOP 0;

NETWORK
TITLE = Set the Hygiene Status to CLEAN if sterile timer expired
      A #sterile_timeout;
      = #hs.STERILE_TOUT;
END_FUNCTION
