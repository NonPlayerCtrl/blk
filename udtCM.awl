//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//----------------------------------------------------------------------------//
// Title:       udtCM                                                         //
// Description: Master definition of user defined data structures for CMs.    //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 1.0 David Paspa      31-May-2018 NA        Reboot for S7-1500.             //
//----------------------------------------------------------------------------//
TYPE "udtAL1read"
VERSION : 1.0
    STRUCT
        mc : "udtMCRead";              // Block mode and command for calculations on read CPU
        ai : "udtAnalog";              // Analog input structure
        PV : Real;                     // The measured process value
        CMD_ENABLE : Int;              // The enable command for the block
        STATE_ENABLED : Int;           // The enabled state of the block
        STATE_FAULT : Int;             // The fault state of the block
        DQ : Bool;                     // The quality of the measurement
    END_STRUCT;
END_TYPE

TYPE "udtAL1write"
VERSION : 1.0
    STRUCT
        mc : "udtMCWrite";             // Block mode and command for directives from write CPU
		LIMIT_HH : Real;               // High High Alarm Limit from parent
        LIMIT_H : Real;                // High Alarm Limit from parent
        LIMIT_L : Real;                // Low Alarm Limit from parent
        LIMIT_LL : Real;               // LowLow Alarm Limit from parent
		ENABLE_HH : Bool;              // Flag to Enable/Disable High High Alarm from parent
        ENABLE_H : Bool;               // Flag to Enable/Disable High Alarm from parent
        ENABLE_L : Bool;               // Flag to Enable/Disable Low Alarm from parent
        ENABLE_LL : Bool;              // Flag to Enable/Disable Low Low Alarm from parent
	END_STRUCT;
END_TYPE

TYPE "udtAL1"
VERSION : 1.0
    STRUCT
        read : "udtAL1read";           // Calculated data on read CPU
        write : "udtAL1write";         // Directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtDI1read"
VERSION : 1.0
    STRUCT
        mc : "udtMCRead";              // Block mode and command for calculations on read CPU
        DI_Auto : Bool;                // Input signal from Field
        ALARM : Bool;                  // Alarm Flag (0 = OK, 1 = ALARM)
        PV : Bool;                     // Processed DI
    END_STRUCT;
END_TYPE

TYPE "udtDI1write"
VERSION : 1.0
    STRUCT
        mc : "udtMCWrite";             // Block mode and command for directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtDI1"
VERSION : 1.0
    STRUCT
        read : "udtDI1read";           // Calculated data on read CPU
        write : "udtDI1write";         // Directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtDI2read"
VERSION : 1.0
    STRUCT
        mc : "udtMCRead";              // Block mode and command for calculations on read CPU
        DI_Auto : Bool;                // Input signal from Field
        ALARM : Bool;                  // Alarm Flag (0 = OK, 1 = ALARM)
        PV : Bool;                     // Processed DI
    END_STRUCT;
END_TYPE

TYPE "udtDI2write"
VERSION : 1.0
    STRUCT
        mc : "udtMCWrite";             // Block mode and command for directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtDI2"
VERSION : 1.0
    STRUCT
        read : "udtDI2read";           // Calculated data on read CPU
        write : "udtDI2write";         // Directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtDI3read"
VERSION : 1.0
    STRUCT
        mc : "udtMCRead";              // Block mode and command for calculations on read CPU
        ALARM : Bool;                  // Alarm Flag (0 = OK, 1 = ALARM)
    END_STRUCT;
END_TYPE

TYPE "udtDI3write"
VERSION : 1.0
    STRUCT
        mc : "udtMCWrite";             // Block mode and command for directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtDI3"
VERSION : 1.0
    STRUCT
        read : "udtDI3read";           // Calculated data on read CPU
        write : "udtDI3write";         // Directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtHE1read"
VERSION : 1.0
    STRUCT
        mc : "udtMCRead";              // Block mode and command for calculations on read CPU
        DO : Bool;                     // Output Signal to Heating Element
        FAULT : Bool;                  // Fault input signal from Field
    END_STRUCT;
END_TYPE

TYPE "udtHE1write"
VERSION : 1.0
    STRUCT
        mc : "udtMCWrite";             // Block mode and command for directives from write CPU
        CUTOUT : Bool;                 // Flag indicating if TI alarm is to cutout (0= Alarm Enabled, 1= Alarm Disabled)
    END_STRUCT;
END_TYPE

TYPE "udtHE1"
VERSION : 1.0
    STRUCT
        read : "udtHE1read";           // Calculated data on read CPU
        write : "udtHE1write";         // Directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtMI1read"
VERSION : 1.0
    STRUCT
        mc : "udtMCRead";              // Block mode and command for calculations on read CPU
        ai : "udtAnalog";              // Analog input structure
        PV : Real;                     // The measured process value
        CMD_ENABLE : Int;              // The enable command for the block
        STATE_ENABLED : Int;           // The enabled state of the block
        STATE_FAULT : Int;             // The fault state of the block
        DQ : Bool;                     // The quality of the measurement
        MASS_GROSS : Real;             // Gross mass taken after settle time
        MASS_NETT : Real;              // Nett mass of PV - Tare written by EMM1
        MASS_TARE : Real;              // Tare mass written by EMM1
    END_STRUCT;
END_TYPE

TYPE "udtMI1write"
VERSION : 1.0
    STRUCT
        mc : "udtMCWrite";             // Block mode and command for directives from write CPU
    	LIMIT_HH : Real;               // High High Alarm Limit from parent
        LIMIT_H : Real;                // High Alarm Limit from parent
        LIMIT_L : Real;                // Low Alarm Limit from parent
        LIMIT_LL : Real;               // LowLow Alarm Limit from parent
		ENABLE_HH : Bool;              // Flag to Enable/Disable High High Alarm from parent
        ENABLE_H : Bool;               // Flag to Enable/Disable High Alarm from parent
        ENABLE_L : Bool;               // Flag to Enable/Disable Low Alarm from parent
        ENABLE_LL : Bool;              // Flag to Enable/Disable Low Low Alarm from parent
	END_STRUCT;
END_TYPE

TYPE "udtMI1"
VERSION : 1.0
    STRUCT
        read : "udtMI1read";           // Calculated data on read CPU
        write : "udtMI1write";         // Directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtMOD1read"
VERSION : 1.0
    STRUCT
        mc : "udtMCRead";              // Block mode and command for calculations on read CPU
        RAW_OUTPUT : Int;              // Raw output signal to Field (4mA = 0, 20mA = 27648)
        MV_OUTPUT : Real;              // Calculated percent output
    END_STRUCT;
END_TYPE

TYPE "udtMOD1write"
VERSION : 1.0
    STRUCT
        mc : "udtMCWrite";             // Block mode and command for directives from write CPU
        POS_LOCAL : Real;              // Local valve position setpoint
        POS_REMOTE : Real;             // Remote valve position setpoint
    END_STRUCT;
END_TYPE

TYPE "udtMOD1"
VERSION : 1.0
    STRUCT
        read : "udtMOD1read";           // Calculated data on read CPU
        write : "udtMOD1write";         // Directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtMOT1read"
VERSION : 1.0
    STRUCT
        mc : "udtMCRead";              // Block mode and command for calculations on read CPU
        BRK	: Bool;                    // Motor breaker fault
        PHR : Bool;                    // Three-phase relay alarm
        FB_RUN : Bool;
        OUT_Q : Bool;                  // Output to Start/Stop the motor
        ALM_BRK : Bool;
        ALM_PHR : Bool;
        FAIL_START : Bool;             // Fail to start
    END_STRUCT;
END_TYPE

TYPE "udtMOT1write"
VERSION : 1.0
    STRUCT
        mc : "udtMCWrite";             // Block mode and command for directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtMOT1"
VERSION : 1.0
    STRUCT
        read : "udtMOT1read";           // Calculated data on read CPU
        write : "udtMOT1write";         // Directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtPI1read"
VERSION : 1.0
    STRUCT
        mc : "udtMCRead";              // Block mode and command for calculations on read CPU
        ai : "udtAnalog";              // Analog input structure
        PV : Real;                     // The measured process value
        CMD_ENABLE : Int;              // The enable command for the block
        STATE_ENABLED : Int;           // The enabled state of the block
        STATE_FAULT : Int;             // The fault state of the block
        DQ : Bool;                     // The quality of the measurement
    END_STRUCT;
END_TYPE

TYPE "udtPI1write"
VERSION : 1.0
    STRUCT
        mc : "udtMCWrite";             // Block mode and command for directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtPI1"
VERSION : 1.0
    STRUCT
        read : "udtPI1read";           // Calculated data on read CPU
        write : "udtPI1write";         // Directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtPOSxread"
VERSION : 1.0
    STRUCT
        mc : "udtMCRead";              // Block mode and command for calculations on read CPU
        TMR : Time := T#5S;            // Transition timer
        FAULT_C : Bool;                // Valve fail to close
        FAULT_O : Bool;                // Valve fail to Open
        FB_C : Bool;                   // Close feedback signal from field
        FB_O : Bool;                   // Open feedback signal from field
        NC : Bool;                     // Set if Normally Close valve
        OUT_Q : Bool;                  // Valve open/close command
    END_STRUCT;
END_TYPE

TYPE "udtPOSxwrite"
VERSION : 1.0
    STRUCT
        mc : "udtMCWrite";             // Block mode and command for directives from write CPU
        IGNORE_FB : Bool;              // Ignore field position switches in manual mode
    END_STRUCT;
END_TYPE

TYPE "udtPOSx"
VERSION : 1.0
    STRUCT
        read : "udtPOSxread";           // Calculated data on read CPU
        write : "udtPOSxwrite";         // Directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtSIC1read"
VERSION : 1.0
    STRUCT
        mc : "udtMCRead";              // Block mode and command for calculations on read CPU
        ai : "udtAnalog";              // Analog input structure
        STATE_PEER : Int := 0;         // State check for agitator motor from other modules
        MASS_RUN : Real;               // Low mass threshold at which the agitator may run
        MASS_STOP : Real;              // Low low mass threshold at which the agitator must stop
        MI1_MASS : Real;               // Measured Mass
        MI1_DQ : Bool;                 // Measured Mass Data Quality
        FB_TDELAY : Time := T#20S;
        BRK	: Bool;                    // Motor breaker fault
        PHR : Bool;                    // Three-phase relay alarm
        FLP : Bool;                    // Pulse counter fault
        FLT : Bool;                    // Inverter fault
        THM : Bool;                    // Thermistor module alarm
        P_SEL : Bool := TRUE;
        I_SEL : Bool := TRUE;
        D_SEL : Bool := TRUE;
        GAIN : Real := 1.0;
        TI : Time := T#20S;
        TD : Time := T#10S;
        CYCLE : Time := T#1S;          // SAMPLING TIME:The time between the block calls constant
        OUT_CMD : Bool;                // Inverter Motor Run/Stop Command
        RUNNING : Bool;
        RDY_TO_ON : Bool;
        RDY_TO_RUN : Bool;
        ALM_BRK : Bool;
        ALM_PHR : Bool;
        ALM_FLP : Bool;
        ALM_FLT : Bool;
        ALM_THM : Bool;
        ERROR_RESET : Bool;
        FAIL_TO_RUN : Bool;
        OUT_SETPOINT : Real;           // Setpoint output value
        LMN : Real;                    // Inverter Speed reference from PID
        MV_OUTPUT : Real;              // Calculated percent output
    END_STRUCT;
END_TYPE

TYPE "udtSIC1write"
VERSION : 1.0
    STRUCT
        mc : "udtMCWrite";             // Block mode and command for directives from write CPU
        CMD_PEER : Int := 0;           // Command request for agitator motor from other modules
        SETPOINT : Real;               // Agitator speed setpoint
        USER_INPUT : Word;             // Manual mode, equivallent of Analog input, to be entered by Operator
        MAN_PID : Bool;                // Manual non pid selection
		LIMIT_HH : Real;               // High High Alarm Limit from parent
        LIMIT_H : Real;                // High Alarm Limit from parent
        LIMIT_L : Real;                // Low Alarm Limit from parent
        LIMIT_LL : Real;               // LowLow Alarm Limit from parent
		ENABLE_HH : Bool;              // Flag to Enable/Disable High High Alarm from parent
        ENABLE_H : Bool;               // Flag to Enable/Disable High Alarm from parent
        ENABLE_L : Bool;               // Flag to Enable/Disable Low Alarm from parent
        ENABLE_LL : Bool;              // Flag to Enable/Disable Low Low Alarm from parent
    END_STRUCT;
END_TYPE

TYPE "udtSIC1"
VERSION : 1.0
    STRUCT
        read : "udtSIC1read";           // Calculated data on read CPU
        write : "udtSIC1write";         // Directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtTC1read"
VERSION : 1.0
    STRUCT
        mc : "udtMCRead";              // Block mode and command for calculations on read CPU
        GAIN : Real := 1.0;            // Proportional Gain
        TI : Time := T#20S;            // Integral Time
        TD : Time := T#10S;            // Derivative Time
        CYCLE : Time := T#100MS;       // PID Block Sampling Time
        P_SEL : Bool := TRUE;          // Proportional Action ON/OFF
        I_SEL : Bool := TRUE;          // Integral Action ON/OFF
        D_SEL : Bool := TRUE;          // Derivative Action ON/OFF
        MV_OUTPUT : Real;              // Calculated percent output
    END_STRUCT;
END_TYPE

TYPE "udtTC1write"
VERSION : 1.0
    STRUCT
        mc : "udtMCWrite";             // Block mode and command for directives from write CPU
        SETPOINT : Real;               // Setpoint
        MAN_PID : Bool;                // Manual non pid selection
    END_STRUCT;
END_TYPE

TYPE "udtTC1link"
VERSION : 1.0
    STRUCT
        MOD_TCV : Int;                 // Temperature control valve instance DB index
        TI_HEX : Int;                  // Temperature indicator
    END_STRUCT;
END_TYPE

TYPE "udtTC1"
VERSION : 1.0
    STRUCT
        link : "udtTC1link";           // Link index to access link instance DB
        read : "udtTC1read";           // Calculated data on read CPU
        write : "udtTC1write";         // Directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtVS1read"
VERSION : 1.0
    STRUCT
        mc : "udtMCRead";              // Block mode and command for calculations on read CPU
        FAULT : Bool;
    END_STRUCT;
END_TYPE

TYPE "udtVS1write"
VERSION : 1.0
    STRUCT
        mc : "udtMCWrite";             // Block mode and command for directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtVS1link"
VERSION : 1.0
    STRUCT
        PUMP1 : Int;                   // Vacuum Pump 1 instance DB index
        PUMP2 : Int;                   // Vacuum Pump 2 instance DB index
        VALVE1 : Int;                  // State of the user 1 valve instance DB index
        VALVE2 : Int;                  // State of the user 1 valve instance DB index
    END_STRUCT;
END_TYPE

TYPE "udtVS1"
VERSION : 1.0
    STRUCT
        link : "udtVS1link";           // Link index to access link instance DB
        read : "udtVS1read";           // Calculated data on read CPU
        write : "udtVS1write";         // Directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtZSC1read"
VERSION : 1.0
    STRUCT
        mc : "udtMCRead";              // Block mode and command for calculations on read CPU
        DI_Auto : Bool;                // Input signal from Field
        ALARM : Bool;                  // Alarm Flag (0 = OK, 1 = ALARM)
        PV : Bool;                     // Processed DI
    END_STRUCT;
END_TYPE

TYPE "udtZSC1write"
VERSION : 1.0
    STRUCT
        mc : "udtMCWrite";             // Block mode and command for directives from write CPU
        CUTOUT : Bool;                 // Flag indicating if alarm is to be cutout (0= Alarm Enabled, 1= Alarm Disabled)
    END_STRUCT;
END_TYPE

TYPE "udtZSC1"
VERSION : 1.0
    STRUCT
        read : "udtZSC1read";           // Calculated data on read CPU
        write : "udtZSC1write";         // Directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtZSC2read"
VERSION : 1.0
    STRUCT
        mc : "udtMCRead";              // Block mode and command for calculations on read CPU
        DI_Auto : Bool;                // Input signal from Field
        ALARM : Bool;                  // Alarm Flag (0 = OK, 1 = ALARM)
        PV : Bool;                     // Processed DI
    END_STRUCT;
END_TYPE

TYPE "udtZSC2write"
VERSION : 1.0
    STRUCT
        mc : "udtMCWrite";             // Block mode and command for directives from write CPU
    END_STRUCT;
END_TYPE

TYPE "udtZSC2"
VERSION : 1.0
    STRUCT
        read : "udtZSC2read";           // Calculated data on read CPU
        write : "udtZSC2write";         // Directives from write CPU
    END_STRUCT;
END_TYPE

//----------------------------------------------------------------------------//
// Has to be at the end after the link UDTs are compiled:                     //
//----------------------------------------------------------------------------//
TYPE "udtPC1read"
VERSION : 1.0
    STRUCT
        mc : "udtMCRead";              // Block mode and command for calculations on read CPU
    END_STRUCT;
END_TYPE

TYPE "udtPC1write"
VERSION : 1.0
    STRUCT
        mc : "udtMCWrite";             // Block mode and command for directives from write CPU
        DB_L : Real := 0.1;            // Deadband LOW differential
        DB_H : Real := 0.1;            // Deadband HIGH differential
        SETPOINT : Real := 0.2;        // Pressure setpoint
        MEDIUM_GAS : Int;              // Select medium valve to be operated
        VESSEL : Int;                  // Select vessel 0,1,2,3 for M1,M2,S1,S2
    END_STRUCT;
END_TYPE

TYPE "udtPC1link"
VERSION : 1.0
    STRUCT
        PRESSURE : Int;                // PI1 Pressure in the vessel
        HPCA : Int;                    // POS4 HPCA valve instance DB index
        LPCA : Int;                    // POS4 LPCA valve instance DB index
        VENT : Int;                    // POS2 Vent valve instance DB index
    END_STRUCT;
END_TYPE

TYPE "udtPC1"
VERSION : 1.0
    STRUCT
        link : "udtPC1link";           // Link index to access link instance DB
        read : "udtPC1read";           // Calculated data on read CPU
        write : "udtPC1write";         // Directives from write CPU
    END_STRUCT;
END_TYPE
