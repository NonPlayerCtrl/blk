//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//                Automatically Generated File - Do Not Edit                  //
//----------------------------------------------------------------------------//
// Class:       ifbPOS4                                                       //
// Description: Instances of POS4                                             //
//                                                                            //
// Uses the generic fbPOSx class. In this case both FB_C and FB_O have        //
// digital input feedback signals from field.                                 //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      05-Jan-2018 NA        Reboot for S7-1500.             //
// 0.7 Khairul Basar    12-Oct-2009 CC-09/016 IN_REQ_MODE is assigned to      //
//                                            Toggle                          //
// 0.6 Gus Abdallah     01-Oct-2009 CC-09/016 Interlocks are CM processed     //
// 0.5 Khairul Basar    18-Sep-2009 CC-09/016 ifcPOSx is called for           //
//                                            interfacing.                    //
// 0.4 Khairul Basar    16-Sep-2009 CC-09/016 Duplicate Auto/man parameters   //
//                                            deleted auto/manual both now    //
//                                            using same parameters.          //
// 0.3 Khairul Basar    10-Sep-2009 CC-09/016 POSx updated                    //
// 0.2 Khairul Basar    02-Sep-2009 CC-09/016 Ref1.                           //
// 0.1 Khairul Basar    03-Aug-2009 NA        Initial design                  //
//                                                                            //
// Ref1:                                                                      //
// Corrected the assignment of OUT_Qs to DV1111,DV1211,DV1214.                //
// Class interlocks are added.Fault state transition T3 & T4 is now           //
// configured (ref fbPOSx). Alarm names changed to FAULT_C for fail to close  //
// and FAULT_O for fail to open (ref fbPOSx). Timer parameter name changed to //
// TMR (ref fbPOSx).                                                          //
// Initial value is configured for TMR is 3S (ref fbPOSx).                    //
//----------------------------------------------------------------------------//
// Index   Instance    Description                                            //
@@TEMPLATE_BEGIN|createInstancesGlobal@@
// @@IDX@@       @@INSTANCE@@      @@DESCRIPTION@@
@@TEMPLATE_END@@
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "ifbPOS4"
TITLE = Instances of POS4 On/Off valve with output command and opened and closed feedback
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : REO
NAME : ifbPOS4
VERSION : 2.0

//----------------------------------------------------------------------------//
// Declare the instance objects of the class:                                 //
//----------------------------------------------------------------------------//
VAR
@@TEMPLATE_BEGIN|createClassNone@@
@@ATTR_BEGIN|numInstances@@
    p : Array[0..@@MAXITEM@@] of "udtPOSx";
@@ATTR_END|numInstances@@
    f : "fbPOSx";
@@TEMPLATE_END@@
END_VAR

VAR_TEMP
    FB_C : Bool;
    FB_O : Bool;
END_VAR

BEGIN
@@TEMPLATE_BEGIN|createInstances@@
NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@DESCRIPTION@@ Critical Interlocks
    //------------------------------------------------------------------------//
    // INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INST //
    // INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INSTANCE   INST //
    //                                                                        //
    // Get the critical interlock if there is one. If not set alwaysLow:      //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|CRIL_EXISTS@@
@@ATTR_DEFAULT_BEGIN@@
    A "alwaysLow";
@@ATTR_DEFAULT_END@@
@@ATTR_BEGIN|CRIL_TARGET@@
    A "idbCRIL".p[@@IDXIL@@].INTERLOCK;
@@ATTR_END|CRIL_TARGET@@
@@ATTR_END|CRIL_EXISTS@@
    = #p[@@IDX@@].origin.mc.CRIL;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@DESCRIPTION@@ Non-Critical Interlocks
    //------------------------------------------------------------------------//
    // Get the non-critical interlock if there is one. If not set alwaysLow:  //
    //------------------------------------------------------------------------//
@@ATTR_BEGIN|NCRIL_EXISTS@@
@@ATTR_DEFAULT_BEGIN@@
    A "alwaysLow";
@@ATTR_DEFAULT_END@@
@@ATTR_BEGIN|NCRIL_TARGET@@
    A "idbNCRIL".p[@@IDXIL@@].INTERLOCK;
@@ATTR_END|NCRIL_TARGET@@
@@ATTR_END|NCRIL_EXISTS@@
    = #p[@@IDX@@].origin.mc.NCRIL;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Unique ID
    //------------------------------------------------------------------------//
    // Set the instance unique ID:                                            //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.ID.@@INSTANCE@@;
    T #p[@@IDX@@].origin.mc.ME;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Owner
    //------------------------------------------------------------------------//
    // Set the instance owner:                                                //
    //------------------------------------------------------------------------//
    L "dbCONST".BLK.ID.@@PARENT@@;
    T #p[@@IDX@@].owner.mc.OWNER;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Block Origin
    //------------------------------------------------------------------------//
    // This block can only reside within this CPU:                            //
    //------------------------------------------------------------------------//
    A "alwaysHigh";
    = #p[@@IDX@@].origin.mc.isOriginBlock;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Owner Origin
    //------------------------------------------------------------------------//
    // This block can only be owned by a parent block in this CPU:            //
    //------------------------------------------------------------------------//
    A "alwaysHigh";
    = #p[@@IDX@@].owner.mc.isOriginOwner;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Safe Command on restart
    //------------------------------------------------------------------------//
    // Set the safe command if restarting the PLC:                            //
    //------------------------------------------------------------------------//
    A "flagFirstScanRestart";
    JCN _notRestart_@@COUNTERTEMPLATE|1@@;
    L "dbCONST".BLK.POS4.SAFE.CMD;
    T #p[@@IDX@@].origin.mc.CMD_SAFE;
_notRestart_@@COUNTERTEMPLATE@@:   NOP 0;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Feedback from the field
    //------------------------------------------------------------------------//
    // Get the position feedback values:                                      //
    //------------------------------------------------------------------------//
    A "@@INSTANCE@@-ZSC";
    = #FB_C;
    A "@@INSTANCE@@-ZSO";
    = #FB_O;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Closed feedback
    //------------------------------------------------------------------------//
    // Set the instance closed feedback value from the field:                 //
    //------------------------------------------------------------------------//
    A #FB_C;
    = #p[@@IDX@@].origin.FB_C;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Opened feedback
    //------------------------------------------------------------------------//
    // Set the instance opened feedback value from the field:                 //
    //------------------------------------------------------------------------//
    A #FB_O;
    = #p[@@IDX@@].origin.FB_O;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Normally opened or closed
    //------------------------------------------------------------------------//
    // Set the instance opened feedback value from the field:                 //
    //------------------------------------------------------------------------//
    A @@NC@@;
    = #p[@@IDX@@].origin.NC;

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : @@DESCRIPTION@@
    //------------------------------------------------------------------------//
    // Call the class function to process each instance:                      //
    //------------------------------------------------------------------------//
    CALL #f
    (   p                    := #p[@@IDX@@]
    );

NETWORK
TITLE = Item @@IDX@@ @@INSTANCE@@ : Output Command
    //------------------------------------------------------------------------//
    // Set the instance output command to the field:                          //
    //------------------------------------------------------------------------//
    A #p[@@IDX@@].origin.OUT_Q;
    = "@@INSTANCE@@-CMD";

@@TEMPLATE_END@@
END_FUNCTION_BLOCK
