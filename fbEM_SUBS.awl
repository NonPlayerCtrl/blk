//----------------------------------------------------------------------------//
//            Copyright 2018 Rieckermann Engineering Operations               //
//                Automatically Generated File - Do Not Edit                  //
//----------------------------------------------------------------------------//
// Title:       @@CLASS@@                                                     //
// Description: @@CLASSDESCRIPTION@@                                          //
//----------------------------------------------------------------------------//
// Revision history:                                                          //
// Rev By               Date        CC        Note                            //
// 2.0 David Paspa      30-Jan-2018 NA        Reboot for S7-1500.             //
// 0.5 Khairul Basar    04-Oct-2009 CC-09/023  CALL_PH.. assigned correctly   //
//                                             STATE_VAR for Charge& flush    //
//                                             for SW_REQ flag set/reset use  //
//                                             PATH_OK valid only when running//
// 0.4 Khoon            01-Oct-2009 CC-09/016  Added STOP to reset CALL_PH... //
//                                             Change STOP to NOT RUNNING if  //
//                                             any.                           //
// 0.3 Khairul Basar    21-Sep-2009 CC-09/023  Ref1.                          //
// 0.2 Khairul Basar    27-Aug-2009 CC-09/023  ARM_FLAG added                 //
// 0.1 Khairul Basar    03-Aug-2009            Initial design                 //
// Ref1:                                                                      //
// PULSE timer                                                                //
// is created as multiple instance of a standard FB, no more hard coded S5    //
// timer.ERR_FLT is changed to TIMEOUT_VER, PATH_IL to FLOWPATH.              //
//----------------------------------------------------------------------------//
FUNCTION_BLOCK "fb@@CLASS@@_SUBS"
TITLE = @@CLASSDESCRIPTION@@
{ S7_Optimized_Access := 'FALSE' }
AUTHOR : Rieckermann Engineering Operations
VERSION : 0.6

//----------------------------------------------------------------------------//
// Declare variables:                                                         //
//----------------------------------------------------------------------------//
@@TEMPLATE_BEGIN@@
   VAR_INPUT
      INITIATE : Bool;
      STOP : Bool;
      RUNNING : Bool;
      MODE : Int := 1;
      SEL_SUBS : Int := 1;
      MEDIUM : Int;
      PULSE : Bool;
      TIME_P_ON : Time;
      TIME_P_OFF : Time;
@@ATTR_BEGIN|CHILD@@
      @@CHILDALIAS@@_STATE : Int;           // @@CHILDALIASDESCRIPTION@@
@@ATTR_END|CHILD@@
@@ATTR_BEGIN|SFC@@
      @@SFC@@_FINISHED : Bool;
@@ATTR_END|SFC@@
@@ATTR_BEGIN|PARAMETER_VAR_INPUT@@
      IO_@@PARAMETER@@ : @@PARAMETERTYPE@@;
@@ATTR_END|PARAMETER_VAR_INPUT@@
   END_VAR

   VAR_OUTPUT
      DEV_STATE : Int;
      STATE_VER : Bool;
      EM_PROCESSED : Bool;
      PATH_OK : Bool;
      WFI_CS_REQ_T : Bool;
      PW_CS_REQ_T : Bool;
@@ATTR_BEGIN|CHILD@@
      @@CHILDALIAS@@_@@COMMANDALIASTYPE@@ : @@COMMANDALIASDATATYPE@@;     // @@CHILDALIASDESCRIPTION@@
@@ATTR_END|CHILD@@
@@ATTR_BEGIN|SFC@@
      CALL_@@SFC@@ : Bool;
@@ATTR_END|SFC@@
      BAD_PARAM : Bool := FALSE;
      ACT_PH : Int;
   END_VAR

   VAR_IN_OUT
      ErrFlag : Int;
   END_VAR

   VAR
      STATUS {OriginalPartName := 'TON'; LibVersion := '1.0'} : TON;
      TEQ {OriginalPartName := 'TON'; LibVersion := '1.0'} : TON;
   END_VAR

   VAR_TEMP
      State_Eq_Command : Bool;
      do_nothing : Bool;
@@ATTR_BEGIN|SFC@@
      Subs_@@STATE@@ : Bool;
@@ATTR_END|SFC@@
      SafeState : Bool;
@@ATTR_BEGIN|PARAMETER_VAR_TEMP@@
      IO_@@PARAMETER@@ : @@PARAMETERTYPE@@;
@@ATTR_END|PARAMETER_VAR_TEMP@@
      ControlBit : Array[1..8] of Bool;
   END_VAR

NETWORK
TITLE = If EM is STOPPED/IL then Set a Bit for Safe state
//----------------------------------------------------------------------------//
// The Safe State:                                                            //
//----------------------------------------------------------------------------//
      AN #RUNNING;
      = #SafeState;

NETWORK
TITLE = Calling Parameter checks
//----------------------------------------------------------------------------//
// Check calling parameters are valid:                                        //
//----------------------------------------------------------------------------//
      A(;
      O #Subs_Flush;
      O #Subs_Charge;
      );
      A(;
      A(;
      O #Medium_WFI;
      O #Medium_CS_WFI;
      );
      AN #WFI_CS_REQ;
      O;
      A(;
      O #Medium_PW;
      O #Medium_CS_PW;
      );
      AN #PW_CS_REQ;
      );
      = #BAD_PARAM;

NETWORK
TITLE = Item1 to 4:Supply Valves
//----------------------------------------------------------------------------//
// [Command=Closed] will be effective for following substate:                 //
// @@COUNTER|0@@. @@STATE@@                                                   //
//----------------------------------------------------------------------------//
// Set the initial child device states if initiating a new substate:          //
//----------------------------------------------------------------------------//
      A #INITIATE;
      A(;
@@ATTR_BEGIN|SFC@@
      O;
      A #Subs_@@STATE@@;
      AN #BAD_PARAM;
      AN #CALL_@@SFC@@;
@@ATTR_END|SFC@@
      );
      O #SafeState;
      = %L4.0;
      A(;
      A %L4.0;
      JNB Label_0;
      L "dbCONST_VAL".CM.CMD_VALVE.CLOSE;
      T #WFI_VALV_CMD;
@@ATTR_BEGIN|CHILD@@
      L "dbCONST".CM.CMD_VALVE.CLOSE;
      T #@@CHILDALIAS@@_@@COMMANDALIASTYPE@@;
@@ATTR_END|CHILD@@
Label_0:      A BR;
      );
      JNB Label_1;
      L "dbCONST_VAL".CM.CMD_VALVE.CLOSE;
      T #PW_VALV_CMD;
Label_1:      NOP 0;
      A(;
      A %L4.0;
      JNB Label_2;
      L "dbCONST_VAL".CM.CMD_VALVE.CLOSE;
      T #CS_WFI_VALV_CMD;
      SET;
      SAVE;
      CLR;
Label_2:      A BR;
      );
      JNB Label_3;
      L "dbCONST_VAL".CM.CMD_VALVE.CLOSE;
      T #CS_PW_VALV_CMD;
Label_3:      NOP 0;

NETWORK
TITLE = 5 and 6: CS/PW and CS/WFI supply switch
//----------------------------------------------------------------------------//
//=================================Item5 and 6==============================
// [StateRequest=Out(Low)] will be effective for following substate:
// 2.ISOLATE
//****************************************************************************
// State Needed:Out(2)
//****************************************************************************
// [StateRequest=In(High)] will be effective for following substate:
// 1.SETUP
// 3.FLUSH
// 4.Charge
      A #FLOWPATH_WFI;
      R #PW_CS_REQ;
      S #WFI_CS_REQ;

NETWORK
TITLE = 5 and 6: CS/PW and CS/WFI supply switch
//----------------------------------------------------------------------------//
//=================================Item5 and 6==============================
// [StateRequest=Out(Low)] will be effective for following substate:
// 2.ISOLATE
//****************************************************************************
// State Needed:Out(2)
//****************************************************************************
// [StateRequest=In(High)] will be effective for following substate:
// 1.SETUP
// 3.FLUSH
// 4.Charge
      A #FLOWPATH_PW;
      S #PW_CS_REQ;
      R #WFI_CS_REQ;

NETWORK
TITLE = Isolate Switch Req
//----------------------------------------------------------------------------//
      A #FLOWPATH_ISOLATED;
      R #WFI_CS_REQ;
      R #PW_CS_REQ;

NETWORK
TITLE = Check Switch state
//----------------------------------------------------------------------------//
      A(;
      L #WFI_CS_SW_STATE;
      L "dbCONST_VAL".CM.ZSC2_DEV_STATE.MISMATCH;
      <>I;
      );
      A(;
      L #PW_CS_SW_STATE;
      L "dbCONST_VAL".CM.ZSC2_DEV_STATE.MISMATCH;
      <>I;
      );
      = #PATH_OK;

NETWORK
TITLE =
//----------------------------------------------------------------------------//
      L 0;
      T #ErrFlag;
      NOP 0;

NETWORK
TITLE = Check valve status
//----------------------------------------------------------------------------//
      L #WFI_VALV_STATE;
      L #WFI_VALV_CMD;
      ==I;
      = %L4.0;
      A %L4.0;
      BLD 102;
      = #ControlBit[1];
      A %L4.0;
      NOT;
      JNB Label_4;
      L 1;
      T #ErrFlag;
Label_4:      NOP 0;

NETWORK
TITLE = Check valve status
//----------------------------------------------------------------------------//
      L #PW_VALV_STATE;
      L #PW_VALV_CMD;
      ==I;
      = %L4.0;
      A %L4.0;
      BLD 102;
      = #ControlBit[2];
      A %L4.0;
      NOT;
      JNB Label_5;
      L 2;
      T #ErrFlag;
Label_5:      NOP 0;

NETWORK
TITLE = Check valve status
//----------------------------------------------------------------------------//
      L #CS_WFI_VALV_STATE;
      L #CS_WFI_VALV_CMD;
      ==I;
      = %L4.0;
      A %L4.0;
      BLD 102;
      = #ControlBit[3];
      A %L4.0;
      NOT;
      JNB Label_6;
      L 3;
      T #ErrFlag;
Label_6:      NOP 0;

NETWORK
TITLE = Check valve status
//----------------------------------------------------------------------------//
      L #CS_PW_VALV_STATE;
      L #CS_PW_VALV_CMD;
      ==I;
      = %L4.0;
      A %L4.0;
      BLD 102;
      = #ControlBit[4];
      A %L4.0;
      NOT;
      JNB Label_7;
      L 4;
      T #ErrFlag;
Label_7:      NOP 0;

NETWORK
TITLE = States eq cmd
//----------------------------------------------------------------------------//
      A #ControlBit[1];
      A #ControlBit[2];
      A #ControlBit[3];
      A #ControlBit[4];
      = #State_Eq_Command;

NETWORK
TITLE = START DEVICE STATUS MONITORING TIME OF THE EM_COMMAND
//----------------------------------------------------------------------------//
      A #RUNNING;
      AN #State_Eq_Command;
      = %L4.0;
      BLD 103;
      CALL #STATUS
      {time_type := 'Time'}
      (  IN                          := %L4.0 ,
         PT                          := T#10S ,
         Q                           := #STATUS.Q ,
         ET                          := #STATUS.ET
      );
      NOP 0;

NETWORK
TITLE = Error if Device states are not Equivallent to commands
//Sequencer run condition/EM finish condition
//----------------------------------------------------------------------------//
      A #STATUS.Q;
      = #STATE_VER;

NETWORK
TITLE = Start Sequencer if Device states are in the commanded states
//----------------------------------------------------------------------------//
      A #RUNNING;
      A #State_Eq_Command;
      JNB Label_12;
      L #SEL_SUBS;
      T #ACT_PH;
      SET;
      SAVE;
      CLR;
Label_12:      A BR;
      = %L4.0;
@@ATTR_BEGIN|SFC@@
      A %L4.0;
      A #Subs_Setup;
      AN #CALL_@@SFC@@;
      A #PATH_OK;
      AN #BAD_PARAM;
      S #CALL_@@SFC@@;
@@ATTR_END|SFC@@

NETWORK
TITLE =
//----------------------------------------------------------------------------//
      A(;
      L #SEL_SUBS;
      L #ACT_PH;
      <>I;
      );
      JNB Label_13;
      L 0;
      T #ACT_PH;
Label_13:      NOP 0;

NETWORK
TITLE = Stop selected sequencer if EM is not running
//----------------------------------------------------------------------------//
      ON #RUNNING;
      O #RUNNING;
      = %L4.0;
@@ATTR_BEGIN|SFC@@
      A %L4.0;
      AN #Subs_@@STATE@@;
      R #CALL_@@SFC@@;
@@ATTR_END|SFC@@

NETWORK
TITLE = Device state of all the CM should be equal to the Commands
//----------------------------------------------------------------------------//
@@ATTR_BEGIN|SFC@@
      A #@@SFC@@_FINISHED;
      A #Subs_Setup;
      O;
@@ATTR_END|SFC@@
      = #EM_PROCESSED;

NETWORK
TITLE = SET DEVICE STATE =NOT RUNNING/STOPPED
//----------------------------------------------------------------------------//
      A(;
      ON #RUNNING;
      O;
      A #RUNNING;
      A #STATE_VER;
      );
      JNB Label_14;
      L "dbCONST_VAL".EM.DEV_STATE.STOPPED;
      T #DEV_STATE;
Label_14:      NOP 0;

NETWORK
TITLE = SET DEVICE STATE =RUNNING SUBSTATE
//----------------------------------------------------------------------------//
      A #TEQ.Q;
      JNB Label_15;
      L #SEL_SUBS;
      T #DEV_STATE;
Label_15:      NOP 0;

NETWORK
TITLE =
//----------------------------------------------------------------------------//
      A #RUNNING;
      A #State_Eq_Command;
      AN #TEQ.Q;
      = %L4.0;
      BLD 103;
      CALL #TEQ
      {time_type := 'Time'}
      (  IN                          := %L4.0 ,
         PT                          := T#2S
      );
      NOP 0;

NETWORK
TITLE = EM complete
//----------------------------------------------------------------------------//
      A(;
@@ATTR_BEGIN|SFC@@
      O #@@SFC@@_FINISHED;
@@ATTR_END|SFC@@
      );
      JNB Label_16;
      L "dbCONST_VAL".EM.DEV_STATE.COMPLETE;
      T #DEV_STATE;
Label_16:      NOP 0;

NETWORK
TITLE =
//----------------------------------------------------------------------------//
      A(;
      A #WFI_CS_REQ;
      AN #Subs_Setup;
      O;
      A #Subs_Setup;
      A(;
      O #Medium_WFI;
      O #Medium_CS_WFI;
      );
      );
      AN #Subs_Isolate;
      = #WFI_CS_REQ_T;

NETWORK
TITLE =
//----------------------------------------------------------------------------//
      A(;
      A #PW_CS_REQ;
      AN #Subs_Setup;
      O;
      A #Subs_Setup;
      A(;
      O #Medium_PW;
      O #Medium_CS_PW;
      );
      );
      AN #Subs_Isolate;
      = #PW_CS_REQ_T;
@@TEMPLATE_END@@
END_FUNCTION_BLOCK
